<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20171101 16:03:21.877" generator="Robot 3.0.2 (Python 2.7.10 on win32)">
<suite source="C:\Users\Admin\Desktop\Sukesh-Automation\RobotFramework\Genric_Script\SBC_Onboarding_TestCases.robot" id="s1" name="SBC Onboarding TestCases">
<test id="s1-t1" name="TC1_Verification of on-boarded vnf on RHOSP">
<kw name="ImportDetails" library="Genric_Keywords">
<arguments>
<arg>C:\\Users\\Admin\\Desktop\\Sukesh-Automation\\RobotFramework\\Genric_Script\\Config\\Enterprise_Config.txt</arg>
<arg>${Label}</arg>
</arguments>
<assign>
<var>@{Server}</var>
</assign>
<kw name="Parseconfdata" library="Library">
<arguments>
<arg>${ConfigPath}</arg>
<arg>${Label}</arg>
</arguments>
<assign>
<var>@{Param}</var>
</assign>
<msg timestamp="20171101 16:03:22.470" level="INFO">@{Param} = [ "RedHat" | oracle1 | oracle1 | qcow2 | /root/auto_heatfiles | bare | C:\xampp\htdocs\VNFXchange | nova:compute2 | perimetaseg | TCP | Ingress | ipv4 | Oracle_SBC_Flavour_Template.txt | nnSCZ739p1-im...</msg>
<status status="PASS" endtime="20171101 16:03:22.470" starttime="20171101 16:03:22.454"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${server}</var>
</assign>
<msg timestamp="20171101 16:03:22.470" level="INFO">${server} = "RedHat"</msg>
<status status="PASS" endtime="20171101 16:03:22.470" starttime="20171101 16:03:22.470"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${VNFName}</var>
</assign>
<msg timestamp="20171101 16:03:22.470" level="INFO">${VNFName} = oracle1</msg>
<status status="PASS" endtime="20171101 16:03:22.470" starttime="20171101 16:03:22.470"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>2</arg>
</arguments>
<assign>
<var>${ImageName}</var>
</assign>
<msg timestamp="20171101 16:03:22.470" level="INFO">${ImageName} = oracle1</msg>
<status status="PASS" endtime="20171101 16:03:22.470" starttime="20171101 16:03:22.470"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>3</arg>
</arguments>
<assign>
<var>${DiskFormat}</var>
</assign>
<msg timestamp="20171101 16:03:22.470" level="INFO">${DiskFormat} = qcow2</msg>
<status status="PASS" endtime="20171101 16:03:22.470" starttime="20171101 16:03:22.470"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>4</arg>
</arguments>
<assign>
<var>${ImageFilePath}</var>
</assign>
<msg timestamp="20171101 16:03:22.470" level="INFO">${ImageFilePath} = /root/auto_heatfiles</msg>
<status status="PASS" endtime="20171101 16:03:22.470" starttime="20171101 16:03:22.470"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>5</arg>
</arguments>
<assign>
<var>${ConatinerFormat}</var>
</assign>
<msg timestamp="20171101 16:03:22.470" level="INFO">${ConatinerFormat} = bare</msg>
<status status="PASS" endtime="20171101 16:03:22.470" starttime="20171101 16:03:22.470"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>6</arg>
</arguments>
<assign>
<var>${FlavorP}</var>
</assign>
<msg timestamp="20171101 16:03:22.470" level="INFO">${FlavorP} = C:\xampp\htdocs\VNFXchange</msg>
<status status="PASS" endtime="20171101 16:03:22.470" starttime="20171101 16:03:22.470"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>7</arg>
</arguments>
<assign>
<var>${AvZone}</var>
</assign>
<msg timestamp="20171101 16:03:22.470" level="INFO">${AvZone} = nova:compute2</msg>
<status status="PASS" endtime="20171101 16:03:22.470" starttime="20171101 16:03:22.470"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>8</arg>
</arguments>
<assign>
<var>${Security}</var>
</assign>
<msg timestamp="20171101 16:03:22.470" level="INFO">${Security} = perimetaseg</msg>
<status status="PASS" endtime="20171101 16:03:22.470" starttime="20171101 16:03:22.470"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>9</arg>
</arguments>
<assign>
<var>${Protocol}</var>
</assign>
<msg timestamp="20171101 16:03:22.470" level="INFO">${Protocol} = TCP</msg>
<status status="PASS" endtime="20171101 16:03:22.470" starttime="20171101 16:03:22.470"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>10</arg>
</arguments>
<assign>
<var>${Direction}</var>
</assign>
<msg timestamp="20171101 16:03:22.470" level="INFO">${Direction} = Ingress</msg>
<status status="PASS" endtime="20171101 16:03:22.470" starttime="20171101 16:03:22.470"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>11</arg>
</arguments>
<assign>
<var>${Ethertype}</var>
</assign>
<msg timestamp="20171101 16:03:22.470" level="INFO">${Ethertype} = ipv4</msg>
<status status="PASS" endtime="20171101 16:03:22.470" starttime="20171101 16:03:22.470"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>12</arg>
</arguments>
<assign>
<var>${FN}</var>
</assign>
<msg timestamp="20171101 16:03:22.470" level="INFO">${FN} = Oracle_SBC_Flavour_Template.txt</msg>
<status status="PASS" endtime="20171101 16:03:22.470" starttime="20171101 16:03:22.470"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>13</arg>
</arguments>
<assign>
<var>${ImageFileName}</var>
</assign>
<msg timestamp="20171101 16:03:22.470" level="INFO">${ImageFileName} = nnSCZ739p1-img-vm_kvm.qcow2</msg>
<status status="PASS" endtime="20171101 16:03:22.470" starttime="20171101 16:03:22.470"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${Nic1}</arg>
<arg>Get From List</arg>
<arg>${Param}</arg>
<arg>12</arg>
</arguments>
<status status="PASS" endtime="20171101 16:03:22.470" starttime="20171101 16:03:22.470"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${Nic2}</arg>
<arg>Get From List</arg>
<arg>${Param}</arg>
<arg>13</arg>
</arguments>
<status status="PASS" endtime="20171101 16:03:22.470" starttime="20171101 16:03:22.470"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${Nic3}</arg>
<arg>Get From List</arg>
<arg>${Param}</arg>
<arg>14</arg>
</arguments>
<status status="PASS" endtime="20171101 16:03:22.470" starttime="20171101 16:03:22.470"></status>
</kw>
<kw name="Split Extension" library="OperatingSystem">
<doc>Splits the extension from the given path.</doc>
<arguments>
<arg>${FN}</arg>
</arguments>
<assign>
<var>${FlavourName}</var>
<var>${Ext}</var>
</assign>
<msg timestamp="20171101 16:03:22.470" level="INFO">${FlavourName} = Oracle_SBC_Flavour_Template</msg>
<msg timestamp="20171101 16:03:22.470" level="INFO">${Ext} = txt</msg>
<status status="PASS" endtime="20171101 16:03:22.470" starttime="20171101 16:03:22.470"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${ImageFileName}</arg>
</arguments>
<msg timestamp="20171101 16:03:22.470" level="INFO">${ImageFileName} = nnSCZ739p1-img-vm_kvm.qcow2</msg>
<status status="PASS" endtime="20171101 16:03:22.470" starttime="20171101 16:03:22.470"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${FN}</arg>
</arguments>
<msg timestamp="20171101 16:03:22.470" level="INFO">${FN} = Oracle_SBC_Flavour_Template.txt</msg>
<status status="PASS" endtime="20171101 16:03:22.470" starttime="20171101 16:03:22.470"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${FlavourName}</arg>
</arguments>
<msg timestamp="20171101 16:03:22.470" level="INFO">${FlavourName} = Oracle_SBC_Flavour_Template</msg>
<status status="PASS" endtime="20171101 16:03:22.470" starttime="20171101 16:03:22.470"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${VNFName}</arg>
</arguments>
<msg timestamp="20171101 16:03:22.470" level="INFO">${VNFName} = oracle1</msg>
<status status="PASS" endtime="20171101 16:03:22.470" starttime="20171101 16:03:22.470"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${server}</arg>
</arguments>
<msg timestamp="20171101 16:03:22.470" level="INFO">${server} = "RedHat"</msg>
<status status="PASS" endtime="20171101 16:03:22.470" starttime="20171101 16:03:22.470"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${ImageName}</arg>
</arguments>
<msg timestamp="20171101 16:03:22.485" level="INFO">${ImageName} = oracle1</msg>
<status status="PASS" endtime="20171101 16:03:22.485" starttime="20171101 16:03:22.485"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${DiskFormat}</arg>
</arguments>
<msg timestamp="20171101 16:03:22.485" level="INFO">${DiskFormat} = qcow2</msg>
<status status="PASS" endtime="20171101 16:03:22.485" starttime="20171101 16:03:22.485"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${ImageFilePath}</arg>
</arguments>
<msg timestamp="20171101 16:03:22.485" level="INFO">${ImageFilePath} = /root/auto_heatfiles</msg>
<status status="PASS" endtime="20171101 16:03:22.485" starttime="20171101 16:03:22.485"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${ConatinerFormat}</arg>
</arguments>
<msg timestamp="20171101 16:03:22.485" level="INFO">${ConatinerFormat} = bare</msg>
<status status="PASS" endtime="20171101 16:03:22.485" starttime="20171101 16:03:22.485"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${FlavorP}</arg>
</arguments>
<msg timestamp="20171101 16:03:22.485" level="INFO">${FlavorP} = C:\xampp\htdocs\VNFXchange</msg>
<status status="PASS" endtime="20171101 16:03:22.485" starttime="20171101 16:03:22.485"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AvZone}</arg>
</arguments>
<msg timestamp="20171101 16:03:22.485" level="INFO">${AvZone} = nova:compute2</msg>
<status status="PASS" endtime="20171101 16:03:22.485" starttime="20171101 16:03:22.485"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${Security}</arg>
</arguments>
<msg timestamp="20171101 16:03:22.485" level="INFO">${Security} = perimetaseg</msg>
<status status="PASS" endtime="20171101 16:03:22.485" starttime="20171101 16:03:22.485"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${Protocol}</arg>
</arguments>
<msg timestamp="20171101 16:03:22.485" level="INFO">${Protocol} = TCP</msg>
<status status="PASS" endtime="20171101 16:03:22.485" starttime="20171101 16:03:22.485"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${Direction}</arg>
</arguments>
<msg timestamp="20171101 16:03:22.485" level="INFO">${Direction} = Ingress</msg>
<status status="PASS" endtime="20171101 16:03:22.485" starttime="20171101 16:03:22.485"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${Ethertype}</arg>
</arguments>
<msg timestamp="20171101 16:03:22.485" level="INFO">${Ethertype} = ipv4</msg>
<status status="PASS" endtime="20171101 16:03:22.485" starttime="20171101 16:03:22.485"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Set Global Variable</arg>
<arg>${Nic1}</arg>
</arguments>
<status status="PASS" endtime="20171101 16:03:22.485" starttime="20171101 16:03:22.485"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Set Global Variable</arg>
<arg>${Nic2}</arg>
</arguments>
<status status="PASS" endtime="20171101 16:03:22.485" starttime="20171101 16:03:22.485"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${VNFName}</arg>
</arguments>
<msg timestamp="20171101 16:03:22.485" level="INFO">${VNFName} = oracle1</msg>
<status status="PASS" endtime="20171101 16:03:22.485" starttime="20171101 16:03:22.485"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Set Global Variable</arg>
<arg>${Nic3}</arg>
</arguments>
<status status="PASS" endtime="20171101 16:03:22.485" starttime="20171101 16:03:22.485"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${server}=="RedHat"</arg>
<arg>Return From Keyword</arg>
<arg>@{RedHat}</arg>
</arguments>
<kw name="Return From Keyword" library="BuiltIn">
<doc>Returns from the enclosing user keyword.</doc>
<arguments>
<arg>@{RedHat}</arg>
</arguments>
<msg timestamp="20171101 16:03:22.485" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20171101 16:03:22.485" starttime="20171101 16:03:22.485"></status>
</kw>
<status status="PASS" endtime="20171101 16:03:22.485" starttime="20171101 16:03:22.485"></status>
</kw>
<msg timestamp="20171101 16:03:22.485" level="INFO">@{Server} = [ 10.53.214.10 | root | techm123 ]</msg>
<status status="PASS" endtime="20171101 16:03:22.485" starttime="20171101 16:03:22.454"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>@{Server}</arg>
</arguments>
<msg timestamp="20171101 16:03:22.485" level="INFO">@{Server} = [ 10.53.214.10 | root | techm123 ]</msg>
<status status="PASS" endtime="20171101 16:03:22.485" starttime="20171101 16:03:22.485"></status>
</kw>
<kw name="Server_Login" library="Genric_Keywords">
<arguments>
<arg>@{Server}</arg>
</arguments>
<assign>
<var>${Index}</var>
</assign>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Server}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${HOST}</var>
</assign>
<msg timestamp="20171101 16:03:22.485" level="INFO">${HOST} = 10.53.214.10</msg>
<status status="PASS" endtime="20171101 16:03:22.485" starttime="20171101 16:03:22.485"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Server}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${USERNAME}</var>
</assign>
<msg timestamp="20171101 16:03:22.485" level="INFO">${USERNAME} = root</msg>
<status status="PASS" endtime="20171101 16:03:22.485" starttime="20171101 16:03:22.485"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Server}</arg>
<arg>2</arg>
</arguments>
<assign>
<var>${PASSWORD}</var>
</assign>
<msg timestamp="20171101 16:03:22.485" level="INFO">${PASSWORD} = techm123</msg>
<status status="PASS" endtime="20171101 16:03:22.485" starttime="20171101 16:03:22.485"></status>
</kw>
<kw type="for" name="${i} IN RANGE [ 0 | 4 ]">
<kw type="foritem" name="${i} = 0">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<assign>
<var>${Index}</var>
</assign>
<msg timestamp="20171101 16:03:22.501" level="INFO">${Index} = 1</msg>
<status status="PASS" endtime="20171101 16:03:22.501" starttime="20171101 16:03:22.485"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Login</arg>
<arg>${USERNAME}</arg>
<arg>${PASSWORD}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PASSWORD}</arg>
</arguments>
<msg timestamp="20171101 16:03:22.501" level="INFO">Logging into '10.53.214.10:22' as 'root'.</msg>
<msg timestamp="20171101 16:03:28.694" level="INFO">Read output: Last login: Wed Nov  1 06:29:29 2017 from 10.53.172.4
[root@controller ~]#</msg>
<status status="PASS" endtime="20171101 16:03:28.694" starttime="20171101 16:03:22.501"></status>
</kw>
<msg timestamp="20171101 16:03:28.694" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20171101 16:03:28.694" starttime="20171101 16:03:22.501"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20171101 16:03:28.694" starttime="20171101 16:03:28.694"></status>
</kw>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20171101 16:03:28.694" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20171101 16:03:28.694" starttime="20171101 16:03:28.694"></status>
</kw>
<status status="PASS" endtime="20171101 16:03:28.694" starttime="20171101 16:03:22.485"></status>
</kw>
<status status="PASS" endtime="20171101 16:03:28.694" starttime="20171101 16:03:22.485"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>*****************ServerLogin_Validation**********************</arg>
</arguments>
<msg timestamp="20171101 16:03:28.694" level="INFO">*****************ServerLogin_Validation**********************</msg>
<status status="PASS" endtime="20171101 16:03:28.694" starttime="20171101 16:03:28.694"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>20s</arg>
<arg>2</arg>
<arg>write</arg>
<arg>ifconfig | grep inet</arg>
</arguments>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>ifconfig | grep inet</arg>
</arguments>
<msg timestamp="20171101 16:03:28.694" level="INFO">ifconfig | grep inet</msg>
<status status="PASS" endtime="20171101 16:03:28.694" starttime="20171101 16:03:28.694"></status>
</kw>
<status status="PASS" endtime="20171101 16:03:28.694" starttime="20171101 16:03:28.694"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>4</arg>
</arguments>
<msg timestamp="20171101 16:03:32.703" level="INFO">Slept 4 seconds</msg>
<status status="PASS" endtime="20171101 16:03:32.703" starttime="20171101 16:03:28.694"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20171101 16:03:32.703" level="INFO">[01;31m[Kinet[m[K 169.254.1.8  netmask 255.255.255.0  broadcast 169.254.1.255
        [01;31m[Kinet[m[K6 fe80::cca5:25ff:fe65:134b  prefixlen 64  scopeid 0x20&lt;link&gt;
        [01;31m[Kinet[m[K 172.18.0.60  netmask 255.255.255.0  broadcast 172.18.0.255
        [01;31m[Kinet[m[K6 fe80::4d7:59ff:fe85:5f45  prefixlen 64  scopeid 0x20&lt;link&gt;
        [01;31m[Kinet[m[K 10.80.1.8  netmask 255.255.255.0  broadcast 10.80.1.255
        [01;31m[Kinet[m[K6 fe80::fc8a:54ff:fe8a:974e  prefixlen 64  scopeid 0x20&lt;link&gt;
        [01;31m[Kinet[m[K 10.81.1.8  netmask 255.255.255.0  broadcast 10.81.1.255
        [01;31m[Kinet[m[K6 fe80::283b:ecff:fee2:1e40  prefixlen 64  scopeid 0x20&lt;link&gt;
        [01;31m[Kinet[m[K6 fe80::eef4:bbff:fedb:a3c8  prefixlen 64  scopeid 0x20&lt;link&gt;
        [01;31m[Kinet[m[K 168.254.17.8  netmask 255.255.255.0  broadcast 168.254.17.255
        [01;31m[Kinet[m[K6 fe80::eef4:bbff:fedb:a3ca  prefixlen 64  scopeid 0x20&lt;link&gt;
        [01;31m[Kinet[m[K 10.53.214.10  netmask 255.255.255.0  broadcast 10.53.214.255
        [01;31m[Kinet[m[K6 fe80::eef4:bbff:fedb:a3cc  prefixlen 64  scopeid 0x20&lt;link&gt;
        [01;31m[Kinet[m[K6 fe80::eef4:bbff:fedb:a3cd  prefixlen 64  scopeid 0x20&lt;link&gt;
        [01;31m[Kinet[m[K 127.0.0.1  netmask 255.0.0.0
        [01;31m[Kinet[m[K6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;
        [01;31m[Kinet[m[K6 fe80::a236:9fff:fe78:4b14  prefixlen 64  scopeid 0x20&lt;link&gt;
        [01;31m[Kinet[m[K6 fe80::a236:9fff:fe78:4b16  prefixlen 64  scopeid 0x20&lt;link&gt;
        [01;31m[Kinet[m[K 192.168.122.1  netmask 255.255.255.0  broadcast 192.168.122.255
[root@controller ~]#</msg>
<msg timestamp="20171101 16:03:32.703" level="INFO">${output} =         [01;31m[Kinet[m[K 169.254.1.8  netmask 255.255.255.0  broadcast 169.254.1.255
        [01;31m[Kinet[m[K6 fe80::cca5:25ff:fe65:134b  prefixlen 64  scopeid 0x20&lt;link&gt;
        [01;31m...</msg>
<status status="PASS" endtime="20171101 16:03:32.703" starttime="20171101 16:03:32.703"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20171101 16:03:32.703" starttime="20171101 16:03:32.703"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>*****************ServerLogin_Validation Completed**********************</arg>
</arguments>
<msg timestamp="20171101 16:03:32.703" level="INFO">*****************ServerLogin_Validation Completed**********************</msg>
<status status="PASS" endtime="20171101 16:03:32.703" starttime="20171101 16:03:32.703"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>20s</arg>
<arg>2</arg>
<arg>write</arg>
<arg>source keystonerc_admin</arg>
</arguments>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>source keystonerc_admin</arg>
</arguments>
<msg timestamp="20171101 16:03:32.703" level="INFO">source keystonerc_admin</msg>
<status status="PASS" endtime="20171101 16:03:32.703" starttime="20171101 16:03:32.703"></status>
</kw>
<status status="PASS" endtime="20171101 16:03:32.703" starttime="20171101 16:03:32.703"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20171101 16:03:32.703" level="INFO">[root@controller ~(keystone_admin)]#</msg>
<msg timestamp="20171101 16:03:32.703" level="INFO">${output} = [root@controller ~(keystone_admin)]# </msg>
<status status="PASS" endtime="20171101 16:03:32.703" starttime="20171101 16:03:32.703"></status>
</kw>
<msg timestamp="20171101 16:03:32.703" level="INFO">${Index} = 1</msg>
<status status="PASS" endtime="20171101 16:03:32.703" starttime="20171101 16:03:22.485"></status>
</kw>
<kw name="SBC_CreateFlavor" library="Oracle_SBC_Keywords">
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{Server}</arg>
<arg>ImportDetails</arg>
<arg>C:\\Users\\Admin\\Desktop\\Sukesh-Automation\\RobotFramework\\Genric_Script\\Config\\Enterprise_Config.txt</arg>
<arg>${Label}</arg>
</arguments>
<status status="PASS" endtime="20171101 16:03:32.703" starttime="20171101 16:03:32.703"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Server_Login</arg>
<arg>@{Server}</arg>
</arguments>
<status status="PASS" endtime="20171101 16:03:32.719" starttime="20171101 16:03:32.703"></status>
</kw>
<kw name="Create Flavor" library="Genric_Keywords">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>********************Create Flavor start*****************************</arg>
</arguments>
<msg timestamp="20171101 16:03:32.719" level="INFO">********************Create Flavor start*****************************</msg>
<status status="PASS" endtime="20171101 16:03:32.719" starttime="20171101 16:03:32.719"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>C:\\Users\\Admin\\Desktop\\Sukesh-Automation\\RobotFramework\\Genric_Script\\Config\\</arg>
<arg>${FN}</arg>
</arguments>
<assign>
<var>${path}</var>
</assign>
<msg timestamp="20171101 16:03:32.719" level="INFO">${path} = C:\Users\Admin\Desktop\Sukesh-Automation\RobotFramework\Genric_Script\Config\Oracle_SBC_Flavour_Template.txt</msg>
<status status="PASS" endtime="20171101 16:03:32.719" starttime="20171101 16:03:32.719"></status>
</kw>
<kw name="ImportFlavor" library="Genric_Keywords">
<arguments>
<arg>${path}</arg>
</arguments>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${Path}</arg>
</arguments>
<assign>
<var>${File}</var>
</assign>
<msg timestamp="20171101 16:03:32.719" html="yes" level="INFO">Getting file '&lt;a href="file://C:\Users\Admin\Desktop\Sukesh-Automation\RobotFramework\Genric_Script\Config\Oracle_SBC_Flavour_Template.txt"&gt;C:\Users\Admin\Desktop\Sukesh-Automation\RobotFramework\Genric_Script\Config\Oracle_SBC_Flavour_Template.txt&lt;/a&gt;'.</msg>
<msg timestamp="20171101 16:03:32.719" level="INFO">${File} = Ram:8192
disk:80
vcpus:4</msg>
<status status="PASS" endtime="20171101 16:03:32.719" starttime="20171101 16:03:32.719"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>${Flavor_list}</var>
</assign>
<msg timestamp="20171101 16:03:32.719" level="INFO">${Flavor_list} = []</msg>
<status status="PASS" endtime="20171101 16:03:32.719" starttime="20171101 16:03:32.719"></status>
</kw>
<kw name="Split To Lines" library="String">
<doc>Splits the given string to lines.</doc>
<arguments>
<arg>${File}</arg>
</arguments>
<assign>
<var>@{list}</var>
</assign>
<msg timestamp="20171101 16:03:32.719" level="INFO">3 lines returned</msg>
<msg timestamp="20171101 16:03:32.719" level="INFO">@{list} = [ Ram:8192 | disk:80 | vcpus:4 ]</msg>
<status status="PASS" endtime="20171101 16:03:32.719" starttime="20171101 16:03:32.719"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${i}</arg>
<arg>Set Variable</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20171101 16:03:32.719" starttime="20171101 16:03:32.719"></status>
</kw>
<kw type="for" name="${line} IN [ @{list} ]">
<kw type="foritem" name="${line} = Ram:8192">
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>log</arg>
<arg>${line}</arg>
</arguments>
<status status="PASS" endtime="20171101 16:03:32.719" starttime="20171101 16:03:32.719"></status>
</kw>
<kw name="Split String From Right" library="String">
<doc>Splits the ``string`` using ``separator`` starting from right.</doc>
<arguments>
<arg>${line}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>@{data}</var>
</assign>
<msg timestamp="20171101 16:03:32.719" level="INFO">@{data} = [ Ram | 8192 ]</msg>
<status status="PASS" endtime="20171101 16:03:32.719" starttime="20171101 16:03:32.719"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${data}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${Value}</var>
</assign>
<msg timestamp="20171101 16:03:32.719" level="INFO">${Value} = 8192</msg>
<status status="PASS" endtime="20171101 16:03:32.719" starttime="20171101 16:03:32.719"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${Flavor_list}</arg>
<arg>${Value}</arg>
</arguments>
<status status="PASS" endtime="20171101 16:03:32.735" starttime="20171101 16:03:32.719"></status>
</kw>
<status status="PASS" endtime="20171101 16:03:32.735" starttime="20171101 16:03:32.719"></status>
</kw>
<kw type="foritem" name="${line} = disk:80">
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>log</arg>
<arg>${line}</arg>
</arguments>
<status status="PASS" endtime="20171101 16:03:32.735" starttime="20171101 16:03:32.735"></status>
</kw>
<kw name="Split String From Right" library="String">
<doc>Splits the ``string`` using ``separator`` starting from right.</doc>
<arguments>
<arg>${line}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>@{data}</var>
</assign>
<msg timestamp="20171101 16:03:32.735" level="INFO">@{data} = [ disk | 80 ]</msg>
<status status="PASS" endtime="20171101 16:03:32.735" starttime="20171101 16:03:32.735"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${data}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${Value}</var>
</assign>
<msg timestamp="20171101 16:03:32.735" level="INFO">${Value} = 80</msg>
<status status="PASS" endtime="20171101 16:03:32.735" starttime="20171101 16:03:32.735"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${Flavor_list}</arg>
<arg>${Value}</arg>
</arguments>
<status status="PASS" endtime="20171101 16:03:32.735" starttime="20171101 16:03:32.735"></status>
</kw>
<status status="PASS" endtime="20171101 16:03:32.735" starttime="20171101 16:03:32.735"></status>
</kw>
<kw type="foritem" name="${line} = vcpus:4">
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>log</arg>
<arg>${line}</arg>
</arguments>
<status status="PASS" endtime="20171101 16:03:32.735" starttime="20171101 16:03:32.735"></status>
</kw>
<kw name="Split String From Right" library="String">
<doc>Splits the ``string`` using ``separator`` starting from right.</doc>
<arguments>
<arg>${line}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>@{data}</var>
</assign>
<msg timestamp="20171101 16:03:32.735" level="INFO">@{data} = [ vcpus | 4 ]</msg>
<status status="PASS" endtime="20171101 16:03:32.735" starttime="20171101 16:03:32.735"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${data}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${Value}</var>
</assign>
<msg timestamp="20171101 16:03:32.735" level="INFO">${Value} = 4</msg>
<status status="PASS" endtime="20171101 16:03:32.735" starttime="20171101 16:03:32.735"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${Flavor_list}</arg>
<arg>${Value}</arg>
</arguments>
<status status="PASS" endtime="20171101 16:03:32.735" starttime="20171101 16:03:32.735"></status>
</kw>
<status status="PASS" endtime="20171101 16:03:32.735" starttime="20171101 16:03:32.735"></status>
</kw>
<status status="PASS" endtime="20171101 16:03:32.735" starttime="20171101 16:03:32.719"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Flavor_list}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${Ram}</var>
</assign>
<msg timestamp="20171101 16:03:32.735" level="INFO">${Ram} = 8192</msg>
<status status="PASS" endtime="20171101 16:03:32.735" starttime="20171101 16:03:32.735"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Flavor_list}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${Disk}</var>
</assign>
<msg timestamp="20171101 16:03:32.735" level="INFO">${Disk} = 80</msg>
<status status="PASS" endtime="20171101 16:03:32.735" starttime="20171101 16:03:32.735"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Flavor_list}</arg>
<arg>2</arg>
</arguments>
<assign>
<var>${CPU}</var>
</assign>
<msg timestamp="20171101 16:03:32.735" level="INFO">${CPU} = 4</msg>
<status status="PASS" endtime="20171101 16:03:32.735" starttime="20171101 16:03:32.735"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${Ram}</arg>
</arguments>
<msg timestamp="20171101 16:03:32.750" level="INFO">${Ram} = 8192</msg>
<status status="PASS" endtime="20171101 16:03:32.750" starttime="20171101 16:03:32.735"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${Disk}</arg>
</arguments>
<msg timestamp="20171101 16:03:32.750" level="INFO">${Disk} = 80</msg>
<status status="PASS" endtime="20171101 16:03:32.750" starttime="20171101 16:03:32.750"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${CPU}</arg>
</arguments>
<msg timestamp="20171101 16:03:32.750" level="INFO">${CPU} = 4</msg>
<status status="PASS" endtime="20171101 16:03:32.750" starttime="20171101 16:03:32.750"></status>
</kw>
<status status="PASS" endtime="20171101 16:03:32.750" starttime="20171101 16:03:32.719"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>nova flavor-create</arg>
<arg>${FlavourName}</arg>
<arg>auto</arg>
<arg>${Ram}</arg>
<arg>${Disk}</arg>
<arg>${CPU}</arg>
</arguments>
<assign>
<var>${str}</var>
</assign>
<msg timestamp="20171101 16:03:32.750" level="INFO">${str} = nova flavor-create Oracle_SBC_Flavour_Template auto 8192 80 4</msg>
<status status="PASS" endtime="20171101 16:03:32.750" starttime="20171101 16:03:32.750"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${str}</arg>
</arguments>
<msg timestamp="20171101 16:03:32.750" level="INFO">nova flavor-create Oracle_SBC_Flavour_Templ ate auto 8192 80 4</msg>
<status status="PASS" endtime="20171101 16:03:32.750" starttime="20171101 16:03:32.750"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5</arg>
</arguments>
<msg timestamp="20171101 16:03:37.758" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20171101 16:03:37.758" starttime="20171101 16:03:32.750"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20171101 16:03:37.758" level="INFO">+--------------------------------------+-----------------------------+-----------+------+-----------+------+-------+-------------+-----------+
| ID                                   | Name                        | Memory_MB | Disk | Ephemeral | Swap | VCPUs | RXTX_Factor | Is_Public |
+--------------------------------------+-----------------------------+-----------+------+-----------+------+-------+-------------+-----------+
| 2857ef53-0bc4-42e6-b762-faa67e40cc0e | Oracle_SBC_Flavour_Template | 8192      | 80   | 0         |      | 4     | 1.0         | True      |
+--------------------------------------+-----------------------------+-----------+------+-----------+------+-------+-------------+-----------+
[root@controller ~(keystone_admin)]#</msg>
<msg timestamp="20171101 16:03:37.758" level="INFO">${output} = +--------------------------------------+-----------------------------+-----------+------+-----------+------+-------+-------------+-----------+
| ID                                   | Name           ...</msg>
<status status="PASS" endtime="20171101 16:03:37.758" starttime="20171101 16:03:37.758"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>********************Create Flavor Complete*****************************</arg>
</arguments>
<msg timestamp="20171101 16:03:37.758" level="INFO">********************Create Flavor Complete*****************************</msg>
<status status="PASS" endtime="20171101 16:03:37.758" starttime="20171101 16:03:37.758"></status>
</kw>
<status status="PASS" endtime="20171101 16:03:37.758" starttime="20171101 16:03:32.719"></status>
</kw>
<status status="PASS" endtime="20171101 16:03:37.758" starttime="20171101 16:03:32.703"></status>
</kw>
<kw name="Flavor_Validation" library="Oracle_SBC_Keywords">
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{Server}</arg>
<arg>ImportDetails</arg>
<arg>C:\\Users\\Admin\\Desktop\\Sukesh-Automation\\RobotFramework\\Genric_Script\\Config\\Enterprise_Config.txt</arg>
<arg>${Label}</arg>
</arguments>
<status status="PASS" endtime="20171101 16:03:37.758" starttime="20171101 16:03:37.758"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Server_Login</arg>
<arg>@{Server}</arg>
</arguments>
<status status="PASS" endtime="20171101 16:03:37.758" starttime="20171101 16:03:37.758"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>nova flavor-list |grep \ -i</arg>
<arg>${FlavourName}</arg>
</arguments>
<assign>
<var>${str}</var>
</assign>
<msg timestamp="20171101 16:03:37.758" level="INFO">${str} = nova flavor-list |grep  -i Oracle_SBC_Flavour_Template</msg>
<status status="PASS" endtime="20171101 16:03:37.758" starttime="20171101 16:03:37.758"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>20s</arg>
<arg>2</arg>
<arg>write</arg>
<arg>${str}</arg>
</arguments>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${str}</arg>
</arguments>
<msg timestamp="20171101 16:03:37.773" level="INFO">nova flavor-list |grep  -i Oracle_SBC_Flavo ur_Template</msg>
<status status="PASS" endtime="20171101 16:03:37.773" starttime="20171101 16:03:37.758"></status>
</kw>
<status status="PASS" endtime="20171101 16:03:37.773" starttime="20171101 16:03:37.758"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10</arg>
</arguments>
<msg timestamp="20171101 16:03:47.773" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20171101 16:03:47.773" starttime="20171101 16:03:37.773"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20171101 16:03:47.773" level="INFO">| 2857ef53-0bc4-42e6-b762-faa67e40cc0e | [01;31m[KOracle_SBC_Flavour_Template[m[K | 8192      | 80   | 0         |      | 4     | 1.0         | True      |
[root@controller ~(keystone_admin)]#</msg>
<msg timestamp="20171101 16:03:47.773" level="INFO">${output} = | 2857ef53-0bc4-42e6-b762-faa67e40cc0e | [01;31m[KOracle_SBC_Flavour_Template[m[K | 8192      | 80   | 0         |      | 4     | 1.0         | True      |
[root@controller ~(keystone_admin)]# </msg>
<status status="PASS" endtime="20171101 16:03:47.773" starttime="20171101 16:03:47.773"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${FlavourName}</arg>
</arguments>
<status status="PASS" endtime="20171101 16:03:47.773" starttime="20171101 16:03:47.773"></status>
</kw>
<status status="PASS" endtime="20171101 16:03:47.773" starttime="20171101 16:03:37.758"></status>
</kw>
<kw name="SBC_CreateImage" library="Oracle_SBC_Keywords">
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{Server}</arg>
<arg>ImportDetails</arg>
<arg>C:\\Users\\Admin\\Desktop\\Sukesh-Automation\\RobotFramework\\Genric_Script\\Config\\Enterprise_Config.txt</arg>
<arg>${Label}</arg>
</arguments>
<status status="PASS" endtime="20171101 16:03:47.773" starttime="20171101 16:03:47.773"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Server_Login</arg>
<arg>@{Server}</arg>
</arguments>
<status status="PASS" endtime="20171101 16:03:47.773" starttime="20171101 16:03:47.773"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>log</arg>
<arg>**************Push Image started***********</arg>
</arguments>
<status status="PASS" endtime="20171101 16:03:47.773" starttime="20171101 16:03:47.773"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>PushimagefiletoServer</arg>
<arg>@{Server}</arg>
</arguments>
<status status="PASS" endtime="20171101 16:03:47.773" starttime="20171101 16:03:47.773"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>log</arg>
<arg>**************Push Image Completed***********</arg>
</arguments>
<status status="PASS" endtime="20171101 16:03:47.773" starttime="20171101 16:03:47.773"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>**************Image Create Started ***********</arg>
</arguments>
<msg timestamp="20171101 16:03:47.773" level="INFO">**************Image Create Started ***********</msg>
<status status="PASS" endtime="20171101 16:03:47.773" starttime="20171101 16:03:47.773"></status>
</kw>
<kw name="GlanceImageUpload" library="Genric_Keywords">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>******************Create Image on Glance Started*******************</arg>
</arguments>
<msg timestamp="20171101 16:03:47.773" level="INFO">******************Create Image on Glance Started*******************</msg>
<status status="PASS" endtime="20171101 16:03:47.773" starttime="20171101 16:03:47.773"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Switch Connection</arg>
<arg>${Index}</arg>
</arguments>
<status status="PASS" endtime="20171101 16:03:47.773" starttime="20171101 16:03:47.773"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${IN}</arg>
<arg>Get From List</arg>
<arg>${Param}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20171101 16:03:47.773" starttime="20171101 16:03:47.773"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${DF}</arg>
<arg>Get From List</arg>
<arg>${Param}</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20171101 16:03:47.773" starttime="20171101 16:03:47.773"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${IFP}</arg>
<arg>Get From List</arg>
<arg>${Param}</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20171101 16:03:47.789" starttime="20171101 16:03:47.773"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${CF}</arg>
<arg>Get From List</arg>
<arg>${Param}</arg>
<arg>3</arg>
</arguments>
<status status="PASS" endtime="20171101 16:03:47.789" starttime="20171101 16:03:47.789"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${FP}</arg>
<arg>Get From List</arg>
<arg>${Param}</arg>
<arg>4</arg>
</arguments>
<status status="PASS" endtime="20171101 16:03:47.789" starttime="20171101 16:03:47.789"></status>
</kw>
<kw name="Getimagename" library="Library">
<arguments>
<arg>${ImageFilePath}</arg>
<arg>${ImageFileName}</arg>
</arguments>
<assign>
<var>${remotepathwithimagename}</var>
</assign>
<msg timestamp="20171101 16:03:47.789" level="INFO">${remotepathwithimagename} = /root/auto_heatfiles/nnSCZ739p1-img-vm_kvm.qcow2</msg>
<status status="PASS" endtime="20171101 16:03:47.789" starttime="20171101 16:03:47.789"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${dstImage}</arg>
<arg>Catenate</arg>
<arg>SEPERATOR=/</arg>
<arg>/root/auto_heatfiles</arg>
</arguments>
<status status="PASS" endtime="20171101 16:03:47.789" starttime="20171101 16:03:47.789"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Set Global Variable</arg>
<arg>${IN}</arg>
</arguments>
<status status="PASS" endtime="20171101 16:03:47.789" starttime="20171101 16:03:47.789"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>glance image-create --name</arg>
<arg>${ImageName}</arg>
</arguments>
<assign>
<var>${str1}</var>
</assign>
<msg timestamp="20171101 16:03:47.789" level="INFO">${str1} = glance image-create --name oracle1</msg>
<status status="PASS" endtime="20171101 16:03:47.789" starttime="20171101 16:03:47.789"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>--disk-format</arg>
<arg>${DiskFormat}</arg>
</arguments>
<assign>
<var>${str2}</var>
</assign>
<msg timestamp="20171101 16:03:47.789" level="INFO">${str2} = --disk-format qcow2</msg>
<status status="PASS" endtime="20171101 16:03:47.789" starttime="20171101 16:03:47.789"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>--file</arg>
<arg>${remotepathwithimagename}</arg>
</arguments>
<assign>
<var>${str3}</var>
</assign>
<msg timestamp="20171101 16:03:47.789" level="INFO">${str3} = --file /root/auto_heatfiles/nnSCZ739p1-img-vm_kvm.qcow2</msg>
<status status="PASS" endtime="20171101 16:03:47.789" starttime="20171101 16:03:47.789"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>--container-format</arg>
<arg>${ConatinerFormat}</arg>
</arguments>
<assign>
<var>${str4}</var>
</assign>
<msg timestamp="20171101 16:03:47.789" level="INFO">${str4} = --container-format bare</msg>
<status status="PASS" endtime="20171101 16:03:47.789" starttime="20171101 16:03:47.789"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${str1}</arg>
<arg>${str2}</arg>
<arg>${str4}</arg>
<arg>${str3}</arg>
</arguments>
<assign>
<var>${str5}</var>
</assign>
<msg timestamp="20171101 16:03:47.789" level="INFO">${str5} = glance image-create --name oracle1 --disk-format qcow2 --container-format bare --file /root/auto_heatfiles/nnSCZ739p1-img-vm_kvm.qcow2</msg>
<status status="PASS" endtime="20171101 16:03:47.789" starttime="20171101 16:03:47.789"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>20s</arg>
<arg>2</arg>
<arg>write</arg>
<arg>${str5}</arg>
</arguments>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${str5}</arg>
</arguments>
<msg timestamp="20171101 16:03:47.804" level="INFO">glance image-create --name oracle1 --disk-f ormat qcow2 --container-format bare --file /root/auto_heatfiles/nnSCZ739p1-img-v m_kvm.qcow2</msg>
<status status="PASS" endtime="20171101 16:03:47.804" starttime="20171101 16:03:47.789"></status>
</kw>
<status status="PASS" endtime="20171101 16:03:47.804" starttime="20171101 16:03:47.789"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>15</arg>
</arguments>
<msg timestamp="20171101 16:04:02.813" level="INFO">Slept 15 seconds</msg>
<status status="PASS" endtime="20171101 16:04:02.813" starttime="20171101 16:03:47.804"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>******************Create Image on Glance completed*******************</arg>
</arguments>
<msg timestamp="20171101 16:04:02.813" level="INFO">******************Create Image on Glance completed*******************</msg>
<status status="PASS" endtime="20171101 16:04:02.813" starttime="20171101 16:04:02.813"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20171101 16:04:02.813" level="INFO">+------------------+--------------------------------------+
| Property         | Value                                |
+------------------+--------------------------------------+
| checksum         | 9c12c518d6358b2826b30d82597d4feb     |
| container_format | bare                                 |
| created_at       | 2017-11-01T10:32:56Z                 |
| disk_format      | qcow2                                |
| id               | 3582fea4-d691-4d3a-bbe2-d065aa7dc82e |
| min_disk         | 0                                    |
| min_ram          | 0                                    |
| name             | oracle1                              |
| owner            | 8f6857039a224ab1b596bfd42147dc88     |
| protected        | False                                |
| size             | 93847552                             |
| status           | active                               |
| tags             | []                                   |
| updated_at       | 2017-11-01T10:32:57Z                 |
| virtual_size     | None                                 |
| visibility       | private                              |
+------------------+--------------------------------------+
[root@controller ~(keystone_admin)]#</msg>
<msg timestamp="20171101 16:04:02.813" level="INFO">${output} = +------------------+--------------------------------------+
| Property         | Value                                |
+------------------+--------------------------------------+
| checksum       ...</msg>
<status status="PASS" endtime="20171101 16:04:02.813" starttime="20171101 16:04:02.813"></status>
</kw>
<status status="PASS" endtime="20171101 16:04:02.813" starttime="20171101 16:03:47.773"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>**************Image Create Completed ***********</arg>
</arguments>
<msg timestamp="20171101 16:04:02.813" level="INFO">**************Image Create Completed ***********</msg>
<status status="PASS" endtime="20171101 16:04:02.813" starttime="20171101 16:04:02.813"></status>
</kw>
<status status="PASS" endtime="20171101 16:04:02.813" starttime="20171101 16:03:47.773"></status>
</kw>
<kw name="Image_Validation" library="Oracle_SBC_Keywords">
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{Server}</arg>
<arg>ImportDetails</arg>
<arg>C:\\Users\\Admin\\Desktop\\Sukesh-Automation\\RobotFramework\\Genric_Script\\Config\\Enterprise_Config.txt</arg>
<arg>${Label}</arg>
</arguments>
<status status="PASS" endtime="20171101 16:04:02.813" starttime="20171101 16:04:02.813"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Server_Login</arg>
<arg>@{Server}</arg>
</arguments>
<status status="PASS" endtime="20171101 16:04:02.813" starttime="20171101 16:04:02.813"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>*****************************Image Validation Started**********************</arg>
</arguments>
<msg timestamp="20171101 16:04:02.813" level="INFO">*****************************Image Validation Started**********************</msg>
<status status="PASS" endtime="20171101 16:04:02.813" starttime="20171101 16:04:02.813"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>nova image-list |grep \ -i</arg>
<arg>${ImageName}</arg>
</arguments>
<assign>
<var>${str}</var>
</assign>
<msg timestamp="20171101 16:04:02.813" level="INFO">${str} = nova image-list |grep  -i oracle1</msg>
<status status="PASS" endtime="20171101 16:04:02.813" starttime="20171101 16:04:02.813"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>20s</arg>
<arg>2</arg>
<arg>write</arg>
<arg>${str}</arg>
</arguments>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${str}</arg>
</arguments>
<msg timestamp="20171101 16:04:02.813" level="INFO">nova image-list |grep  -i oracle1</msg>
<status status="PASS" endtime="20171101 16:04:02.813" starttime="20171101 16:04:02.813"></status>
</kw>
<status status="PASS" endtime="20171101 16:04:02.813" starttime="20171101 16:04:02.813"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5</arg>
</arguments>
<msg timestamp="20171101 16:04:07.821" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20171101 16:04:07.821" starttime="20171101 16:04:02.813"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20171101 16:04:07.821" level="INFO">| 3582fea4-d691-4d3a-bbe2-d065aa7dc82e | [01;31m[Koracle1[m[K                                         | ACTIVE |                                      |
[root@controller ~(keystone_admin)]#</msg>
<msg timestamp="20171101 16:04:07.821" level="INFO">${output} = | 3582fea4-d691-4d3a-bbe2-d065aa7dc82e | [01;31m[Koracle1[m[K                                         | ACTIVE |                                      |
[root@controller ~(keystone_admin)]# </msg>
<status status="PASS" endtime="20171101 16:04:07.821" starttime="20171101 16:04:07.821"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${ImageName}</arg>
</arguments>
<status status="PASS" endtime="20171101 16:04:07.821" starttime="20171101 16:04:07.821"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>*****************************Image Validation Completed**********************</arg>
</arguments>
<msg timestamp="20171101 16:04:07.821" level="INFO">*****************************Image Validation Completed**********************</msg>
<status status="PASS" endtime="20171101 16:04:07.821" starttime="20171101 16:04:07.821"></status>
</kw>
<status status="PASS" endtime="20171101 16:04:07.821" starttime="20171101 16:04:02.813"></status>
</kw>
<kw name="SBC_OnboardVM" library="Oracle_SBC_Keywords">
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{Server}</arg>
<arg>ImportDetails</arg>
<arg>C:\\Users\\Admin\\Desktop\\Sukesh-Automation\\RobotFramework\\Genric_Script\\Config\\Enterprise_Config.txt</arg>
<arg>${Label}</arg>
</arguments>
<status status="PASS" endtime="20171101 16:04:07.821" starttime="20171101 16:04:07.821"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Server_Login</arg>
<arg>@{Server}</arg>
</arguments>
<status status="PASS" endtime="20171101 16:04:07.821" starttime="20171101 16:04:07.821"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>*************VM Create Started ***********</arg>
</arguments>
<msg timestamp="20171101 16:04:07.821" level="INFO">*************VM Create Started ***********</msg>
<status status="PASS" endtime="20171101 16:04:07.821" starttime="20171101 16:04:07.821"></status>
</kw>
<kw name="VMCreation" library="Genric_Keywords">
<arguments>
<arg>${Label}</arg>
<arg>${NicSBC}</arg>
</arguments>
<kw name="Getimagename" library="Library">
<arguments>
<arg>${ImageFilePath}</arg>
<arg>${ImageFileName}</arg>
</arguments>
<assign>
<var>${remotepathwithimagename}</var>
</assign>
<msg timestamp="20171101 16:04:07.821" level="INFO">${remotepathwithimagename} = /root/auto_heatfiles/nnSCZ739p1-img-vm_kvm.qcow2</msg>
<status status="PASS" endtime="20171101 16:04:07.821" starttime="20171101 16:04:07.821"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>write</arg>
<arg>neutron net-list | head -6 | tail -3 | awk -F "|" '{print $2}' &gt;&gt; nicID.txt</arg>
</arguments>
<status status="PASS" endtime="20171101 16:04:07.821" starttime="20171101 16:04:07.821"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Get File</arg>
<arg>/root/nicID.txt</arg>
<arg>C://Users//Admin//Desktop//Sukesh-Automation//RobotFramework//Genric_Script//Python_Script//</arg>
</arguments>
<status status="PASS" endtime="20171101 16:04:07.821" starttime="20171101 16:04:07.821"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Switch Connection</arg>
<arg>${Index}</arg>
</arguments>
<status status="PASS" endtime="20171101 16:04:07.821" starttime="20171101 16:04:07.821"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{FlvrParam}</arg>
<arg>Parseconfdata</arg>
<arg>${FlavorP}</arg>
<arg>${Label}</arg>
</arguments>
<status status="PASS" endtime="20171101 16:04:07.837" starttime="20171101 16:04:07.821"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${FlavourName}</arg>
<arg>Get From List</arg>
<arg>${FlvrParam}</arg>
<arg>3</arg>
</arguments>
<status status="PASS" endtime="20171101 16:04:07.837" starttime="20171101 16:04:07.837"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>--flavor</arg>
<arg>${FlavourName}</arg>
</arguments>
<assign>
<var>${flavor}</var>
</assign>
<msg timestamp="20171101 16:04:07.837" level="INFO">${flavor} = --flavor Oracle_SBC_Flavour_Template</msg>
<status status="PASS" endtime="20171101 16:04:07.837" starttime="20171101 16:04:07.837"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>--availability_zone</arg>
<arg>${AvZone}</arg>
</arguments>
<assign>
<var>${AvailZone}</var>
</assign>
<msg timestamp="20171101 16:04:07.837" level="INFO">${AvailZone} = --availability_zone nova:compute2</msg>
<status status="PASS" endtime="20171101 16:04:07.837" starttime="20171101 16:04:07.837"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>--security-groups</arg>
<arg>${Security}</arg>
</arguments>
<assign>
<var>${SecurityPol}</var>
</assign>
<msg timestamp="20171101 16:04:07.837" level="INFO">${SecurityPol} = --security-groups perimetaseg</msg>
<status status="PASS" endtime="20171101 16:04:07.837" starttime="20171101 16:04:07.837"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${image}</arg>
<arg>Catenate</arg>
<arg>--image</arg>
<arg>${IN}</arg>
</arguments>
<status status="PASS" endtime="20171101 16:04:07.837" starttime="20171101 16:04:07.837"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>nova boot</arg>
<arg>${flavor}</arg>
<arg>--image</arg>
<arg>${ImageName}</arg>
<arg>${AvailZone}</arg>
<arg>${SecurityPol}</arg>
<arg>${Nic}</arg>
<arg>--config-drive=true</arg>
<arg>${VNFName}</arg>
</arguments>
<assign>
<var>${str}</var>
</assign>
<msg timestamp="20171101 16:04:07.837" level="INFO">${str} = nova boot --flavor Oracle_SBC_Flavour_Template --image oracle1 --availability_zone nova:compute2 --security-groups perimetaseg --nic net-id=3f4a053f-3b05-4388-8e4a-8e47bcd757fb --nic net-id=78d1ec17-3...</msg>
<status status="PASS" endtime="20171101 16:04:07.837" starttime="20171101 16:04:07.837"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5</arg>
</arguments>
<msg timestamp="20171101 16:04:12.844" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20171101 16:04:12.844" starttime="20171101 16:04:07.837"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>20s</arg>
<arg>2</arg>
<arg>write</arg>
<arg>${str}</arg>
</arguments>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${str}</arg>
</arguments>
<msg timestamp="20171101 16:04:12.844" level="INFO">nova boot --flavor Oracle_SBC_Flavour_Templ ate --image oracle1 --availability_zone nova:compute2 --security-groups perimeta seg --nic net-id=3f4a053f-3b05-4388-8e4a-8e47bcd757fb --nic net-id=78d1ec17-397d -455c-9d4d-3e79116d6337 --nic net-id=78d1ec17-397d-455c-9d4d-3e79116d6337 --conf ig-drive=true oracle1</msg>
<status status="PASS" endtime="20171101 16:04:12.844" starttime="20171101 16:04:12.844"></status>
</kw>
<status status="PASS" endtime="20171101 16:04:12.844" starttime="20171101 16:04:12.844"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>40</arg>
</arguments>
<msg timestamp="20171101 16:04:52.845" level="INFO">Slept 40 seconds</msg>
<status status="PASS" endtime="20171101 16:04:52.845" starttime="20171101 16:04:12.844"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20171101 16:04:52.845" level="INFO">+--------------------------------------+--------------------------------------------------------------------+
| Property                             | Value                                                              |
+--------------------------------------+--------------------------------------------------------------------+
| OS-DCF:diskConfig                    | MANUAL                                                             |
| OS-EXT-AZ:availability_zone          | nova                                                               |
| OS-EXT-SRV-ATTR:host                 | -                                                                  |
| OS-EXT-SRV-ATTR:hypervisor_hostname  | -                                                                  |
| OS-EXT-SRV-ATTR:instance_name        | instance-00000b53                                                  |
| OS-EXT-STS:power_state               | 0                                                                  |
| OS-EXT-STS:task_state                | scheduling                                                         |
| OS-EXT-STS:vm_state                  | building                                                           |
| OS-SRV-USG:launched_at               | -                                                                  |
| OS-SRV-USG:terminated_at             | -                                                                  |
| accessIPv4                           |                                                                    |
| accessIPv6                           |                                                                    |
| adminPass                            | yVz55D5ZzBAV                                                       |
| config_drive                         | True                                                               |
| created                              | 2017-11-01T10:33:22Z                                               |
| flavor                               | Oracle_SBC_Flavour_Template (2857ef53-0bc4-42e6-b762-faa67e40cc0e) |
| hostId                               |                                                                    |
| id                                   | b075dcb7-8e8c-4508-b51f-f6e3527896b9                               |
| image                                | oracle1 (3582fea4-d691-4d3a-bbe2-d065aa7dc82e)                     |
| key_name                             | -                                                                  |
| metadata                             | {}                                                                 |
| name                                 | oracle1                                                            |
| os-extended-volumes:volumes_attached | []                                                                 |
| progress                             | 0                                                                  |
| security_groups                      | perimetaseg                                                        |
| status                               | BUILD                                                              |
| tenant_id                            | 8f6857039a224ab1b596bfd42147dc88                                   |
| updated                              | 2017-11-01T10:33:23Z                                               |
| user_id                              | 26917d95d4584829a3db1f86c252a709                                   |
+--------------------------------------+--------------------------------------------------------------------+
[root@controller ~(keystone_admin)]#</msg>
<msg timestamp="20171101 16:04:52.845" level="INFO">${output} = +--------------------------------------+--------------------------------------------------------------------+
| Property                             | Value                                           ...</msg>
<status status="PASS" endtime="20171101 16:04:52.845" starttime="20171101 16:04:52.845"></status>
</kw>
<status status="PASS" endtime="20171101 16:04:52.845" starttime="20171101 16:04:07.821"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>60</arg>
</arguments>
<msg timestamp="20171101 16:05:52.848" level="INFO">Slept 1 minute</msg>
<status status="PASS" endtime="20171101 16:05:52.848" starttime="20171101 16:04:52.845"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>********Reboot Process In Progress Bringing up the VM *************</arg>
</arguments>
<msg timestamp="20171101 16:05:52.848" level="INFO">********Reboot Process In Progress Bringing up the VM *************</msg>
<status status="PASS" endtime="20171101 16:05:52.848" starttime="20171101 16:05:52.848"></status>
</kw>
<kw name="Reboot_loop" library="Oracle_SBC_Keywords">
<kw name="Get_SBC-IP" library="Oracle_SBC_Keywords">
<kw name="ImportDetails" library="Genric_Keywords">
<arguments>
<arg>C:\\Users\\Admin\\Desktop\\Sukesh-Automation\\RobotFramework\\Genric_Script\\Config\\Enterprise_Config.txt</arg>
<arg>${Label}</arg>
</arguments>
<assign>
<var>@{Server}</var>
</assign>
<kw name="Parseconfdata" library="Library">
<arguments>
<arg>${ConfigPath}</arg>
<arg>${Label}</arg>
</arguments>
<assign>
<var>@{Param}</var>
</assign>
<msg timestamp="20171101 16:05:52.848" level="INFO">@{Param} = [ "RedHat" | oracle1 | oracle1 | qcow2 | /root/auto_heatfiles | bare | C:\xampp\htdocs\VNFXchange | nova:compute2 | perimetaseg | TCP | Ingress | ipv4 | Oracle_SBC_Flavour_Template.txt | nnSCZ739p1-im...</msg>
<status status="PASS" endtime="20171101 16:05:52.848" starttime="20171101 16:05:52.848"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${server}</var>
</assign>
<msg timestamp="20171101 16:05:52.848" level="INFO">${server} = "RedHat"</msg>
<status status="PASS" endtime="20171101 16:05:52.848" starttime="20171101 16:05:52.848"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${VNFName}</var>
</assign>
<msg timestamp="20171101 16:05:52.848" level="INFO">${VNFName} = oracle1</msg>
<status status="PASS" endtime="20171101 16:05:52.848" starttime="20171101 16:05:52.848"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>2</arg>
</arguments>
<assign>
<var>${ImageName}</var>
</assign>
<msg timestamp="20171101 16:05:52.848" level="INFO">${ImageName} = oracle1</msg>
<status status="PASS" endtime="20171101 16:05:52.848" starttime="20171101 16:05:52.848"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>3</arg>
</arguments>
<assign>
<var>${DiskFormat}</var>
</assign>
<msg timestamp="20171101 16:05:52.848" level="INFO">${DiskFormat} = qcow2</msg>
<status status="PASS" endtime="20171101 16:05:52.848" starttime="20171101 16:05:52.848"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>4</arg>
</arguments>
<assign>
<var>${ImageFilePath}</var>
</assign>
<msg timestamp="20171101 16:05:52.848" level="INFO">${ImageFilePath} = /root/auto_heatfiles</msg>
<status status="PASS" endtime="20171101 16:05:52.848" starttime="20171101 16:05:52.848"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>5</arg>
</arguments>
<assign>
<var>${ConatinerFormat}</var>
</assign>
<msg timestamp="20171101 16:05:52.864" level="INFO">${ConatinerFormat} = bare</msg>
<status status="PASS" endtime="20171101 16:05:52.864" starttime="20171101 16:05:52.848"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>6</arg>
</arguments>
<assign>
<var>${FlavorP}</var>
</assign>
<msg timestamp="20171101 16:05:52.864" level="INFO">${FlavorP} = C:\xampp\htdocs\VNFXchange</msg>
<status status="PASS" endtime="20171101 16:05:52.864" starttime="20171101 16:05:52.864"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>7</arg>
</arguments>
<assign>
<var>${AvZone}</var>
</assign>
<msg timestamp="20171101 16:05:52.864" level="INFO">${AvZone} = nova:compute2</msg>
<status status="PASS" endtime="20171101 16:05:52.864" starttime="20171101 16:05:52.864"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>8</arg>
</arguments>
<assign>
<var>${Security}</var>
</assign>
<msg timestamp="20171101 16:05:52.864" level="INFO">${Security} = perimetaseg</msg>
<status status="PASS" endtime="20171101 16:05:52.864" starttime="20171101 16:05:52.864"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>9</arg>
</arguments>
<assign>
<var>${Protocol}</var>
</assign>
<msg timestamp="20171101 16:05:52.864" level="INFO">${Protocol} = TCP</msg>
<status status="PASS" endtime="20171101 16:05:52.864" starttime="20171101 16:05:52.864"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>10</arg>
</arguments>
<assign>
<var>${Direction}</var>
</assign>
<msg timestamp="20171101 16:05:52.864" level="INFO">${Direction} = Ingress</msg>
<status status="PASS" endtime="20171101 16:05:52.864" starttime="20171101 16:05:52.864"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>11</arg>
</arguments>
<assign>
<var>${Ethertype}</var>
</assign>
<msg timestamp="20171101 16:05:52.864" level="INFO">${Ethertype} = ipv4</msg>
<status status="PASS" endtime="20171101 16:05:52.864" starttime="20171101 16:05:52.864"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>12</arg>
</arguments>
<assign>
<var>${FN}</var>
</assign>
<msg timestamp="20171101 16:05:52.864" level="INFO">${FN} = Oracle_SBC_Flavour_Template.txt</msg>
<status status="PASS" endtime="20171101 16:05:52.864" starttime="20171101 16:05:52.864"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>13</arg>
</arguments>
<assign>
<var>${ImageFileName}</var>
</assign>
<msg timestamp="20171101 16:05:52.864" level="INFO">${ImageFileName} = nnSCZ739p1-img-vm_kvm.qcow2</msg>
<status status="PASS" endtime="20171101 16:05:52.864" starttime="20171101 16:05:52.864"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${Nic1}</arg>
<arg>Get From List</arg>
<arg>${Param}</arg>
<arg>12</arg>
</arguments>
<status status="PASS" endtime="20171101 16:05:52.864" starttime="20171101 16:05:52.864"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${Nic2}</arg>
<arg>Get From List</arg>
<arg>${Param}</arg>
<arg>13</arg>
</arguments>
<status status="PASS" endtime="20171101 16:05:52.864" starttime="20171101 16:05:52.864"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${Nic3}</arg>
<arg>Get From List</arg>
<arg>${Param}</arg>
<arg>14</arg>
</arguments>
<status status="PASS" endtime="20171101 16:05:52.864" starttime="20171101 16:05:52.864"></status>
</kw>
<kw name="Split Extension" library="OperatingSystem">
<doc>Splits the extension from the given path.</doc>
<arguments>
<arg>${FN}</arg>
</arguments>
<assign>
<var>${FlavourName}</var>
<var>${Ext}</var>
</assign>
<msg timestamp="20171101 16:05:52.880" level="INFO">${FlavourName} = Oracle_SBC_Flavour_Template</msg>
<msg timestamp="20171101 16:05:52.880" level="INFO">${Ext} = txt</msg>
<status status="PASS" endtime="20171101 16:05:52.880" starttime="20171101 16:05:52.864"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${ImageFileName}</arg>
</arguments>
<msg timestamp="20171101 16:05:52.880" level="INFO">${ImageFileName} = nnSCZ739p1-img-vm_kvm.qcow2</msg>
<status status="PASS" endtime="20171101 16:05:52.880" starttime="20171101 16:05:52.880"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${FN}</arg>
</arguments>
<msg timestamp="20171101 16:05:52.880" level="INFO">${FN} = Oracle_SBC_Flavour_Template.txt</msg>
<status status="PASS" endtime="20171101 16:05:52.880" starttime="20171101 16:05:52.880"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${FlavourName}</arg>
</arguments>
<msg timestamp="20171101 16:05:52.880" level="INFO">${FlavourName} = Oracle_SBC_Flavour_Template</msg>
<status status="PASS" endtime="20171101 16:05:52.880" starttime="20171101 16:05:52.880"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${VNFName}</arg>
</arguments>
<msg timestamp="20171101 16:05:52.880" level="INFO">${VNFName} = oracle1</msg>
<status status="PASS" endtime="20171101 16:05:52.880" starttime="20171101 16:05:52.880"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${server}</arg>
</arguments>
<msg timestamp="20171101 16:05:52.880" level="INFO">${server} = "RedHat"</msg>
<status status="PASS" endtime="20171101 16:05:52.880" starttime="20171101 16:05:52.880"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${ImageName}</arg>
</arguments>
<msg timestamp="20171101 16:05:52.880" level="INFO">${ImageName} = oracle1</msg>
<status status="PASS" endtime="20171101 16:05:52.880" starttime="20171101 16:05:52.880"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${DiskFormat}</arg>
</arguments>
<msg timestamp="20171101 16:05:52.880" level="INFO">${DiskFormat} = qcow2</msg>
<status status="PASS" endtime="20171101 16:05:52.880" starttime="20171101 16:05:52.880"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${ImageFilePath}</arg>
</arguments>
<msg timestamp="20171101 16:05:52.880" level="INFO">${ImageFilePath} = /root/auto_heatfiles</msg>
<status status="PASS" endtime="20171101 16:05:52.880" starttime="20171101 16:05:52.880"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${ConatinerFormat}</arg>
</arguments>
<msg timestamp="20171101 16:05:52.880" level="INFO">${ConatinerFormat} = bare</msg>
<status status="PASS" endtime="20171101 16:05:52.880" starttime="20171101 16:05:52.880"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${FlavorP}</arg>
</arguments>
<msg timestamp="20171101 16:05:52.880" level="INFO">${FlavorP} = C:\xampp\htdocs\VNFXchange</msg>
<status status="PASS" endtime="20171101 16:05:52.880" starttime="20171101 16:05:52.880"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AvZone}</arg>
</arguments>
<msg timestamp="20171101 16:05:52.880" level="INFO">${AvZone} = nova:compute2</msg>
<status status="PASS" endtime="20171101 16:05:52.880" starttime="20171101 16:05:52.880"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${Security}</arg>
</arguments>
<msg timestamp="20171101 16:05:52.880" level="INFO">${Security} = perimetaseg</msg>
<status status="PASS" endtime="20171101 16:05:52.880" starttime="20171101 16:05:52.880"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${Protocol}</arg>
</arguments>
<msg timestamp="20171101 16:05:52.880" level="INFO">${Protocol} = TCP</msg>
<status status="PASS" endtime="20171101 16:05:52.880" starttime="20171101 16:05:52.880"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${Direction}</arg>
</arguments>
<msg timestamp="20171101 16:05:52.880" level="INFO">${Direction} = Ingress</msg>
<status status="PASS" endtime="20171101 16:05:52.880" starttime="20171101 16:05:52.880"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${Ethertype}</arg>
</arguments>
<msg timestamp="20171101 16:05:52.880" level="INFO">${Ethertype} = ipv4</msg>
<status status="PASS" endtime="20171101 16:05:52.880" starttime="20171101 16:05:52.880"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Set Global Variable</arg>
<arg>${Nic1}</arg>
</arguments>
<status status="PASS" endtime="20171101 16:05:52.880" starttime="20171101 16:05:52.880"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Set Global Variable</arg>
<arg>${Nic2}</arg>
</arguments>
<status status="PASS" endtime="20171101 16:05:52.880" starttime="20171101 16:05:52.880"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${VNFName}</arg>
</arguments>
<msg timestamp="20171101 16:05:52.880" level="INFO">${VNFName} = oracle1</msg>
<status status="PASS" endtime="20171101 16:05:52.880" starttime="20171101 16:05:52.880"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Set Global Variable</arg>
<arg>${Nic3}</arg>
</arguments>
<status status="PASS" endtime="20171101 16:05:52.880" starttime="20171101 16:05:52.880"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${server}=="RedHat"</arg>
<arg>Return From Keyword</arg>
<arg>@{RedHat}</arg>
</arguments>
<kw name="Return From Keyword" library="BuiltIn">
<doc>Returns from the enclosing user keyword.</doc>
<arguments>
<arg>@{RedHat}</arg>
</arguments>
<msg timestamp="20171101 16:05:52.880" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20171101 16:05:52.880" starttime="20171101 16:05:52.880"></status>
</kw>
<status status="PASS" endtime="20171101 16:05:52.880" starttime="20171101 16:05:52.880"></status>
</kw>
<msg timestamp="20171101 16:05:52.880" level="INFO">@{Server} = [ 10.53.214.10 | root | techm123 ]</msg>
<status status="PASS" endtime="20171101 16:05:52.880" starttime="20171101 16:05:52.848"></status>
</kw>
<kw name="Server_Login" library="Genric_Keywords">
<arguments>
<arg>@{Server}</arg>
</arguments>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Server}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${HOST}</var>
</assign>
<msg timestamp="20171101 16:05:52.895" level="INFO">${HOST} = 10.53.214.10</msg>
<status status="PASS" endtime="20171101 16:05:52.895" starttime="20171101 16:05:52.895"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Server}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${USERNAME}</var>
</assign>
<msg timestamp="20171101 16:05:52.895" level="INFO">${USERNAME} = root</msg>
<status status="PASS" endtime="20171101 16:05:52.895" starttime="20171101 16:05:52.895"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Server}</arg>
<arg>2</arg>
</arguments>
<assign>
<var>${PASSWORD}</var>
</assign>
<msg timestamp="20171101 16:05:52.895" level="INFO">${PASSWORD} = techm123</msg>
<status status="PASS" endtime="20171101 16:05:52.895" starttime="20171101 16:05:52.895"></status>
</kw>
<kw type="for" name="${i} IN RANGE [ 0 | 4 ]">
<kw type="foritem" name="${i} = 0">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<assign>
<var>${Index}</var>
</assign>
<msg timestamp="20171101 16:05:52.895" level="INFO">${Index} = 2</msg>
<status status="PASS" endtime="20171101 16:05:52.895" starttime="20171101 16:05:52.895"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Login</arg>
<arg>${USERNAME}</arg>
<arg>${PASSWORD}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PASSWORD}</arg>
</arguments>
<msg timestamp="20171101 16:05:52.895" level="INFO">Logging into '10.53.214.10:22' as 'root'.</msg>
<msg timestamp="20171101 16:05:59.026" level="INFO">Read output: Last login: Wed Nov  1 06:32:35 2017 from 10.53.172.4
[root@controller ~]#</msg>
<status status="PASS" endtime="20171101 16:05:59.026" starttime="20171101 16:05:52.895"></status>
</kw>
<msg timestamp="20171101 16:05:59.026" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20171101 16:05:59.026" starttime="20171101 16:05:52.895"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20171101 16:05:59.026" starttime="20171101 16:05:59.026"></status>
</kw>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20171101 16:05:59.026" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20171101 16:05:59.026" starttime="20171101 16:05:59.026"></status>
</kw>
<status status="PASS" endtime="20171101 16:05:59.026" starttime="20171101 16:05:52.895"></status>
</kw>
<status status="PASS" endtime="20171101 16:05:59.026" starttime="20171101 16:05:52.895"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>*****************ServerLogin_Validation**********************</arg>
</arguments>
<msg timestamp="20171101 16:05:59.026" level="INFO">*****************ServerLogin_Validation**********************</msg>
<status status="PASS" endtime="20171101 16:05:59.026" starttime="20171101 16:05:59.026"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>20s</arg>
<arg>2</arg>
<arg>write</arg>
<arg>ifconfig | grep inet</arg>
</arguments>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>ifconfig | grep inet</arg>
</arguments>
<msg timestamp="20171101 16:05:59.026" level="INFO">ifconfig | grep inet</msg>
<status status="PASS" endtime="20171101 16:05:59.026" starttime="20171101 16:05:59.026"></status>
</kw>
<status status="PASS" endtime="20171101 16:05:59.026" starttime="20171101 16:05:59.026"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>4</arg>
</arguments>
<msg timestamp="20171101 16:06:03.036" level="INFO">Slept 4 seconds</msg>
<status status="PASS" endtime="20171101 16:06:03.036" starttime="20171101 16:05:59.026"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20171101 16:06:03.036" level="INFO">[01;31m[Kinet[m[K 169.254.1.8  netmask 255.255.255.0  broadcast 169.254.1.255
        [01;31m[Kinet[m[K6 fe80::cca5:25ff:fe65:134b  prefixlen 64  scopeid 0x20&lt;link&gt;
        [01;31m[Kinet[m[K 172.18.0.60  netmask 255.255.255.0  broadcast 172.18.0.255
        [01;31m[Kinet[m[K6 fe80::4d7:59ff:fe85:5f45  prefixlen 64  scopeid 0x20&lt;link&gt;
        [01;31m[Kinet[m[K 10.80.1.8  netmask 255.255.255.0  broadcast 10.80.1.255
        [01;31m[Kinet[m[K6 fe80::fc8a:54ff:fe8a:974e  prefixlen 64  scopeid 0x20&lt;link&gt;
        [01;31m[Kinet[m[K 10.81.1.8  netmask 255.255.255.0  broadcast 10.81.1.255
        [01;31m[Kinet[m[K6 fe80::283b:ecff:fee2:1e40  prefixlen 64  scopeid 0x20&lt;link&gt;
        [01;31m[Kinet[m[K6 fe80::eef4:bbff:fedb:a3c8  prefixlen 64  scopeid 0x20&lt;link&gt;
        [01;31m[Kinet[m[K 168.254.17.8  netmask 255.255.255.0  broadcast 168.254.17.255
        [01;31m[Kinet[m[K6 fe80::eef4:bbff:fedb:a3ca  prefixlen 64  scopeid 0x20&lt;link&gt;
        [01;31m[Kinet[m[K 10.53.214.10  netmask 255.255.255.0  broadcast 10.53.214.255
        [01;31m[Kinet[m[K6 fe80::eef4:bbff:fedb:a3cc  prefixlen 64  scopeid 0x20&lt;link&gt;
        [01;31m[Kinet[m[K6 fe80::eef4:bbff:fedb:a3cd  prefixlen 64  scopeid 0x20&lt;link&gt;
        [01;31m[Kinet[m[K 127.0.0.1  netmask 255.0.0.0
        [01;31m[Kinet[m[K6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;
        [01;31m[Kinet[m[K6 fe80::a236:9fff:fe78:4b14  prefixlen 64  scopeid 0x20&lt;link&gt;
        [01;31m[Kinet[m[K6 fe80::a236:9fff:fe78:4b16  prefixlen 64  scopeid 0x20&lt;link&gt;
        [01;31m[Kinet[m[K 192.168.122.1  netmask 255.255.255.0  broadcast 192.168.122.255
[root@controller ~]#</msg>
<msg timestamp="20171101 16:06:03.036" level="INFO">${output} =         [01;31m[Kinet[m[K 169.254.1.8  netmask 255.255.255.0  broadcast 169.254.1.255
        [01;31m[Kinet[m[K6 fe80::cca5:25ff:fe65:134b  prefixlen 64  scopeid 0x20&lt;link&gt;
        [01;31m...</msg>
<status status="PASS" endtime="20171101 16:06:03.036" starttime="20171101 16:06:03.036"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20171101 16:06:03.036" starttime="20171101 16:06:03.036"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>*****************ServerLogin_Validation Completed**********************</arg>
</arguments>
<msg timestamp="20171101 16:06:03.036" level="INFO">*****************ServerLogin_Validation Completed**********************</msg>
<status status="PASS" endtime="20171101 16:06:03.036" starttime="20171101 16:06:03.036"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>20s</arg>
<arg>2</arg>
<arg>write</arg>
<arg>source keystonerc_admin</arg>
</arguments>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>source keystonerc_admin</arg>
</arguments>
<msg timestamp="20171101 16:06:03.036" level="INFO">source keystonerc_admin</msg>
<status status="PASS" endtime="20171101 16:06:03.036" starttime="20171101 16:06:03.036"></status>
</kw>
<status status="PASS" endtime="20171101 16:06:03.036" starttime="20171101 16:06:03.036"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20171101 16:06:03.036" level="INFO">[root@controller ~(keystone_admin)]#</msg>
<msg timestamp="20171101 16:06:03.036" level="INFO">${output} = [root@controller ~(keystone_admin)]# </msg>
<status status="PASS" endtime="20171101 16:06:03.036" starttime="20171101 16:06:03.036"></status>
</kw>
<status status="PASS" endtime="20171101 16:06:03.036" starttime="20171101 16:05:52.880"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>rm -rf value.txt</arg>
</arguments>
<msg timestamp="20171101 16:06:03.052" level="INFO">rm -rf value.txt</msg>
<status status="PASS" endtime="20171101 16:06:03.052" starttime="20171101 16:06:03.036"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>nova list | grep -i ${VNFName}|awk -F "=" '{print $2}'|awk -F "," '{print $2}'|awk -F ";" '{print $1}'</arg>
</arguments>
<msg timestamp="20171101 16:06:03.052" level="INFO">[root@controller ~(keystone_admin)]# nova list | grep -i oracle1|awk -F "=" '{pr int $2}'|awk -F "," '{print $2}'|awk -F ";" '{print $1}'</msg>
<status status="PASS" endtime="20171101 16:06:03.052" starttime="20171101 16:06:03.052"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>4</arg>
</arguments>
<msg timestamp="20171101 16:06:07.062" level="INFO">Slept 4 seconds</msg>
<status status="PASS" endtime="20171101 16:06:07.062" starttime="20171101 16:06:03.052"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20171101 16:06:07.062" level="INFO">10.80.1.152
[root@controller ~(keystone_admin)]#</msg>
<msg timestamp="20171101 16:06:07.062" level="INFO">${output} =  10.80.1.152
[root@controller ~(keystone_admin)]# </msg>
<status status="PASS" endtime="20171101 16:06:07.062" starttime="20171101 16:06:07.062"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20171101 16:06:07.062" level="INFO">${output} = [u'10.80.1.152', u'[root@controller', u'~(keystone_admin)]#']</msg>
<status status="PASS" endtime="20171101 16:06:07.062" starttime="20171101 16:06:07.062"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${output}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${Proxy_IP}</var>
</assign>
<msg timestamp="20171101 16:06:07.062" level="INFO">${Proxy_IP} = 10.80.1.152</msg>
<status status="PASS" endtime="20171101 16:06:07.062" starttime="20171101 16:06:07.062"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${Proxy_IP}</arg>
</arguments>
<msg timestamp="20171101 16:06:07.062" level="INFO">${Proxy_IP} = 10.80.1.152</msg>
<status status="PASS" endtime="20171101 16:06:07.062" starttime="20171101 16:06:07.062"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>nova list | grep -i ${VNFName}| awk -F ";" '{print $2}' | awk -F "=" '{print $2}'| awk -F " \ " '{print $1}'</arg>
</arguments>
<msg timestamp="20171101 16:06:07.062" level="INFO">nova list | grep -i oracle1| awk -F ";" '{p rint $2}' | awk -F "=" '{print $2}'| awk -F "  " '{print $1}'</msg>
<status status="PASS" endtime="20171101 16:06:07.062" starttime="20171101 16:06:07.062"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5</arg>
</arguments>
<msg timestamp="20171101 16:06:12.085" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20171101 16:06:12.085" starttime="20171101 16:06:07.062"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20171101 16:06:12.085" level="INFO">172.18.0.174
[root@controller ~(keystone_admin)]#</msg>
<msg timestamp="20171101 16:06:12.085" level="INFO">${output} = 172.18.0.174
[root@controller ~(keystone_admin)]# </msg>
<status status="PASS" endtime="20171101 16:06:12.085" starttime="20171101 16:06:12.085"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20171101 16:06:12.085" level="INFO">${output} = [u'172.18.0.174', u'[root@controller', u'~(keystone_admin)]#']</msg>
<status status="PASS" endtime="20171101 16:06:12.085" starttime="20171101 16:06:12.085"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${output}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${MGmt_IP}</var>
</assign>
<msg timestamp="20171101 16:06:12.085" level="INFO">${MGmt_IP} = 172.18.0.174</msg>
<status status="PASS" endtime="20171101 16:06:12.085" starttime="20171101 16:06:12.085"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${MGmt_IP}</arg>
</arguments>
<msg timestamp="20171101 16:06:12.085" level="INFO">${MGmt_IP} = 172.18.0.174</msg>
<status status="PASS" endtime="20171101 16:06:12.085" starttime="20171101 16:06:12.085"></status>
</kw>
<status status="PASS" endtime="20171101 16:06:12.085" starttime="20171101 16:05:52.848"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>3</arg>
</arguments>
<msg timestamp="20171101 16:06:15.097" level="INFO">Slept 3 seconds</msg>
<status status="PASS" endtime="20171101 16:06:15.097" starttime="20171101 16:06:12.085"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>clear</arg>
</arguments>
<msg timestamp="20171101 16:06:15.097" level="INFO">clear</msg>
<status status="PASS" endtime="20171101 16:06:15.097" starttime="20171101 16:06:15.097"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>0</arg>
</arguments>
<assign>
<var>${i}</var>
</assign>
<msg timestamp="20171101 16:06:15.097" level="INFO">${i} = 0</msg>
<status status="PASS" endtime="20171101 16:06:15.097" starttime="20171101 16:06:15.097"></status>
</kw>
<kw type="for" name="${i} IN RANGE [ 0 | 200 ]">
<kw type="foritem" name="${i} = 0">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ping</arg>
<arg>-c 1</arg>
<arg>${MGmt_IP}</arg>
</arguments>
<assign>
<var>${store}</var>
</assign>
<msg timestamp="20171101 16:06:15.097" level="INFO">${store} = ping -c 1 172.18.0.174</msg>
<status status="PASS" endtime="20171101 16:06:15.097" starttime="20171101 16:06:15.097"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${store}</arg>
</arguments>
<msg timestamp="20171101 16:06:15.097" level="INFO">[H[J[root@controller ~(keystone_admin)]# ping -c 1 172.18.0.174</msg>
<status status="PASS" endtime="20171101 16:06:15.097" starttime="20171101 16:06:15.097"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5</arg>
</arguments>
<msg timestamp="20171101 16:06:20.121" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20171101 16:06:20.121" starttime="20171101 16:06:15.097"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${Output}</var>
</assign>
<msg timestamp="20171101 16:06:20.121" level="INFO">PING 172.18.0.174 (172.18.0.174) 56(84) bytes of data.
64 bytes from 172.18.0.174: icmp_seq=1 ttl=64 time=1.96 ms

--- 172.18.0.174 ping statistics ---
1 packets transmitted, 1 received, 0% packet loss, time 0ms
rtt min/avg/max/mdev = 1.968/1.968/1.968/0.000 ms
[root@controller ~(keystone_admin)]#</msg>
<msg timestamp="20171101 16:06:20.121" level="INFO">${Output} = PING 172.18.0.174 (172.18.0.174) 56(84) bytes of data.
64 bytes from 172.18.0.174: icmp_seq=1 ttl=64 time=1.96 ms

--- 172.18.0.174 ping statistics ---
1 packets transmitted, 1 received, 0% packet...</msg>
<status status="PASS" endtime="20171101 16:06:20.121" starttime="20171101 16:06:20.121"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${Output}</arg>
<arg>ttl=64</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${Output}</arg>
<arg>ttl=64</arg>
</arguments>
<status status="PASS" endtime="20171101 16:06:20.121" starttime="20171101 16:06:20.121"></status>
</kw>
<msg timestamp="20171101 16:06:20.121" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20171101 16:06:20.121" starttime="20171101 16:06:20.121"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20171101 16:06:20.121" starttime="20171101 16:06:20.121"></status>
</kw>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20171101 16:06:20.121" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20171101 16:06:20.121" starttime="20171101 16:06:20.121"></status>
</kw>
<status status="PASS" endtime="20171101 16:06:20.121" starttime="20171101 16:06:15.097"></status>
</kw>
<status status="PASS" endtime="20171101 16:06:20.121" starttime="20171101 16:06:15.097"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Reboot Completed,Server is UP...............!</arg>
</arguments>
<msg timestamp="20171101 16:06:20.121" level="INFO">Reboot Completed,Server is UP...............!</msg>
<status status="PASS" endtime="20171101 16:06:20.121" starttime="20171101 16:06:20.121"></status>
</kw>
<status status="PASS" endtime="20171101 16:06:20.121" starttime="20171101 16:05:52.848"></status>
</kw>
<kw name="known_hostremoval" library="Genric_Keywords">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>rm /root/.ssh/known_hosts</arg>
</arguments>
<msg timestamp="20171101 16:06:20.121" level="INFO">rm /root/.ssh/known_hosts</msg>
<status status="PASS" endtime="20171101 16:06:20.121" starttime="20171101 16:06:20.121"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5</arg>
</arguments>
<msg timestamp="20171101 16:06:25.129" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20171101 16:06:25.129" starttime="20171101 16:06:20.121"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>yes</arg>
</arguments>
<msg timestamp="20171101 16:06:25.129" level="INFO">rm: remove regular file ‘/root/.ssh/known_hosts’? yes</msg>
<status status="PASS" endtime="20171101 16:06:25.129" starttime="20171101 16:06:25.129"></status>
</kw>
<status status="PASS" endtime="20171101 16:06:25.129" starttime="20171101 16:06:20.121"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>*************VM Create Completed ***********</arg>
</arguments>
<msg timestamp="20171101 16:06:25.129" level="INFO">*************VM Create Completed ***********</msg>
<status status="PASS" endtime="20171101 16:06:25.129" starttime="20171101 16:06:25.129"></status>
</kw>
<status status="PASS" endtime="20171101 16:06:25.129" starttime="20171101 16:04:07.821"></status>
</kw>
<kw name="Onboard_Validation" library="Oracle_SBC_Keywords">
<arguments>
<arg>${Index}</arg>
</arguments>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{Server}</arg>
<arg>ImportDetails</arg>
<arg>C:\\Users\\Admin\\Desktop\\Sukesh-Automation\\RobotFramework\\Genric_Script\\Config\\Enterprise_Config.txt</arg>
<arg>${Label}</arg>
</arguments>
<status status="PASS" endtime="20171101 16:06:25.129" starttime="20171101 16:06:25.129"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Server_Login</arg>
<arg>@{Server}</arg>
</arguments>
<status status="PASS" endtime="20171101 16:06:25.129" starttime="20171101 16:06:25.129"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${Index}</arg>
</arguments>
<status status="PASS" endtime="20171101 16:06:25.129" starttime="20171101 16:06:25.129"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>***************************** Onboard Validation Started**********************</arg>
</arguments>
<msg timestamp="20171101 16:06:25.129" level="INFO">***************************** Onboard Validation Started**********************</msg>
<status status="PASS" endtime="20171101 16:06:25.129" starttime="20171101 16:06:25.129"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>nova list |grep -i</arg>
<arg>${VNFName}</arg>
</arguments>
<assign>
<var>${str}</var>
</assign>
<msg timestamp="20171101 16:06:25.129" level="INFO">${str} = nova list |grep -i oracle1</msg>
<status status="PASS" endtime="20171101 16:06:25.129" starttime="20171101 16:06:25.129"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>20s</arg>
<arg>2</arg>
<arg>write</arg>
<arg>${str}</arg>
</arguments>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${str}</arg>
</arguments>
<msg timestamp="20171101 16:06:25.145" level="INFO">nova list |grep -i oracle1</msg>
<status status="PASS" endtime="20171101 16:06:25.145" starttime="20171101 16:06:25.145"></status>
</kw>
<status status="PASS" endtime="20171101 16:06:25.145" starttime="20171101 16:06:25.129"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5</arg>
</arguments>
<msg timestamp="20171101 16:06:30.152" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20171101 16:06:30.152" starttime="20171101 16:06:25.145"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20171101 16:06:30.152" level="INFO">| b075dcb7-8e8c-4508-b51f-f6e3527896b9 | [01;31m[Koracle1[m[K                  | ACTIVE    | -          | Running     | NS1-PF=10.80.1.150, 10.80.1.152; AN-MGMT=172.18.0.174                                                    |
[root@controller ~(keystone_admin)]#</msg>
<msg timestamp="20171101 16:06:30.152" level="INFO">${output} = | b075dcb7-8e8c-4508-b51f-f6e3527896b9 | [01;31m[Koracle1[m[K                  | ACTIVE    | -          | Running     | NS1-PF=10.80.1.150, 10.80.1.152; AN-MGMT=172.18.0.174                       ...</msg>
<status status="PASS" endtime="20171101 16:06:30.152" starttime="20171101 16:06:30.152"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${VNFName}</arg>
</arguments>
<status status="PASS" endtime="20171101 16:06:30.152" starttime="20171101 16:06:30.152"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>***************************** Onboard Validation Completed**********************</arg>
</arguments>
<msg timestamp="20171101 16:06:30.152" level="INFO">***************************** Onboard Validation Completed**********************</msg>
<status status="PASS" endtime="20171101 16:06:30.152" starttime="20171101 16:06:30.152"></status>
</kw>
<status status="PASS" endtime="20171101 16:06:30.152" starttime="20171101 16:06:25.129"></status>
</kw>
<kw name="AvailabilityZone_Validation" library="Oracle_SBC_Keywords">
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{Server}</arg>
<arg>ImportDetails</arg>
<arg>C:\\Users\\Admin\\Desktop\\Sukesh-Automation\\RobotFramework\\Genric_Script\\Config\\Enterprise_Config.txt</arg>
<arg>${Label}</arg>
</arguments>
<status status="PASS" endtime="20171101 16:06:30.152" starttime="20171101 16:06:30.152"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Server_Login</arg>
<arg>@{Server}</arg>
</arguments>
<status status="PASS" endtime="20171101 16:06:30.152" starttime="20171101 16:06:30.152"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>nova show \ ${VNFName} | egrep -i 'OS-EXT-AZ:availability_zone|OS-EXT-SRV-ATTR:host' | awk -F "|" '{ print $3}'</arg>
</arguments>
<msg timestamp="20171101 16:06:30.168" level="INFO">nova show  oracle1 | egrep -i 'OS-EXT-AZ:av ailability_zone|OS-EXT-SRV-ATTR:host' | awk -F "|" '{ print $3}'</msg>
<status status="PASS" endtime="20171101 16:06:30.168" starttime="20171101 16:06:30.152"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>3</arg>
</arguments>
<msg timestamp="20171101 16:06:33.180" level="INFO">Slept 3 seconds</msg>
<status status="PASS" endtime="20171101 16:06:33.180" starttime="20171101 16:06:30.168"></status>
</kw>
<kw name="Split String From Right" library="String">
<doc>Splits the ``string`` using ``separator`` starting from right.</doc>
<arguments>
<arg>${AvZone}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>@{list}</var>
</assign>
<msg timestamp="20171101 16:06:33.180" level="INFO">@{list} = [ nova | compute2 ]</msg>
<status status="PASS" endtime="20171101 16:06:33.180" starttime="20171101 16:06:33.180"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${Zone}</var>
</assign>
<msg timestamp="20171101 16:06:33.180" level="INFO">${Zone} = compute2</msg>
<status status="PASS" endtime="20171101 16:06:33.180" starttime="20171101 16:06:33.180"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20171101 16:06:33.180" level="INFO">zone-vims-2                                                        
 compute2                                                           
[root@controller ~(keystone_admin)]#</msg>
<msg timestamp="20171101 16:06:33.180" level="INFO">${output} =  zone-vims-2                                                        
 compute2                                                           
[root@controller ~(keystone_admin)]# </msg>
<status status="PASS" endtime="20171101 16:06:33.180" starttime="20171101 16:06:33.180"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${Zone}</arg>
</arguments>
<status status="PASS" endtime="20171101 16:06:33.180" starttime="20171101 16:06:33.180"></status>
</kw>
<status status="PASS" endtime="20171101 16:06:33.180" starttime="20171101 16:06:30.152"></status>
</kw>
<kw name="Networks_Validation" library="Oracle_SBC_Keywords">
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{Server}</arg>
<arg>ImportDetails</arg>
<arg>C:\\Users\\Admin\\Desktop\\Sukesh-Automation\\RobotFramework\\Genric_Script\\Config\\Enterprise_Config.txt</arg>
<arg>${Label}</arg>
</arguments>
<status status="PASS" endtime="20171101 16:06:33.180" starttime="20171101 16:06:33.180"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Server_Login</arg>
<arg>@{Server}</arg>
</arguments>
<status status="PASS" endtime="20171101 16:06:33.180" starttime="20171101 16:06:33.180"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>nova list | grep -i ${VNFName}| awk -F ";" '{print $2}' | awk -F "=" '{print $2}'| awk -F " \ " '{print $1}'</arg>
</arguments>
<msg timestamp="20171101 16:06:33.195" level="INFO">nova list | grep -i oracle1| awk -F ";" '{p rint $2}' | awk -F "=" '{print $2}'| awk -F "  " '{print $1}'</msg>
<status status="PASS" endtime="20171101 16:06:33.195" starttime="20171101 16:06:33.180"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5</arg>
</arguments>
<msg timestamp="20171101 16:06:38.203" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20171101 16:06:38.203" starttime="20171101 16:06:33.195"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20171101 16:06:38.203" level="INFO">172.18.0.174
[root@controller ~(keystone_admin)]#</msg>
<msg timestamp="20171101 16:06:38.203" level="INFO">${output} = 172.18.0.174
[root@controller ~(keystone_admin)]# </msg>
<status status="PASS" endtime="20171101 16:06:38.203" starttime="20171101 16:06:38.203"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20171101 16:06:38.203" level="INFO">${output} = [u'172.18.0.174', u'[root@controller', u'~(keystone_admin)]#']</msg>
<status status="PASS" endtime="20171101 16:06:38.203" starttime="20171101 16:06:38.203"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${output}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${MGmt_IP}</var>
</assign>
<msg timestamp="20171101 16:06:38.203" level="INFO">${MGmt_IP} = 172.18.0.174</msg>
<status status="PASS" endtime="20171101 16:06:38.203" starttime="20171101 16:06:38.203"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>nova show ${VNFName}| grep network</arg>
</arguments>
<msg timestamp="20171101 16:06:38.203" level="INFO">nova show oracle1| grep network</msg>
<status status="PASS" endtime="20171101 16:06:38.203" starttime="20171101 16:06:38.203"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>14</arg>
</arguments>
<msg timestamp="20171101 16:06:52.212" level="INFO">Slept 14 seconds</msg>
<status status="PASS" endtime="20171101 16:06:52.212" starttime="20171101 16:06:38.203"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20171101 16:06:52.212" level="INFO">| AN-MGMT [01;31m[Knetwork[m[K                      | 172.18.0.174                                                       |
| NS1-PF [01;31m[Knetwork[m[K                       | 10.80.1.150, 10.80.1.152                                           |
[root@controller ~(keystone_admin)]#</msg>
<msg timestamp="20171101 16:06:52.212" level="INFO">${output} = | AN-MGMT [01;31m[Knetwork[m[K                      | 172.18.0.174                                                       |
| NS1-PF [01;31m[Knetwork[m[K                       | 10.80.1.150, 1...</msg>
<status status="PASS" endtime="20171101 16:06:52.212" starttime="20171101 16:06:52.212"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>AN-MGMT</arg>
<arg>${MGmt_IP}</arg>
</arguments>
<status status="PASS" endtime="20171101 16:06:52.212" starttime="20171101 16:06:52.212"></status>
</kw>
<status status="PASS" endtime="20171101 16:06:52.212" starttime="20171101 16:06:33.180"></status>
</kw>
<kw name="SBC Configuration" library="Oracle_SBC_Keywords">
<kw name="SBC_PortUpdation" library="Oracle_SBC_Keywords">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>****************Port UpdationStart************</arg>
</arguments>
<msg timestamp="20171101 16:06:52.212" level="INFO">****************Port UpdationStart************</msg>
<status status="PASS" endtime="20171101 16:06:52.212" starttime="20171101 16:06:52.212"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{Server}</arg>
<arg>ImportDetails</arg>
<arg>C:\\Users\\Admin\\Desktop\\Sukesh-Automation\\RobotFramework\\Genric_Script\\Config\\Enterprise_Config.txt</arg>
<arg>${Label}</arg>
</arguments>
<status status="PASS" endtime="20171101 16:06:52.212" starttime="20171101 16:06:52.212"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Server_Login</arg>
<arg>@{Server}</arg>
</arguments>
<status status="PASS" endtime="20171101 16:06:52.212" starttime="20171101 16:06:52.212"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>rm -rf value.txt</arg>
</arguments>
<msg timestamp="20171101 16:06:52.212" level="INFO">rm -rf value.txt</msg>
<status status="PASS" endtime="20171101 16:06:52.212" starttime="20171101 16:06:52.212"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>nova list | grep -i ${VNFName}|awk -F "=" '{print $2}'|awk -F "," '{print $1}'</arg>
</arguments>
<msg timestamp="20171101 16:06:52.227" level="INFO">[root@controller ~(keystone_admin)]# nova list | grep -i oracle1|awk -F "=" '{pr int $2}'|awk -F "," '{print $1}'</msg>
<status status="PASS" endtime="20171101 16:06:52.227" starttime="20171101 16:06:52.212"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>4</arg>
</arguments>
<msg timestamp="20171101 16:06:56.236" level="INFO">Slept 4 seconds</msg>
<status status="PASS" endtime="20171101 16:06:56.236" starttime="20171101 16:06:52.227"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20171101 16:06:56.236" level="INFO">10.80.1.150
[root@controller ~(keystone_admin)]#</msg>
<msg timestamp="20171101 16:06:56.236" level="INFO">${output} = 10.80.1.150
[root@controller ~(keystone_admin)]# </msg>
<status status="PASS" endtime="20171101 16:06:56.236" starttime="20171101 16:06:56.236"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20171101 16:06:56.236" level="INFO">${output} = [u'10.80.1.150', u'[root@controller', u'~(keystone_admin)]#']</msg>
<status status="PASS" endtime="20171101 16:06:56.236" starttime="20171101 16:06:56.236"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${output}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${IP1}</var>
</assign>
<msg timestamp="20171101 16:06:56.236" level="INFO">${IP1} = 10.80.1.150</msg>
<status status="PASS" endtime="20171101 16:06:56.236" starttime="20171101 16:06:56.236"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${IP1}</arg>
</arguments>
<msg timestamp="20171101 16:06:56.236" level="INFO">${IP1} = 10.80.1.150</msg>
<status status="PASS" endtime="20171101 16:06:56.236" starttime="20171101 16:06:56.236"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>clear</arg>
</arguments>
<msg timestamp="20171101 16:06:56.236" level="INFO">clear</msg>
<status status="PASS" endtime="20171101 16:06:56.236" starttime="20171101 16:06:56.236"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>nova list | grep -i ${VNFName}|awk -F "=" '{print $2}'|awk -F "," '{print $2}'|awk -F ";" '{print $1}'</arg>
</arguments>
<msg timestamp="20171101 16:06:56.252" level="INFO">[H[J[root@controller ~(keystone_admin)]# nova list | grep -i oracle1|awk -F "=" '{pr int $2}'|awk -F "," '{print $2}'|awk -F ";" '{print $1}'</msg>
<status status="PASS" endtime="20171101 16:06:56.252" starttime="20171101 16:06:56.236"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>4</arg>
</arguments>
<msg timestamp="20171101 16:07:00.261" level="INFO">Slept 4 seconds</msg>
<status status="PASS" endtime="20171101 16:07:00.261" starttime="20171101 16:06:56.252"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20171101 16:07:00.261" level="INFO">10.80.1.152
[root@controller ~(keystone_admin)]#</msg>
<msg timestamp="20171101 16:07:00.261" level="INFO">${output} =  10.80.1.152
[root@controller ~(keystone_admin)]# </msg>
<status status="PASS" endtime="20171101 16:07:00.261" starttime="20171101 16:07:00.261"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20171101 16:07:00.261" level="INFO">${output} = [u'10.80.1.152', u'[root@controller', u'~(keystone_admin)]#']</msg>
<status status="PASS" endtime="20171101 16:07:00.261" starttime="20171101 16:07:00.261"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${output}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${IP2}</var>
</assign>
<msg timestamp="20171101 16:07:00.261" level="INFO">${IP2} = 10.80.1.152</msg>
<status status="PASS" endtime="20171101 16:07:00.261" starttime="20171101 16:07:00.261"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${IP2}</arg>
</arguments>
<msg timestamp="20171101 16:07:00.261" level="INFO">${IP2} = 10.80.1.152</msg>
<status status="PASS" endtime="20171101 16:07:00.261" starttime="20171101 16:07:00.261"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>clear</arg>
</arguments>
<msg timestamp="20171101 16:07:00.261" level="INFO">clear</msg>
<status status="PASS" endtime="20171101 16:07:00.261" starttime="20171101 16:07:00.261"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>nova list | grep -i ${VNFName}| awk -F ";" '{print $2}' | awk -F "=" '{print $2}'| awk -F " \ " '{print $1}'</arg>
</arguments>
<msg timestamp="20171101 16:07:00.277" level="INFO">[H[J[root@controller ~(keystone_admin)]# nova list | grep -i oracle1| awk -F ";" '{p rint $2}' | awk -F "=" '{print $2}'| awk -F "  " '{print $1}'</msg>
<status status="PASS" endtime="20171101 16:07:00.277" starttime="20171101 16:07:00.261"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5</arg>
</arguments>
<msg timestamp="20171101 16:07:05.285" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20171101 16:07:05.285" starttime="20171101 16:07:00.277"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20171101 16:07:05.285" level="INFO">172.18.0.174
[root@controller ~(keystone_admin)]#</msg>
<msg timestamp="20171101 16:07:05.285" level="INFO">${output} = 172.18.0.174
[root@controller ~(keystone_admin)]# </msg>
<status status="PASS" endtime="20171101 16:07:05.285" starttime="20171101 16:07:05.285"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20171101 16:07:05.285" level="INFO">${output} = [u'172.18.0.174', u'[root@controller', u'~(keystone_admin)]#']</msg>
<status status="PASS" endtime="20171101 16:07:05.285" starttime="20171101 16:07:05.285"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${output}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${MGmt_IP}</var>
</assign>
<msg timestamp="20171101 16:07:05.285" level="INFO">${MGmt_IP} = 172.18.0.174</msg>
<status status="PASS" endtime="20171101 16:07:05.285" starttime="20171101 16:07:05.285"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${MGmt_IP}</arg>
</arguments>
<msg timestamp="20171101 16:07:05.285" level="INFO">${MGmt_IP} = 172.18.0.174</msg>
<status status="PASS" endtime="20171101 16:07:05.285" starttime="20171101 16:07:05.285"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>clear</arg>
</arguments>
<msg timestamp="20171101 16:07:05.285" level="INFO">clear</msg>
<status status="PASS" endtime="20171101 16:07:05.285" starttime="20171101 16:07:05.285"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>neutron port-list | grep -i ${IP1} |awk -F "|" '{print $2}'</arg>
</arguments>
<msg timestamp="20171101 16:07:05.285" level="INFO">[H[J[root@controller ~(keystone_admin)]# neutron port-list | grep -i 10.80.1.150 |aw k -F "|" '{print $2}'</msg>
<status status="PASS" endtime="20171101 16:07:05.285" starttime="20171101 16:07:05.285"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>3</arg>
</arguments>
<msg timestamp="20171101 16:07:08.296" level="INFO">Slept 3 seconds</msg>
<status status="PASS" endtime="20171101 16:07:08.296" starttime="20171101 16:07:05.285"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20171101 16:07:08.296" level="INFO">b1ce937d-6c58-4c2f-aea8-6f00d1da2e2f 
[root@controller ~(keystone_admin)]#</msg>
<msg timestamp="20171101 16:07:08.296" level="INFO">${output} =  b1ce937d-6c58-4c2f-aea8-6f00d1da2e2f 
[root@controller ~(keystone_admin)]# </msg>
<status status="PASS" endtime="20171101 16:07:08.296" starttime="20171101 16:07:08.296"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>@{output}</var>
</assign>
<msg timestamp="20171101 16:07:08.296" level="INFO">@{output} = [ b1ce937d-6c58-4c2f-aea8-6f00d1da2e2f | [root@controller | ~(keystone_admin)]# ]</msg>
<status status="PASS" endtime="20171101 16:07:08.296" starttime="20171101 16:07:08.296"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${output}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${port-1}</var>
</assign>
<msg timestamp="20171101 16:07:08.296" level="INFO">${port-1} = b1ce937d-6c58-4c2f-aea8-6f00d1da2e2f</msg>
<status status="PASS" endtime="20171101 16:07:08.296" starttime="20171101 16:07:08.296"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>neutron port-update</arg>
<arg>${port-1}</arg>
<arg>--allowed-address-pairs type=dict list=true</arg>
<arg>ip_address=${IP1}</arg>
</arguments>
<assign>
<var>${str}</var>
</assign>
<msg timestamp="20171101 16:07:08.296" level="INFO">${str} = neutron port-update b1ce937d-6c58-4c2f-aea8-6f00d1da2e2f --allowed-address-pairs type=dict list=true ip_address=10.80.1.150</msg>
<status status="PASS" endtime="20171101 16:07:08.296" starttime="20171101 16:07:08.296"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${str}</arg>
</arguments>
<msg timestamp="20171101 16:07:08.312" level="INFO">neutron port-update b1ce937d-6c58-4c2f-aea8 -6f00d1da2e2f --allowed-address-pairs type=dict list=true ip_address=10.80.1.150 [A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K0</msg>
<status status="PASS" endtime="20171101 16:07:08.312" starttime="20171101 16:07:08.296"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>3</arg>
</arguments>
<msg timestamp="20171101 16:07:11.324" level="INFO">Slept 3 seconds</msg>
<status status="PASS" endtime="20171101 16:07:11.324" starttime="20171101 16:07:08.312"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20171101 16:07:11.324" level="INFO">Updated port: b1ce937d-6c58-4c2f-aea8-6f00d1da2e2f
[root@controller ~(keystone_admin)]#</msg>
<msg timestamp="20171101 16:07:11.324" level="INFO">${output} = Updated port: b1ce937d-6c58-4c2f-aea8-6f00d1da2e2f
[root@controller ~(keystone_admin)]# </msg>
<status status="PASS" endtime="20171101 16:07:11.324" starttime="20171101 16:07:11.324"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>clear</arg>
</arguments>
<msg timestamp="20171101 16:07:11.324" level="INFO">clear</msg>
<status status="PASS" endtime="20171101 16:07:11.324" starttime="20171101 16:07:11.324"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>neutron port-list | grep -i ${IP2} |awk -F "|" '{print $2}'</arg>
</arguments>
<msg timestamp="20171101 16:07:11.324" level="INFO">[H[J[root@controller ~(keystone_admin)]# neutron port-list | grep -i 10.80.1.152 |aw k -F "|" '{print $2}'</msg>
<status status="PASS" endtime="20171101 16:07:11.324" starttime="20171101 16:07:11.324"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>3</arg>
</arguments>
<msg timestamp="20171101 16:07:14.334" level="INFO">Slept 3 seconds</msg>
<status status="PASS" endtime="20171101 16:07:14.334" starttime="20171101 16:07:11.324"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20171101 16:07:14.334" level="INFO">f5929efe-44b6-409b-8bed-e3f262d533de 
[root@controller ~(keystone_admin)]#</msg>
<msg timestamp="20171101 16:07:14.334" level="INFO">${output} =  f5929efe-44b6-409b-8bed-e3f262d533de 
[root@controller ~(keystone_admin)]# </msg>
<status status="PASS" endtime="20171101 16:07:14.334" starttime="20171101 16:07:14.334"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>@{output}</var>
</assign>
<msg timestamp="20171101 16:07:14.334" level="INFO">@{output} = [ f5929efe-44b6-409b-8bed-e3f262d533de | [root@controller | ~(keystone_admin)]# ]</msg>
<status status="PASS" endtime="20171101 16:07:14.334" starttime="20171101 16:07:14.334"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${output}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${port-2}</var>
</assign>
<msg timestamp="20171101 16:07:14.334" level="INFO">${port-2} = f5929efe-44b6-409b-8bed-e3f262d533de</msg>
<status status="PASS" endtime="20171101 16:07:14.334" starttime="20171101 16:07:14.334"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>neutron port-update</arg>
<arg>${port-2}</arg>
<arg>--allowed-address-pairs type=dict list=true</arg>
<arg>ip_address=${IP2}</arg>
</arguments>
<assign>
<var>${str}</var>
</assign>
<msg timestamp="20171101 16:07:14.334" level="INFO">${str} = neutron port-update f5929efe-44b6-409b-8bed-e3f262d533de --allowed-address-pairs type=dict list=true ip_address=10.80.1.152</msg>
<status status="PASS" endtime="20171101 16:07:14.334" starttime="20171101 16:07:14.334"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${str}</arg>
</arguments>
<msg timestamp="20171101 16:07:14.334" level="INFO">neutron port-update f5929efe-44b6-409b-8bed -e3f262d533de --allowed-address-pairs type=dict list=true ip_address=10.80.1.152 [A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K2</msg>
<status status="PASS" endtime="20171101 16:07:14.334" starttime="20171101 16:07:14.334"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20171101 16:07:16.347" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20171101 16:07:16.347" starttime="20171101 16:07:14.334"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20171101 16:07:16.347" level="INFO">Updated port: f5929efe-44b6-409b-8bed-e3f262d533de
[root@controller ~(keystone_admin)]#</msg>
<msg timestamp="20171101 16:07:16.347" level="INFO">${output} = Updated port: f5929efe-44b6-409b-8bed-e3f262d533de
[root@controller ~(keystone_admin)]# </msg>
<status status="PASS" endtime="20171101 16:07:16.347" starttime="20171101 16:07:16.347"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>clear</arg>
</arguments>
<msg timestamp="20171101 16:07:16.347" level="INFO">clear</msg>
<status status="PASS" endtime="20171101 16:07:16.347" starttime="20171101 16:07:16.347"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>neutron port-list | grep -i ${MGmt_IP}|awk -F "|" '{print $2}'</arg>
</arguments>
<msg timestamp="20171101 16:07:16.347" level="INFO">[H[J[root@controller ~(keystone_admin)]# neutron port-list | grep -i 172.18.0.174|aw k -F "|" '{print $2}'</msg>
<status status="PASS" endtime="20171101 16:07:16.347" starttime="20171101 16:07:16.347"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>3</arg>
</arguments>
<msg timestamp="20171101 16:07:19.359" level="INFO">Slept 3 seconds</msg>
<status status="PASS" endtime="20171101 16:07:19.359" starttime="20171101 16:07:16.347"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output3}</var>
</assign>
<msg timestamp="20171101 16:07:19.359" level="INFO">df3eb047-adf5-4218-888d-f656ed44984e 
[root@controller ~(keystone_admin)]#</msg>
<msg timestamp="20171101 16:07:19.359" level="INFO">${output3} =  df3eb047-adf5-4218-888d-f656ed44984e 
[root@controller ~(keystone_admin)]# </msg>
<status status="PASS" endtime="20171101 16:07:19.359" starttime="20171101 16:07:19.359"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${output3}</arg>
</arguments>
<assign>
<var>@{output3}</var>
</assign>
<msg timestamp="20171101 16:07:19.359" level="INFO">@{output3} = [ df3eb047-adf5-4218-888d-f656ed44984e | [root@controller | ~(keystone_admin)]# ]</msg>
<status status="PASS" endtime="20171101 16:07:19.359" starttime="20171101 16:07:19.359"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${output3}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${port-3}</var>
</assign>
<msg timestamp="20171101 16:07:19.359" level="INFO">${port-3} = df3eb047-adf5-4218-888d-f656ed44984e</msg>
<status status="PASS" endtime="20171101 16:07:19.359" starttime="20171101 16:07:19.359"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>neutron port-update</arg>
<arg>${port-3}</arg>
<arg>--allowed-address-pairs type=dict list=true</arg>
<arg>ip_address=${MGmt_IP}</arg>
</arguments>
<assign>
<var>${str}</var>
</assign>
<msg timestamp="20171101 16:07:19.359" level="INFO">${str} = neutron port-update df3eb047-adf5-4218-888d-f656ed44984e --allowed-address-pairs type=dict list=true ip_address=172.18.0.174</msg>
<status status="PASS" endtime="20171101 16:07:19.359" starttime="20171101 16:07:19.359"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${str}</arg>
</arguments>
<msg timestamp="20171101 16:07:19.359" level="INFO">neutron port-update df3eb047-adf5-4218-888d -f656ed44984e --allowed-address-pairs type=dict list=true ip_address=172.18.0.17 4</msg>
<status status="PASS" endtime="20171101 16:07:19.359" starttime="20171101 16:07:19.359"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>3</arg>
</arguments>
<msg timestamp="20171101 16:07:22.385" level="INFO">Slept 3 seconds</msg>
<status status="PASS" endtime="20171101 16:07:22.385" starttime="20171101 16:07:19.359"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20171101 16:07:22.385" level="INFO">Updated port: df3eb047-adf5-4218-888d-f656ed44984e
[root@controller ~(keystone_admin)]#</msg>
<msg timestamp="20171101 16:07:22.385" level="INFO">${output} = Updated port: df3eb047-adf5-4218-888d-f656ed44984e
[root@controller ~(keystone_admin)]# </msg>
<status status="PASS" endtime="20171101 16:07:22.385" starttime="20171101 16:07:22.385"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>****************Port Updation Complete************</arg>
</arguments>
<msg timestamp="20171101 16:07:22.385" level="INFO">****************Port Updation Complete************</msg>
<status status="PASS" endtime="20171101 16:07:22.385" starttime="20171101 16:07:22.385"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<status status="PASS" endtime="20171101 16:07:22.385" starttime="20171101 16:07:22.385"></status>
</kw>
<status status="PASS" endtime="20171101 16:07:22.385" starttime="20171101 16:06:52.212"></status>
</kw>
<kw name="PasswordUpdation" library="Oracle_SBC_Keywords">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>****************Password Updation Start************</arg>
</arguments>
<msg timestamp="20171101 16:07:22.385" level="INFO">****************Password Updation Start************</msg>
<status status="PASS" endtime="20171101 16:07:22.385" starttime="20171101 16:07:22.385"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10</arg>
</arguments>
<msg timestamp="20171101 16:07:32.386" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20171101 16:07:32.386" starttime="20171101 16:07:22.385"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>ssh -o "StrictHostKeyChecking no" user@${MGmt_IP}</arg>
</arguments>
<msg timestamp="20171101 16:07:32.386" level="INFO">ssh -o "StrictHostKeyChecking no" user@172. 18.0.174</msg>
<status status="PASS" endtime="20171101 16:07:32.386" starttime="20171101 16:07:32.386"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>3</arg>
</arguments>
<msg timestamp="20171101 16:07:35.397" level="INFO">Slept 3 seconds</msg>
<status status="PASS" endtime="20171101 16:07:35.397" starttime="20171101 16:07:32.386"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${SBC_Pwd}</arg>
</arguments>
<msg timestamp="20171101 16:07:35.397" level="INFO">Warning: Permanently added '172.18.0.174' (RSA) to the list of known hosts.</msg>
<status status="PASS" endtime="20171101 16:07:35.397" starttime="20171101 16:07:35.397"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>4</arg>
</arguments>
<msg timestamp="20171101 16:07:39.408" level="INFO">Slept 4 seconds</msg>
<status status="PASS" endtime="20171101 16:07:39.408" starttime="20171101 16:07:35.397"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${SBC_NewPassword}</arg>
</arguments>
<msg timestamp="20171101 16:07:39.408" level="INFO">user@172.18.0.174's password:</msg>
<status status="PASS" endtime="20171101 16:07:39.408" starttime="20171101 16:07:39.408"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>3</arg>
</arguments>
<msg timestamp="20171101 16:07:42.418" level="INFO">Slept 3 seconds</msg>
<status status="PASS" endtime="20171101 16:07:42.418" starttime="20171101 16:07:39.408"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${SBC_NewPassword}</arg>
</arguments>
<status status="PASS" endtime="20171101 16:07:42.418" starttime="20171101 16:07:42.418"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>4</arg>
</arguments>
<msg timestamp="20171101 16:07:46.428" level="INFO">Slept 4 seconds</msg>
<status status="PASS" endtime="20171101 16:07:46.428" starttime="20171101 16:07:42.418"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20171101 16:07:46.428" level="INFO">*ALERT*
*****************************************************************
user password has not been set. Please set password now.
*****************************************************************
** Only alphabetic (upper or lower case), numeric and punctuation
** characters are allowed in the password.
** Password must be 8 - 64 characters,
** and have 3 of the 4 following character classes :
** - lower case alpha
** - upper case alpha
** - numerals
** - punctuation
*****************************************************************
Enter New Password: 
Confirm New Password: 

Notifications:
- No Valid License Present! (aid: 327702, tid: 3)
&gt;</msg>
<msg timestamp="20171101 16:07:46.428" level="INFO">${output} = *ALERT*
*****************************************************************
user password has not been set. Please set password now.
*****************************************************************...</msg>
<status status="PASS" endtime="20171101 16:07:46.428" starttime="20171101 16:07:46.428"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>3</arg>
</arguments>
<msg timestamp="20171101 16:07:49.438" level="INFO">Slept 3 seconds</msg>
<status status="PASS" endtime="20171101 16:07:49.438" starttime="20171101 16:07:46.428"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>en</arg>
</arguments>
<msg timestamp="20171101 16:07:49.438" level="INFO">en</msg>
<status status="PASS" endtime="20171101 16:07:49.438" starttime="20171101 16:07:49.438"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>3</arg>
</arguments>
<msg timestamp="20171101 16:07:52.449" level="INFO">Slept 3 seconds</msg>
<status status="PASS" endtime="20171101 16:07:52.449" starttime="20171101 16:07:49.438"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${SBC_EN_Password}</arg>
</arguments>
<msg timestamp="20171101 16:07:52.449" level="INFO">Password:</msg>
<status status="PASS" endtime="20171101 16:07:52.449" starttime="20171101 16:07:52.449"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5</arg>
</arguments>
<msg timestamp="20171101 16:07:57.457" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20171101 16:07:57.457" starttime="20171101 16:07:52.449"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${SBC_NewPassword}</arg>
</arguments>
<msg timestamp="20171101 16:07:57.457" level="INFO">*ALERT*</msg>
<status status="PASS" endtime="20171101 16:07:57.457" starttime="20171101 16:07:57.457"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5</arg>
</arguments>
<msg timestamp="20171101 16:08:02.464" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20171101 16:08:02.464" starttime="20171101 16:07:57.457"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${SBC_NewPassword}</arg>
</arguments>
<msg timestamp="20171101 16:08:02.464" level="INFO">*****************************************************************</msg>
<status status="PASS" endtime="20171101 16:08:02.464" starttime="20171101 16:08:02.464"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>6</arg>
</arguments>
<msg timestamp="20171101 16:08:08.471" level="INFO">Slept 6 seconds</msg>
<status status="PASS" endtime="20171101 16:08:08.471" starttime="20171101 16:08:02.464"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20171101 16:08:08.471" level="INFO">admin password has not been set. Please set password now.
*****************************************************************
** Only alphabetic (upper or lower case), numeric and punctuation
** characters are allowed in the password.
** Password must be 8 - 64 characters,
** and have 3 of the 4 following character classes :
** - lower case alpha
** - upper case alpha
** - numerals
** - punctuation
*****************************************************************
Enter New Password: 
Confirm New Password: 

Notifications:
- No Valid License Present! (aid: 327702, tid: 3)
#</msg>
<msg timestamp="20171101 16:08:08.471" level="INFO">${output} = admin password has not been set. Please set password now.
*****************************************************************
** Only alphabetic (upper or lower case), numeric and punctuation
** char...</msg>
<status status="PASS" endtime="20171101 16:08:08.471" starttime="20171101 16:08:08.471"></status>
</kw>
<kw name="License" library="Oracle_SBC_Keywords">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>setup product</arg>
</arguments>
<msg timestamp="20171101 16:08:08.471" level="INFO">setup product</msg>
<status status="PASS" endtime="20171101 16:08:08.471" starttime="20171101 16:08:08.471"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20171101 16:08:10.499" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20171101 16:08:10.499" starttime="20171101 16:08:08.471"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20171101 16:08:10.499" starttime="20171101 16:08:10.499"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20171101 16:08:12.513" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20171101 16:08:12.513" starttime="20171101 16:08:10.499"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20171101 16:08:12.513" level="INFO">--------------------------------------------------------------</msg>
<status status="PASS" endtime="20171101 16:08:12.513" starttime="20171101 16:08:12.513"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20171101 16:08:14.525" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20171101 16:08:14.525" starttime="20171101 16:08:12.513"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>s</arg>
</arguments>
<msg timestamp="20171101 16:08:14.525" level="INFO">WARNING:</msg>
<status status="PASS" endtime="20171101 16:08:14.525" starttime="20171101 16:08:14.525"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20171101 16:08:16.538" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20171101 16:08:16.538" starttime="20171101 16:08:14.525"></status>
</kw>
<status status="PASS" endtime="20171101 16:08:16.538" starttime="20171101 16:08:08.471"></status>
</kw>
<kw name="License" library="Oracle_SBC_Keywords">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>setup product</arg>
</arguments>
<msg timestamp="20171101 16:08:16.538" level="INFO">Alteration of product alone or in conjunction with entitlement</msg>
<status status="PASS" endtime="20171101 16:08:16.538" starttime="20171101 16:08:16.538"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20171101 16:08:18.550" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20171101 16:08:18.550" starttime="20171101 16:08:16.538"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20171101 16:08:18.550" level="INFO">changes will not be complete until system reboot</msg>
<status status="PASS" endtime="20171101 16:08:18.550" starttime="20171101 16:08:18.550"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20171101 16:08:20.563" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20171101 16:08:20.563" starttime="20171101 16:08:18.550"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20171101 16:08:20.563" starttime="20171101 16:08:20.563"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20171101 16:08:22.577" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20171101 16:08:22.577" starttime="20171101 16:08:20.563"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>s</arg>
</arguments>
<msg timestamp="20171101 16:08:22.577" level="INFO">Last Modified</msg>
<status status="PASS" endtime="20171101 16:08:22.577" starttime="20171101 16:08:22.577"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20171101 16:08:24.589" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20171101 16:08:24.589" starttime="20171101 16:08:22.577"></status>
</kw>
<status status="PASS" endtime="20171101 16:08:24.589" starttime="20171101 16:08:16.538"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>exit</arg>
</arguments>
<msg timestamp="20171101 16:08:24.589" level="INFO">--------------------------------------------------------------</msg>
<status status="PASS" endtime="20171101 16:08:24.589" starttime="20171101 16:08:24.589"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>exit</arg>
</arguments>
<msg timestamp="20171101 16:08:24.589" level="INFO">1 : Product       : Uninitialized</msg>
<status status="PASS" endtime="20171101 16:08:24.589" starttime="20171101 16:08:24.589"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<msg timestamp="20171101 16:08:24.589" level="INFO">Enter 1 to modify, d' to display, 's' to save, 'q' to exit. [s]: 1

  Product
    1 - Session Border Controller
    2 - Session Router - Session Stateful
    3 - Session Router - Transaction Stateful
    4 - Peering Session Border Controller
  Enter choice     : 1

Enter 1 to modify, d' to display, 's' to save, 'q' to exit. [s]: s
save SUCCESS

Notifications:
- No Valid License Present! (aid: 327702, tid: 3)
# setup product

--------------------------------------------------------------
WARNING:
Alteration of product alone or in conjunction with entitlement
changes will not be complete until system reboot

Last Modified 2017-11-01 16:04:52
--------------------------------------------------------------
 1 : Product       : Session Border Controller

Enter 1 to modify, d' to display, 's' to save, 'q' to exit. [s]: 1

  Product
    1 - Session Border Controller
    2 - Session Router - Session Stateful
    3 - Session Router - Transaction Stateful
    4 - Peering Session Border Controller
  Enter choice     : 1

Enter 1 to modify, d' to display, 's' to save, 'q' to exit. [s]: s
save SUCCESS
#</msg>
<status status="PASS" endtime="20171101 16:08:24.589" starttime="20171101 16:08:24.589"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>**************portUpdation completed**************</arg>
</arguments>
<msg timestamp="20171101 16:08:24.589" level="INFO">**************portUpdation completed**************</msg>
<status status="PASS" endtime="20171101 16:08:24.589" starttime="20171101 16:08:24.589"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10</arg>
</arguments>
<msg timestamp="20171101 16:08:34.590" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20171101 16:08:34.590" starttime="20171101 16:08:24.589"></status>
</kw>
<status status="PASS" endtime="20171101 16:08:34.590" starttime="20171101 16:07:22.385"></status>
</kw>
<kw name="Setup Entitlements" library="Oracle_SBC_Keywords">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>****************SetupEntitlements Start************</arg>
</arguments>
<msg timestamp="20171101 16:08:34.590" level="INFO">****************SetupEntitlements Start************</msg>
<status status="PASS" endtime="20171101 16:08:34.590" starttime="20171101 16:08:34.590"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>ssh -o "StrictHostKeyChecking no" user@${MGmt_IP}</arg>
</arguments>
<msg timestamp="20171101 16:08:34.590" level="INFO">exit</msg>
<status status="PASS" endtime="20171101 16:08:34.590" starttime="20171101 16:08:34.590"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>4</arg>
</arguments>
<msg timestamp="20171101 16:08:38.599" level="INFO">Slept 4 seconds</msg>
<status status="PASS" endtime="20171101 16:08:38.599" starttime="20171101 16:08:34.590"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20171101 16:08:38.599" level="INFO">&gt; exit
Closing Session

Received disconnect from 172.18.0.174: 11: Logged out.
[root@controller ~(keystone_admin)]# ssh -o "StrictHostKeyChecking no" user@172. 18.0.174
user@172.18.0.174's password:</msg>
<msg timestamp="20171101 16:08:38.599" level="INFO">${output} = &gt; exit
Closing Session

Received disconnect from 172.18.0.174: 11: Logged out.
[root@controller ~(keystone_admin)]# ssh -o "StrictHostKeyChecking no" user@172. 18.0.174
user@172.18.0.174's passw...</msg>
<status status="PASS" endtime="20171101 16:08:38.599" starttime="20171101 16:08:38.599"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${SBC_NewPassword}</arg>
</arguments>
<status status="PASS" endtime="20171101 16:08:38.599" starttime="20171101 16:08:38.599"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>3</arg>
</arguments>
<msg timestamp="20171101 16:08:41.611" level="INFO">Slept 3 seconds</msg>
<status status="PASS" endtime="20171101 16:08:41.611" starttime="20171101 16:08:38.599"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>en</arg>
</arguments>
<status status="PASS" endtime="20171101 16:08:41.611" starttime="20171101 16:08:41.611"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10</arg>
</arguments>
<msg timestamp="20171101 16:08:51.611" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20171101 16:08:51.611" starttime="20171101 16:08:41.611"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${SBC_NewPassword}</arg>
</arguments>
<msg timestamp="20171101 16:08:51.611" level="INFO">&gt; en</msg>
<status status="PASS" endtime="20171101 16:08:51.611" starttime="20171101 16:08:51.611"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20171101 16:08:51.611" level="INFO">Password:</msg>
<msg timestamp="20171101 16:08:51.611" level="INFO">${output} = Password: </msg>
<status status="PASS" endtime="20171101 16:08:51.611" starttime="20171101 16:08:51.611"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20171101 16:08:53.623" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20171101 16:08:53.623" starttime="20171101 16:08:51.611"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>setup entitlements</arg>
</arguments>
<status status="PASS" endtime="20171101 16:08:53.623" starttime="20171101 16:08:53.623"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20171101 16:08:53.623" level="INFO"># setup entitlements</msg>
<status status="PASS" endtime="20171101 16:08:53.623" starttime="20171101 16:08:53.623"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>8000</arg>
</arguments>
<status status="PASS" endtime="20171101 16:08:53.639" starttime="20171101 16:08:53.623"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20171101 16:08:53.639" level="INFO">-----------------------------------------------------</msg>
<status status="PASS" endtime="20171101 16:08:53.639" starttime="20171101 16:08:53.639"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>enabled</arg>
</arguments>
<msg timestamp="20171101 16:08:53.639" level="INFO">Entitlements for Session Border Controller</msg>
<status status="PASS" endtime="20171101 16:08:53.639" starttime="20171101 16:08:53.639"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>3</arg>
</arguments>
<msg timestamp="20171101 16:08:53.639" level="INFO">Last Modified: Never</msg>
<status status="PASS" endtime="20171101 16:08:53.639" starttime="20171101 16:08:53.639"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>enabled</arg>
</arguments>
<msg timestamp="20171101 16:08:53.639" level="INFO">-----------------------------------------------------</msg>
<status status="PASS" endtime="20171101 16:08:53.639" starttime="20171101 16:08:53.639"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>4</arg>
</arguments>
<msg timestamp="20171101 16:08:53.639" level="INFO">1 : Session Capacity                     : 0</msg>
<status status="PASS" endtime="20171101 16:08:53.639" starttime="20171101 16:08:53.639"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>enabled</arg>
</arguments>
<msg timestamp="20171101 16:08:53.639" level="INFO">2 :   Accounting                         :</msg>
<status status="PASS" endtime="20171101 16:08:53.639" starttime="20171101 16:08:53.639"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>5</arg>
</arguments>
<msg timestamp="20171101 16:08:53.654" level="INFO">3 :   IPv4 - IPv6 Interworking           :</msg>
<status status="PASS" endtime="20171101 16:08:53.654" starttime="20171101 16:08:53.639"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>enabled</arg>
</arguments>
<msg timestamp="20171101 16:08:53.654" level="INFO">4 :   IWF (SIP-H323)                     :</msg>
<status status="PASS" endtime="20171101 16:08:53.654" starttime="20171101 16:08:53.654"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>6</arg>
</arguments>
<msg timestamp="20171101 16:08:53.654" level="INFO">5 :   Load Balancing                     :</msg>
<status status="PASS" endtime="20171101 16:08:53.654" starttime="20171101 16:08:53.654"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>enabled</arg>
</arguments>
<msg timestamp="20171101 16:08:53.654" level="INFO">6 :   Policy Server                      :</msg>
<status status="PASS" endtime="20171101 16:08:53.654" starttime="20171101 16:08:53.654"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>7</arg>
</arguments>
<msg timestamp="20171101 16:08:53.654" level="INFO">7 :   Quality of Service                 :</msg>
<status status="PASS" endtime="20171101 16:08:53.654" starttime="20171101 16:08:53.654"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>enabled</arg>
</arguments>
<msg timestamp="20171101 16:08:53.654" level="INFO">8 :   Routing                            :</msg>
<status status="PASS" endtime="20171101 16:08:53.654" starttime="20171101 16:08:53.654"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>8</arg>
</arguments>
<msg timestamp="20171101 16:08:53.654" level="INFO">9 :   SIPREC Session Recording           :</msg>
<status status="PASS" endtime="20171101 16:08:53.654" starttime="20171101 16:08:53.654"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>enabled</arg>
</arguments>
<msg timestamp="20171101 16:08:53.654" level="INFO">10: IMS-AKA Endpoints                    : 0</msg>
<status status="PASS" endtime="20171101 16:08:53.654" starttime="20171101 16:08:53.654"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>9</arg>
</arguments>
<msg timestamp="20171101 16:08:53.654" level="INFO">11: IPSec Trunking Sessions              : 0</msg>
<status status="PASS" endtime="20171101 16:08:53.654" starttime="20171101 16:08:53.654"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>enabled</arg>
</arguments>
<msg timestamp="20171101 16:08:53.654" level="INFO">12: MSRP B2BUA Sessions                  : 0</msg>
<status status="PASS" endtime="20171101 16:08:53.654" starttime="20171101 16:08:53.654"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>10</arg>
</arguments>
<msg timestamp="20171101 16:08:53.654" level="INFO">13: SRTP Sessions                        : 0</msg>
<status status="PASS" endtime="20171101 16:08:53.654" starttime="20171101 16:08:53.654"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>8000</arg>
</arguments>
<msg timestamp="20171101 16:08:53.654" level="INFO">14: TSCF Tunnels                         : 0</msg>
<status status="PASS" endtime="20171101 16:08:53.654" starttime="20171101 16:08:53.654"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>11</arg>
</arguments>
<status status="PASS" endtime="20171101 16:08:53.654" starttime="20171101 16:08:53.654"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>1024</arg>
</arguments>
<msg timestamp="20171101 16:08:53.670" level="INFO">Enter 1 - 14 to modify, d' to display, 's' to save, 'q' to exit. [s]: 1</msg>
<status status="PASS" endtime="20171101 16:08:53.670" starttime="20171101 16:08:53.654"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>12</arg>
</arguments>
<status status="PASS" endtime="20171101 16:08:53.670" starttime="20171101 16:08:53.670"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>1024</arg>
</arguments>
<msg timestamp="20171101 16:08:53.670" level="INFO">Session Capacity (0-256000)             : 8000</msg>
<status status="PASS" endtime="20171101 16:08:53.670" starttime="20171101 16:08:53.670"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>13</arg>
</arguments>
<status status="PASS" endtime="20171101 16:08:53.670" starttime="20171101 16:08:53.670"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>1024</arg>
</arguments>
<msg timestamp="20171101 16:08:53.670" level="INFO">Enter 1 - 14 to modify, d' to display, 's' to save, 'q' to exit. [s]: 2</msg>
<status status="PASS" endtime="20171101 16:08:53.670" starttime="20171101 16:08:53.670"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>14</arg>
</arguments>
<status status="PASS" endtime="20171101 16:08:53.670" starttime="20171101 16:08:53.670"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>1024</arg>
</arguments>
<msg timestamp="20171101 16:08:53.670" level="INFO">Accounting (enabled/disabled)         : enabled</msg>
<status status="PASS" endtime="20171101 16:08:53.670" starttime="20171101 16:08:53.670"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>3</arg>
</arguments>
<msg timestamp="20171101 16:08:56.681" level="INFO">Slept 3 seconds</msg>
<status status="PASS" endtime="20171101 16:08:56.681" starttime="20171101 16:08:53.670"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>s</arg>
</arguments>
<status status="PASS" endtime="20171101 16:08:56.681" starttime="20171101 16:08:56.681"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>con ter</arg>
</arguments>
<msg timestamp="20171101 16:08:56.681" level="INFO">Enter 1 - 14 to modify, d' to display, 's' to save, 'q' to exit. [s]: 3</msg>
<status status="PASS" endtime="20171101 16:08:56.681" starttime="20171101 16:08:56.681"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>bootparam</arg>
</arguments>
<status status="PASS" endtime="20171101 16:08:56.681" starttime="20171101 16:08:56.681"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20171101 16:08:58.693" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20171101 16:08:58.693" starttime="20171101 16:08:56.681"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>/boot/bzImage</arg>
</arguments>
<msg timestamp="20171101 16:08:58.693" level="INFO">IPv4 - IPv6 Interworking (enabled/disabled): enabled</msg>
<status status="PASS" endtime="20171101 16:08:58.693" starttime="20171101 16:08:58.693"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20171101 16:08:58.693" level="INFO">Enter 1 - 14 to modify, d' to display, 's' to save, 'q' to exit. [s]: 4

    IWF (SIP-H323) (enabled/disabled)     : enabled

Enter 1 - 14 to modify, d' to display, 's' to save, 'q' to exit. [s]: 5

    Load Balancing (enabled/disabled)     : enabled

Enter 1 - 14 to modify, d' to display, 's' to save, 'q' to exit. [s]: 6

    Policy Server (enabled/disabled)      : enabled

Enter 1 - 14 to modify, d' to display, 's' to save, 'q' to exit. [s]: 7

    Quality of Service (enabled/disabled) : enabled

Enter 1 - 14 to modify, d' to display, 's' to save, 'q' to exit. [s]: 8

    Routing (enabled/disabled)            : enabled

Enter 1 - 14 to modify, d' to display, 's' to save, 'q' to exit. [s]: 9

    SIPREC Session Recording (enabled/disabled): enabled

Enter 1 - 14 to modify, d' to display, 's' to save, 'q' to exit. [s]: 10

  IMS-AKA Endpoints (0-100000)            : 8000

Enter 1 - 14 to modify, d' to display, 's' to save, 'q' to exit. [s]: 11

  IPSec Trunking Sessions (0-1024)        : 1024

Enter 1 - 14 to modify, d' to display, 's' to save, 'q' to exit. [s]: 12

  MSRP B2BUA Sessions (0-256000)          : 1024

Enter 1 - 14 to modify, d' to display, 's' to save, 'q' to exit. [s]: 13

  SRTP Sessions (0-256000)                : 1024

Enter 1 - 14 to modify, d' to display, 's' to save, 'q' to exit. [s]: 14

  TSCF Tunnels                            : 1024

Enter 1 - 14 to modify, d' to display, 's' to save, 'q' to exit. [s]: s
SAVE SUCCEEDED
# con ter
(configure)# bootparam

'.' = clear field;  '-' = go to previous field;  q = quit

Boot File       	: /boot/bzImage</msg>
<msg timestamp="20171101 16:08:58.693" level="INFO">${output} = 
Enter 1 - 14 to modify, d' to display, 's' to save, 'q' to exit. [s]: 4

    IWF (SIP-H323) (enabled/disabled)     : enabled

Enter 1 - 14 to modify, d' to display, 's' to save, 'q' to exit. [s]...</msg>
<status status="PASS" endtime="20171101 16:08:58.693" starttime="20171101 16:08:58.693"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20171101 16:08:58.693" level="INFO">
Enter 1 - 14 to modify, d' to display, 's' to save, 'q' to exit. [s]: 4

    IWF (SIP-H323) (enabled/disabled)     : enabled

Enter 1 - 14 to modify, d' to display, 's' to save, 'q' to exit. [s]: 5

    Load Balancing (enabled/disabled)     : enabled

Enter 1 - 14 to modify, d' to display, 's' to save, 'q' to exit. [s]: 6

    Policy Server (enabled/disabled)      : enabled

Enter 1 - 14 to modify, d' to display, 's' to save, 'q' to exit. [s]: 7

    Quality of Service (enabled/disabled) : enabled

Enter 1 - 14 to modify, d' to display, 's' to save, 'q' to exit. [s]: 8

    Routing (enabled/disabled)            : enabled

Enter 1 - 14 to modify, d' to display, 's' to save, 'q' to exit. [s]: 9

    SIPREC Session Recording (enabled/disabled): enabled

Enter 1 - 14 to modify, d' to display, 's' to save, 'q' to exit. [s]: 10

  IMS-AKA Endpoints (0-100000)            : 8000

Enter 1 - 14 to modify, d' to display, 's' to save, 'q' to exit. [s]: 11

  IPSec Trunking Sessions (0-1024)        : 1024

Enter 1 - 14 to modify, d' to display, 's' to save, 'q' to exit. [s]: 12

  MSRP B2BUA Sessions (0-256000)          : 1024

Enter 1 - 14 to modify, d' to display, 's' to save, 'q' to exit. [s]: 13

  SRTP Sessions (0-256000)                : 1024

Enter 1 - 14 to modify, d' to display, 's' to save, 'q' to exit. [s]: 14

  TSCF Tunnels                            : 1024

Enter 1 - 14 to modify, d' to display, 's' to save, 'q' to exit. [s]: s
SAVE SUCCEEDED
# con ter
(configure)# bootparam

'.' = clear field;  '-' = go to previous field;  q = quit

Boot File       	: /boot/bzImage </msg>
<status status="PASS" endtime="20171101 16:08:58.693" starttime="20171101 16:08:58.693"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${MGmt_IP}</arg>
</arguments>
<msg timestamp="20171101 16:08:58.693" level="INFO">/boot/bzImage</msg>
<status status="PASS" endtime="20171101 16:08:58.693" starttime="20171101 16:08:58.693"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20171101 16:08:58.693" level="INFO">IP Address      	:</msg>
<msg timestamp="20171101 16:08:58.693" level="INFO">${output} = IP Address      	: </msg>
<status status="PASS" endtime="20171101 16:08:58.693" starttime="20171101 16:08:58.693"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20171101 16:08:58.693" level="INFO">IP Address      	: </msg>
<status status="PASS" endtime="20171101 16:08:58.693" starttime="20171101 16:08:58.693"></status>
</kw>
<kw name="Write Bare" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine without appending a newline.</doc>
<arguments>
<arg>\n</arg>
</arguments>
<status status="PASS" endtime="20171101 16:08:58.693" starttime="20171101 16:08:58.693"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20171101 16:08:58.693" level="INFO">${output} = </msg>
<status status="PASS" endtime="20171101 16:08:58.693" starttime="20171101 16:08:58.693"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20171101 16:08:58.693" level="INFO"></msg>
<status status="PASS" endtime="20171101 16:08:58.693" starttime="20171101 16:08:58.693"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>255.255.255.0</arg>
</arguments>
<msg timestamp="20171101 16:08:58.724" level="INFO">172.18.0.174</msg>
<status status="PASS" endtime="20171101 16:08:58.724" starttime="20171101 16:08:58.693"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20171101 16:08:58.740" level="INFO">VLAN            	:</msg>
<msg timestamp="20171101 16:08:58.740" level="INFO">${output} = VLAN            	: </msg>
<status status="PASS" endtime="20171101 16:08:58.740" starttime="20171101 16:08:58.724"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20171101 16:08:58.740" level="INFO">VLAN            	: </msg>
<status status="PASS" endtime="20171101 16:08:58.740" starttime="20171101 16:08:58.740"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>172.18.0.1</arg>
</arguments>
<status status="PASS" endtime="20171101 16:08:58.740" starttime="20171101 16:08:58.740"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20171101 16:08:58.740" level="INFO">Netmask         	: 255.255.255.0
Gateway         	:</msg>
<msg timestamp="20171101 16:08:58.740" level="INFO">${output} = Netmask         	: 255.255.255.0
Gateway         	: </msg>
<status status="PASS" endtime="20171101 16:08:58.740" starttime="20171101 16:08:58.740"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20171101 16:08:58.740" level="INFO">Netmask         	: 255.255.255.0
Gateway         	: </msg>
<status status="PASS" endtime="20171101 16:08:58.740" starttime="20171101 16:08:58.740"></status>
</kw>
<kw name="Write Bare" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine without appending a newline.</doc>
<arguments>
<arg>\n</arg>
</arguments>
<status status="PASS" endtime="20171101 16:08:58.740" starttime="20171101 16:08:58.740"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20171101 16:08:58.740" level="INFO">${output} = </msg>
<status status="PASS" endtime="20171101 16:08:58.740" starttime="20171101 16:08:58.740"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20171101 16:08:58.740" level="INFO"></msg>
<status status="PASS" endtime="20171101 16:08:58.740" starttime="20171101 16:08:58.740"></status>
</kw>
<kw name="Write Bare" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine without appending a newline.</doc>
<arguments>
<arg>\n</arg>
</arguments>
<status status="PASS" endtime="20171101 16:08:58.740" starttime="20171101 16:08:58.740"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20171101 16:08:58.740" level="INFO">172.18.0.1
IPv6 Address    	:</msg>
<msg timestamp="20171101 16:08:58.740" level="INFO">${output} = 172.18.0.1
IPv6 Address    	: </msg>
<status status="PASS" endtime="20171101 16:08:58.740" starttime="20171101 16:08:58.740"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20171101 16:08:58.740" level="INFO">172.18.0.1
IPv6 Address    	: </msg>
<status status="PASS" endtime="20171101 16:08:58.740" starttime="20171101 16:08:58.740"></status>
</kw>
<kw name="Write Bare" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine without appending a newline.</doc>
<arguments>
<arg>\n</arg>
</arguments>
<status status="PASS" endtime="20171101 16:08:58.740" starttime="20171101 16:08:58.740"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20171101 16:08:58.740" level="INFO">${output} = </msg>
<status status="PASS" endtime="20171101 16:08:58.740" starttime="20171101 16:08:58.740"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20171101 16:08:58.740" level="INFO"></msg>
<status status="PASS" endtime="20171101 16:08:58.740" starttime="20171101 16:08:58.740"></status>
</kw>
<kw name="Write Bare" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine without appending a newline.</doc>
<arguments>
<arg>\n</arg>
</arguments>
<status status="PASS" endtime="20171101 16:08:58.740" starttime="20171101 16:08:58.740"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20171101 16:08:58.740" level="INFO">${output} = </msg>
<status status="PASS" endtime="20171101 16:08:58.740" starttime="20171101 16:08:58.740"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20171101 16:08:58.740" level="INFO"></msg>
<status status="PASS" endtime="20171101 16:08:58.740" starttime="20171101 16:08:58.740"></status>
</kw>
<kw name="Write Bare" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine without appending a newline.</doc>
<arguments>
<arg>\n</arg>
</arguments>
<status status="PASS" endtime="20171101 16:08:58.740" starttime="20171101 16:08:58.740"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20171101 16:08:58.740" level="INFO">${output} = </msg>
<status status="PASS" endtime="20171101 16:08:58.740" starttime="20171101 16:08:58.740"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20171101 16:08:58.740" level="INFO"></msg>
<status status="PASS" endtime="20171101 16:08:58.740" starttime="20171101 16:08:58.740"></status>
</kw>
<kw name="Write Bare" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine without appending a newline.</doc>
<arguments>
<arg>\n</arg>
</arguments>
<status status="PASS" endtime="20171101 16:08:58.740" starttime="20171101 16:08:58.740"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20171101 16:08:58.740" level="INFO">${output} = </msg>
<status status="PASS" endtime="20171101 16:08:58.740" starttime="20171101 16:08:58.740"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20171101 16:08:58.740" level="INFO"></msg>
<status status="PASS" endtime="20171101 16:08:58.740" starttime="20171101 16:08:58.740"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>SBC</arg>
</arguments>
<status status="PASS" endtime="20171101 16:08:58.787" starttime="20171101 16:08:58.740"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20171101 16:08:58.787" level="INFO">IPv6 Gateway    	: 
Host IP         	: 
FTP username    	: 
FTP password    	: 
Flags           	: 
Target Name     	: SBC
Console Device  	: VGA</msg>
<msg timestamp="20171101 16:08:58.787" level="INFO">${output} = IPv6 Gateway    	: 
Host IP         	: 
FTP username    	: 
FTP password    	: 
Flags           	: 
Target Name     	: SBC
Console Device  	: VGA </msg>
<status status="PASS" endtime="20171101 16:08:58.787" starttime="20171101 16:08:58.787"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20171101 16:08:58.787" level="INFO">IPv6 Gateway    	: 
Host IP         	: 
FTP username    	: 
FTP password    	: 
Flags           	: 
Target Name     	: SBC
Console Device  	: VGA </msg>
<status status="PASS" endtime="20171101 16:08:58.787" starttime="20171101 16:08:58.787"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>VGA</arg>
</arguments>
<msg timestamp="20171101 16:08:58.818" level="INFO">VGA</msg>
<status status="PASS" endtime="20171101 16:08:58.818" starttime="20171101 16:08:58.787"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20171101 16:08:58.818" level="INFO">Console Baudrate	: 115200</msg>
<msg timestamp="20171101 16:08:58.818" level="INFO">${output} = Console Baudrate	: 115200 </msg>
<status status="PASS" endtime="20171101 16:08:58.818" starttime="20171101 16:08:58.818"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20171101 16:08:58.818" level="INFO">Console Baudrate	: 115200 </msg>
<status status="PASS" endtime="20171101 16:08:58.818" starttime="20171101 16:08:58.818"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>115200</arg>
</arguments>
<msg timestamp="20171101 16:08:58.865" level="INFO">115200</msg>
<status status="PASS" endtime="20171101 16:08:58.865" starttime="20171101 16:08:58.818"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20171101 16:08:58.865" level="INFO">Other           	:</msg>
<msg timestamp="20171101 16:08:58.865" level="INFO">${output} = Other           	: </msg>
<status status="PASS" endtime="20171101 16:08:58.865" starttime="20171101 16:08:58.865"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20171101 16:08:58.865" level="INFO">Other           	: </msg>
<status status="PASS" endtime="20171101 16:08:58.865" starttime="20171101 16:08:58.865"></status>
</kw>
<kw name="Write Bare" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine without appending a newline.</doc>
<arguments>
<arg>\n</arg>
</arguments>
<status status="PASS" endtime="20171101 16:08:58.865" starttime="20171101 16:08:58.865"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20171101 16:08:58.865" level="INFO">${output} = </msg>
<status status="PASS" endtime="20171101 16:08:58.865" starttime="20171101 16:08:58.865"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20171101 16:08:58.865" level="INFO"></msg>
<status status="PASS" endtime="20171101 16:08:58.865" starttime="20171101 16:08:58.865"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5</arg>
</arguments>
<msg timestamp="20171101 16:09:03.872" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20171101 16:09:03.872" starttime="20171101 16:08:58.865"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>exit</arg>
</arguments>
<status status="PASS" endtime="20171101 16:09:03.872" starttime="20171101 16:09:03.872"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5</arg>
</arguments>
<msg timestamp="20171101 16:09:08.880" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20171101 16:09:08.880" starttime="20171101 16:09:03.872"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>ssh -o "StrictHostKeyChecking no" user@${MGmt_IP}</arg>
</arguments>
<status status="PASS" endtime="20171101 16:09:08.880" starttime="20171101 16:09:08.880"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5</arg>
</arguments>
<msg timestamp="20171101 16:09:13.888" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20171101 16:09:13.888" starttime="20171101 16:09:08.880"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${SBC_NewPassword}</arg>
</arguments>
<msg timestamp="20171101 16:09:13.888" level="INFO">NOTE: These changed parameters will not go into effect until reboot.</msg>
<status status="PASS" endtime="20171101 16:09:13.888" starttime="20171101 16:09:13.888"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>interface-mapping</arg>
</arguments>
<msg timestamp="20171101 16:09:13.888" level="INFO">Also, be aware that some boot parameters may also be changed through</msg>
<status status="PASS" endtime="20171101 16:09:13.888" starttime="20171101 16:09:13.888"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>show</arg>
</arguments>
<msg timestamp="20171101 16:09:13.888" level="INFO">PHY and Network Interface Configurations.</msg>
<status status="PASS" endtime="20171101 16:09:13.888" starttime="20171101 16:09:13.888"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>swap wancom1 s1p0</arg>
</arguments>
<status status="PASS" endtime="20171101 16:09:13.888" starttime="20171101 16:09:13.888"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>4</arg>
</arguments>
<msg timestamp="20171101 16:09:17.899" level="INFO">Slept 4 seconds</msg>
<status status="PASS" endtime="20171101 16:09:17.899" starttime="20171101 16:09:13.888"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>y</arg>
</arguments>
<msg timestamp="20171101 16:09:17.899" level="INFO">(configure)# exit</msg>
<status status="PASS" endtime="20171101 16:09:17.899" starttime="20171101 16:09:17.899"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>4</arg>
</arguments>
<msg timestamp="20171101 16:09:21.908" level="INFO">Slept 4 seconds</msg>
<status status="PASS" endtime="20171101 16:09:21.908" starttime="20171101 16:09:17.899"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>exit</arg>
</arguments>
<msg timestamp="20171101 16:09:21.908" level="INFO"># ssh -o "StrictHostKeyChecking no" user@172.18.0.174</msg>
<status status="PASS" endtime="20171101 16:09:21.908" starttime="20171101 16:09:21.908"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>exit</arg>
</arguments>
<msg timestamp="20171101 16:09:21.908" level="INFO">% command not found</msg>
<status status="PASS" endtime="20171101 16:09:21.908" starttime="20171101 16:09:21.908"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>exit</arg>
</arguments>
<msg timestamp="20171101 16:09:21.908" level="INFO"># Root@123</msg>
<status status="PASS" endtime="20171101 16:09:21.908" starttime="20171101 16:09:21.908"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10</arg>
</arguments>
<msg timestamp="20171101 16:09:31.909" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20171101 16:09:31.909" starttime="20171101 16:09:21.908"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>****************Setup Entitlements Complete************</arg>
</arguments>
<msg timestamp="20171101 16:09:31.909" level="INFO">****************Setup Entitlements Complete************</msg>
<status status="PASS" endtime="20171101 16:09:31.909" starttime="20171101 16:09:31.909"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<msg timestamp="20171101 16:09:31.909" level="INFO">% command not found
# interface-mapping
(interface-mapping)# show
Interface Mapping Info
-------------------------------------------
Eth-IF	MAC-Addr		Label
wancom0	FA:16:3E:21:46:82	#generic
wancom1	FA:16:3E:AE:BE:06	#generic
s0p0	FA:16:3E:1B:93:9B	#generic
wancom2	FF:FF:FF:FF:FF:FF	#dummy
spare	FF:FF:FF:FF:FF:FF	#dummy
s1p0	FF:FF:FF:FF:FF:FF	#dummy
s0p1	FF:FF:FF:FF:FF:FF	#dummy
s1p1	FF:FF:FF:FF:FF:FF	#dummy
s0p2	FF:FF:FF:FF:FF:FF	#dummy
s1p2	FF:FF:FF:FF:FF:FF	#dummy
s0p3	FF:FF:FF:FF:FF:FF	#dummy
s1p3	FF:FF:FF:FF:FF:FF	#dummy

(interface-mapping)# swap wancom1 s1p0
Interface Mapping Info after swapping
-------------------------------------------
Eth-IF	MAC-Addr		Label
wancom0	FA:16:3E:21:46:82	#generic
wancom1	FF:FF:FF:FF:FF:FF	#dummy
s0p0	FA:16:3E:1B:93:9B	#generic
wancom2	FF:FF:FF:FF:FF:FF	#dummy
spare	FF:FF:FF:FF:FF:FF	#dummy
s1p0	FA:16:3E:AE:BE:06	#generic
s0p1	FF:FF:FF:FF:FF:FF	#dummy
s1p1	FF:FF:FF:FF:FF:FF	#dummy
s0p2	FF:FF:FF:FF:FF:FF	#dummy
s1p2	FF:FF:FF:FF:FF:FF	#dummy
s0p3	FF:FF:FF:FF:FF:FF	#dummy
s1p3	FF:FF:FF:FF:FF:FF	#dummy


Changes could affect service, and Requires Reboot to become effective.

Continue [y/n]?: y

WARNING: This change requires a reboot to become effective.
(interface-mapping)# exit
# exit
&gt; exit
Closing Session

Received disconnect from 172.18.0.174: 11: Logged out.
[root@controller ~(keystone_admin)]#</msg>
<status status="PASS" endtime="20171101 16:09:31.909" starttime="20171101 16:09:31.909"></status>
</kw>
<status status="PASS" endtime="20171101 16:09:31.909" starttime="20171101 16:08:34.590"></status>
</kw>
<kw name="Configuration" library="Oracle_SBC_Keywords">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>**************** Configuration Start ************</arg>
</arguments>
<msg timestamp="20171101 16:09:31.909" level="INFO">**************** Configuration Start ************</msg>
<status status="PASS" endtime="20171101 16:09:31.909" starttime="20171101 16:09:31.909"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5</arg>
</arguments>
<msg timestamp="20171101 16:09:36.917" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20171101 16:09:36.917" starttime="20171101 16:09:31.909"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>ssh -o "StrictHostKeyChecking no" user@${MGmt_IP}</arg>
</arguments>
<msg timestamp="20171101 16:09:36.917" level="INFO">ssh -o "StrictHostKeyChecking no" user@172. 18.0.174</msg>
<status status="PASS" endtime="20171101 16:09:36.917" starttime="20171101 16:09:36.917"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5</arg>
</arguments>
<msg timestamp="20171101 16:09:41.925" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20171101 16:09:41.925" starttime="20171101 16:09:36.917"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20171101 16:09:41.925" level="INFO">user@172.18.0.174's password:</msg>
<msg timestamp="20171101 16:09:41.925" level="INFO">${output} = user@172.18.0.174's password: </msg>
<status status="PASS" endtime="20171101 16:09:41.925" starttime="20171101 16:09:41.925"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${SBC_NewPassword}</arg>
</arguments>
<status status="PASS" endtime="20171101 16:09:41.925" starttime="20171101 16:09:41.925"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20171101 16:09:43.938" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20171101 16:09:43.938" starttime="20171101 16:09:41.925"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>en</arg>
</arguments>
<status status="PASS" endtime="20171101 16:09:43.938" starttime="20171101 16:09:43.938"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20171101 16:09:44.952" level="INFO">Slept 1 second</msg>
<status status="PASS" endtime="20171101 16:09:44.952" starttime="20171101 16:09:43.938"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${SBC_NewPassword}</arg>
</arguments>
<msg timestamp="20171101 16:09:44.952" level="INFO">&gt; en</msg>
<status status="PASS" endtime="20171101 16:09:44.952" starttime="20171101 16:09:44.952"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20171101 16:09:44.952" level="INFO">Password:</msg>
<msg timestamp="20171101 16:09:44.952" level="INFO">${output} = Password: </msg>
<status status="PASS" endtime="20171101 16:09:44.952" starttime="20171101 16:09:44.952"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20171101 16:09:46.964" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20171101 16:09:46.964" starttime="20171101 16:09:44.952"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>con ter</arg>
</arguments>
<status status="PASS" endtime="20171101 16:09:46.964" starttime="20171101 16:09:46.964"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>system</arg>
</arguments>
<msg timestamp="20171101 16:09:46.964" level="INFO"># con ter</msg>
<status status="PASS" endtime="20171101 16:09:46.964" starttime="20171101 16:09:46.964"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20171101 16:09:48.977" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20171101 16:09:48.977" starttime="20171101 16:09:46.964"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>phy-interface</arg>
</arguments>
<msg timestamp="20171101 16:09:48.977" level="INFO">(configure)# system</msg>
<status status="PASS" endtime="20171101 16:09:48.977" starttime="20171101 16:09:48.977"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>name ext</arg>
</arguments>
<msg timestamp="20171101 16:09:49.024" level="INFO">(system)# phy-interface</msg>
<status status="PASS" endtime="20171101 16:09:49.024" starttime="20171101 16:09:48.977"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>operation-type Media</arg>
</arguments>
<msg timestamp="20171101 16:09:49.024" level="INFO">(phy-interface)# name ext</msg>
<status status="PASS" endtime="20171101 16:09:49.024" starttime="20171101 16:09:49.024"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>slot 0</arg>
</arguments>
<msg timestamp="20171101 16:09:49.055" level="INFO">(phy-interface)# operation-type Media</msg>
<status status="PASS" endtime="20171101 16:09:49.055" starttime="20171101 16:09:49.024"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>port 0</arg>
</arguments>
<msg timestamp="20171101 16:09:49.055" level="INFO">(phy-interface)# slot 0</msg>
<status status="PASS" endtime="20171101 16:09:49.055" starttime="20171101 16:09:49.055"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>done</arg>
</arguments>
<msg timestamp="20171101 16:09:49.102" level="INFO">(phy-interface)# port 0</msg>
<status status="PASS" endtime="20171101 16:09:49.102" starttime="20171101 16:09:49.055"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20171101 16:09:51.114" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20171101 16:09:51.114" starttime="20171101 16:09:49.102"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>name in</arg>
</arguments>
<msg timestamp="20171101 16:09:51.114" level="INFO">(phy-interface)# done</msg>
<status status="PASS" endtime="20171101 16:09:51.114" starttime="20171101 16:09:51.114"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>operation-type Media</arg>
</arguments>
<msg timestamp="20171101 16:09:51.114" level="INFO">phy-interface</msg>
<status status="PASS" endtime="20171101 16:09:51.114" starttime="20171101 16:09:51.114"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>slot 1</arg>
</arguments>
<msg timestamp="20171101 16:09:51.114" level="INFO">name                                    ext</msg>
<status status="PASS" endtime="20171101 16:09:51.114" starttime="20171101 16:09:51.114"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>done</arg>
</arguments>
<msg timestamp="20171101 16:09:51.114" level="INFO">operation-type                          Media</msg>
<status status="PASS" endtime="20171101 16:09:51.114" starttime="20171101 16:09:51.114"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20171101 16:09:53.126" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20171101 16:09:53.126" starttime="20171101 16:09:51.114"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>exit</arg>
</arguments>
<msg timestamp="20171101 16:09:53.126" level="INFO">port                                    0</msg>
<status status="PASS" endtime="20171101 16:09:53.126" starttime="20171101 16:09:53.126"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>network-interface</arg>
</arguments>
<msg timestamp="20171101 16:09:53.126" level="INFO">slot                                    0</msg>
<status status="PASS" endtime="20171101 16:09:53.126" starttime="20171101 16:09:53.126"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>name ext</arg>
</arguments>
<msg timestamp="20171101 16:09:53.126" level="INFO">virtual-mac</msg>
<status status="PASS" endtime="20171101 16:09:53.126" starttime="20171101 16:09:53.126"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>sub-port-id 0</arg>
</arguments>
<msg timestamp="20171101 16:09:53.126" level="INFO">admin-state                             enabled</msg>
<status status="PASS" endtime="20171101 16:09:53.126" starttime="20171101 16:09:53.126"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>description toEPC</arg>
</arguments>
<msg timestamp="20171101 16:09:53.142" level="INFO">auto-negotiation                        enabled</msg>
<status status="PASS" endtime="20171101 16:09:53.142" starttime="20171101 16:09:53.126"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>ip-address ${IP2}</arg>
</arguments>
<msg timestamp="20171101 16:09:53.142" level="INFO">duplex-mode                             FULL</msg>
<status status="PASS" endtime="20171101 16:09:53.142" starttime="20171101 16:09:53.142"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>netmask 255.255.255.0</arg>
</arguments>
<msg timestamp="20171101 16:09:53.142" level="INFO">speed                                   100</msg>
<status status="PASS" endtime="20171101 16:09:53.142" starttime="20171101 16:09:53.142"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>gateway ${GATEWAY IP}</arg>
</arguments>
<msg timestamp="20171101 16:09:53.142" level="INFO">wancom-health-score                     50</msg>
<status status="PASS" endtime="20171101 16:09:53.142" starttime="20171101 16:09:53.142"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>dns-ip-primary ${DNS IP}</arg>
</arguments>
<msg timestamp="20171101 16:09:53.142" level="INFO">overload-protection                     disabled</msg>
<status status="PASS" endtime="20171101 16:09:53.142" starttime="20171101 16:09:53.142"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>dns-domain example.demo</arg>
</arguments>
<msg timestamp="20171101 16:09:53.142" level="INFO">last-modified-by                        admin@172.18.0.60</msg>
<status status="PASS" endtime="20171101 16:09:53.142" starttime="20171101 16:09:53.142"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>add-hip-ip ${IP2}</arg>
</arguments>
<msg timestamp="20171101 16:09:53.158" level="INFO">last-modified-date                      2017-11-01 16:06:26</msg>
<status status="PASS" endtime="20171101 16:09:53.158" starttime="20171101 16:09:53.142"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>add-icmp-ip ${IP2}</arg>
</arguments>
<status status="PASS" endtime="20171101 16:09:53.158" starttime="20171101 16:09:53.158"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>done</arg>
</arguments>
<msg timestamp="20171101 16:09:53.158" level="INFO">(phy-interface)# name in</msg>
<status status="PASS" endtime="20171101 16:09:53.158" starttime="20171101 16:09:53.158"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5</arg>
</arguments>
<msg timestamp="20171101 16:09:58.165" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20171101 16:09:58.165" starttime="20171101 16:09:53.158"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>name in</arg>
</arguments>
<msg timestamp="20171101 16:09:58.165" level="INFO">(phy-interface)# operation-type Media</msg>
<status status="PASS" endtime="20171101 16:09:58.165" starttime="20171101 16:09:58.165"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>description toCSM</arg>
</arguments>
<msg timestamp="20171101 16:09:58.165" level="INFO">(phy-interface)# slot 1</msg>
<status status="PASS" endtime="20171101 16:09:58.165" starttime="20171101 16:09:58.165"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>ip-address ${IP1}</arg>
</arguments>
<msg timestamp="20171101 16:09:58.165" level="INFO">(phy-interface)# done</msg>
<status status="PASS" endtime="20171101 16:09:58.165" starttime="20171101 16:09:58.165"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>netmask 255.255.255.0</arg>
</arguments>
<msg timestamp="20171101 16:09:58.165" level="INFO">phy-interface</msg>
<status status="PASS" endtime="20171101 16:09:58.165" starttime="20171101 16:09:58.165"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>gateway ${GATEWAY IP}</arg>
</arguments>
<msg timestamp="20171101 16:09:58.165" level="INFO">name                                    in</msg>
<status status="PASS" endtime="20171101 16:09:58.165" starttime="20171101 16:09:58.165"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>dns-ip-primary ${DNS IP}</arg>
</arguments>
<msg timestamp="20171101 16:09:58.165" level="INFO">operation-type                          Media</msg>
<status status="PASS" endtime="20171101 16:09:58.165" starttime="20171101 16:09:58.165"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>dns-domain example.demo</arg>
</arguments>
<msg timestamp="20171101 16:09:58.165" level="INFO">port                                    0</msg>
<status status="PASS" endtime="20171101 16:09:58.165" starttime="20171101 16:09:58.165"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>add-hip-ip ${IP1}</arg>
</arguments>
<msg timestamp="20171101 16:09:58.165" level="INFO">slot                                    1</msg>
<status status="PASS" endtime="20171101 16:09:58.165" starttime="20171101 16:09:58.165"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>add-icmp-ip ${IP1}</arg>
</arguments>
<msg timestamp="20171101 16:09:58.165" level="INFO">virtual-mac</msg>
<status status="PASS" endtime="20171101 16:09:58.165" starttime="20171101 16:09:58.165"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>signaling-mtu 1000</arg>
</arguments>
<msg timestamp="20171101 16:09:58.165" level="INFO">admin-state                             enabled</msg>
<status status="PASS" endtime="20171101 16:09:58.165" starttime="20171101 16:09:58.165"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>done</arg>
</arguments>
<msg timestamp="20171101 16:09:58.165" level="INFO">auto-negotiation                        enabled</msg>
<status status="PASS" endtime="20171101 16:09:58.165" starttime="20171101 16:09:58.165"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10</arg>
</arguments>
<msg timestamp="20171101 16:10:08.165" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20171101 16:10:08.165" starttime="20171101 16:09:58.165"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>exit</arg>
</arguments>
<msg timestamp="20171101 16:10:08.165" level="INFO">duplex-mode                             FULL</msg>
<status status="PASS" endtime="20171101 16:10:08.165" starttime="20171101 16:10:08.165"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>system-config</arg>
</arguments>
<msg timestamp="20171101 16:10:08.165" level="INFO">speed                                   100</msg>
<status status="PASS" endtime="20171101 16:10:08.165" starttime="20171101 16:10:08.165"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>hostname sbc</arg>
</arguments>
<msg timestamp="20171101 16:10:08.165" level="INFO">wancom-health-score                     50</msg>
<status status="PASS" endtime="20171101 16:10:08.165" starttime="20171101 16:10:08.165"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>description Oracle-SBC</arg>
</arguments>
<msg timestamp="20171101 16:10:08.165" level="INFO">overload-protection                     disabled</msg>
<status status="PASS" endtime="20171101 16:10:08.165" starttime="20171101 16:10:08.165"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>default-gateway ${DEFAULT-GATEWAY}</arg>
</arguments>
<msg timestamp="20171101 16:10:08.181" level="INFO">last-modified-by                        admin@172.18.0.60</msg>
<status status="PASS" endtime="20171101 16:10:08.181" starttime="20171101 16:10:08.165"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>done</arg>
</arguments>
<msg timestamp="20171101 16:10:08.181" level="INFO">last-modified-date                      2017-11-01 16:06:28</msg>
<status status="PASS" endtime="20171101 16:10:08.181" starttime="20171101 16:10:08.181"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5</arg>
</arguments>
<msg timestamp="20171101 16:10:13.189" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20171101 16:10:13.189" starttime="20171101 16:10:08.181"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>exit</arg>
</arguments>
<status status="PASS" endtime="20171101 16:10:13.189" starttime="20171101 16:10:13.189"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>exit</arg>
</arguments>
<msg timestamp="20171101 16:10:13.189" level="INFO">(phy-interface)# exit</msg>
<status status="PASS" endtime="20171101 16:10:13.189" starttime="20171101 16:10:13.189"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>session-router</arg>
</arguments>
<msg timestamp="20171101 16:10:13.189" level="INFO">(system)# network-interface</msg>
<status status="PASS" endtime="20171101 16:10:13.189" starttime="20171101 16:10:13.189"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>sip-config</arg>
</arguments>
<msg timestamp="20171101 16:10:13.189" level="INFO">(network-interface)# name ext</msg>
<status status="PASS" endtime="20171101 16:10:13.189" starttime="20171101 16:10:13.189"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>state enabled</arg>
</arguments>
<msg timestamp="20171101 16:10:13.189" level="INFO">(network-interface)# sub-port-id 0</msg>
<status status="PASS" endtime="20171101 16:10:13.189" starttime="20171101 16:10:13.189"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>home-realm-id csm</arg>
</arguments>
<msg timestamp="20171101 16:10:13.189" level="INFO">(network-interface)# description toEPC</msg>
<status status="PASS" endtime="20171101 16:10:13.189" starttime="20171101 16:10:13.189"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>registrar-domain *</arg>
</arguments>
<msg timestamp="20171101 16:10:13.205" level="INFO">(network-interface)# ip-address 10.80.1.152</msg>
<status status="PASS" endtime="20171101 16:10:13.205" starttime="20171101 16:10:13.189"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>registrar-host *</arg>
</arguments>
<msg timestamp="20171101 16:10:13.205" level="INFO">(network-interface)# netmask 255.255.255.0</msg>
<status status="PASS" endtime="20171101 16:10:13.205" starttime="20171101 16:10:13.205"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>registrar-port 5060</arg>
</arguments>
<msg timestamp="20171101 16:10:13.205" level="INFO">(network-interface)# gateway 10.80.1.1</msg>
<status status="PASS" endtime="20171101 16:10:13.205" starttime="20171101 16:10:13.205"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>options +force-unregistration</arg>
</arguments>
<msg timestamp="20171101 16:10:13.205" level="INFO">(network-interface)# dns-ip-primary 10.80.1.134</msg>
<status status="PASS" endtime="20171101 16:10:13.205" starttime="20171101 16:10:13.205"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>options +max-udp-length=0</arg>
</arguments>
<msg timestamp="20171101 16:10:13.205" level="INFO">(network-interface)# dns-domain example.demo</msg>
<status status="PASS" endtime="20171101 16:10:13.205" starttime="20171101 16:10:13.205"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>done</arg>
</arguments>
<msg timestamp="20171101 16:10:13.205" level="INFO">(network-interface)# add-hip-ip 10.80.1.152</msg>
<status status="PASS" endtime="20171101 16:10:13.205" starttime="20171101 16:10:13.205"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>exit</arg>
</arguments>
<msg timestamp="20171101 16:10:13.205" level="INFO">(network-interface)# add-icmp-ip 10.80.1.152</msg>
<status status="PASS" endtime="20171101 16:10:13.220" starttime="20171101 16:10:13.205"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>sip-interface</arg>
</arguments>
<msg timestamp="20171101 16:10:13.220" level="INFO">(network-interface)# done</msg>
<status status="PASS" endtime="20171101 16:10:13.220" starttime="20171101 16:10:13.220"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>state enabled</arg>
</arguments>
<msg timestamp="20171101 16:10:13.220" level="INFO">network-interface</msg>
<status status="PASS" endtime="20171101 16:10:13.220" starttime="20171101 16:10:13.220"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>realm-id epc</arg>
</arguments>
<msg timestamp="20171101 16:10:13.220" level="INFO">name                                    ext</msg>
<status status="PASS" endtime="20171101 16:10:13.220" starttime="20171101 16:10:13.220"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>description EPC-&gt;SBC</arg>
</arguments>
<msg timestamp="20171101 16:10:13.220" level="INFO">sub-port-id                             0</msg>
<status status="PASS" endtime="20171101 16:10:13.220" starttime="20171101 16:10:13.220"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>sip-ims-feature enabled</arg>
</arguments>
<msg timestamp="20171101 16:10:13.220" level="INFO">description                             toEPC</msg>
<status status="PASS" endtime="20171101 16:10:13.220" starttime="20171101 16:10:13.220"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>proxy-mode proxy</arg>
</arguments>
<msg timestamp="20171101 16:10:13.220" level="INFO">hostname</msg>
<status status="PASS" endtime="20171101 16:10:13.220" starttime="20171101 16:10:13.220"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>registration-caching enabled</arg>
</arguments>
<msg timestamp="20171101 16:10:13.220" level="INFO">ip-address                              10.80.1.152</msg>
<status status="PASS" endtime="20171101 16:10:13.220" starttime="20171101 16:10:13.220"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>route-to-registrar enabled</arg>
</arguments>
<msg timestamp="20171101 16:10:13.220" level="INFO">pri-utility-addr</msg>
<status status="PASS" endtime="20171101 16:10:13.220" starttime="20171101 16:10:13.220"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>network-id example.demo</arg>
</arguments>
<msg timestamp="20171101 16:10:13.220" level="INFO">sec-utility-addr</msg>
<status status="PASS" endtime="20171101 16:10:13.220" starttime="20171101 16:10:13.220"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>sip-ports</arg>
</arguments>
<msg timestamp="20171101 16:10:13.220" level="INFO">netmask                                 255.255.255.0</msg>
<status status="PASS" endtime="20171101 16:10:13.220" starttime="20171101 16:10:13.220"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>address ${IP2}</arg>
</arguments>
<msg timestamp="20171101 16:10:13.220" level="INFO">gateway                                 10.80.1.1</msg>
<status status="PASS" endtime="20171101 16:10:13.220" starttime="20171101 16:10:13.220"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>done</arg>
</arguments>
<msg timestamp="20171101 16:10:13.220" level="INFO">sec-gateway</msg>
<status status="PASS" endtime="20171101 16:10:13.220" starttime="20171101 16:10:13.220"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>exit</arg>
</arguments>
<msg timestamp="20171101 16:10:13.220" level="INFO">gw-heartbeat</msg>
<status status="PASS" endtime="20171101 16:10:13.220" starttime="20171101 16:10:13.220"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>done</arg>
</arguments>
<msg timestamp="20171101 16:10:13.236" level="INFO">state                                   disabled</msg>
<status status="PASS" endtime="20171101 16:10:13.236" starttime="20171101 16:10:13.236"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>state enabled</arg>
</arguments>
<msg timestamp="20171101 16:10:13.236" level="INFO">heartbeat                               0</msg>
<status status="PASS" endtime="20171101 16:10:13.236" starttime="20171101 16:10:13.236"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>realm-id csm</arg>
</arguments>
<msg timestamp="20171101 16:10:13.236" level="INFO">retry-count                             0</msg>
<status status="PASS" endtime="20171101 16:10:13.236" starttime="20171101 16:10:13.236"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>description SBC-&gt;CSM</arg>
</arguments>
<msg timestamp="20171101 16:10:13.236" level="INFO">retry-timeout                           1</msg>
<status status="PASS" endtime="20171101 16:10:13.236" starttime="20171101 16:10:13.236"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>sip-ims-feature enabled</arg>
</arguments>
<msg timestamp="20171101 16:10:13.236" level="INFO">health-score                            0</msg>
<status status="PASS" endtime="20171101 16:10:13.236" starttime="20171101 16:10:13.236"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>write</arg>
<arg>proxy-mode</arg>
</arguments>
<status status="PASS" endtime="20171101 16:10:13.236" starttime="20171101 16:10:13.236"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>write</arg>
<arg>registration-caching disabled</arg>
</arguments>
<status status="PASS" endtime="20171101 16:10:13.236" starttime="20171101 16:10:13.236"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>write</arg>
<arg>route-to-registrar disabled</arg>
</arguments>
<status status="PASS" endtime="20171101 16:10:13.236" starttime="20171101 16:10:13.236"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>sip-ports</arg>
</arguments>
<msg timestamp="20171101 16:10:13.236" level="INFO">dns-ip-primary                          10.80.1.134</msg>
<status status="PASS" endtime="20171101 16:10:13.236" starttime="20171101 16:10:13.236"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>address ${IP1}</arg>
</arguments>
<msg timestamp="20171101 16:10:13.236" level="INFO">dns-ip-backup1</msg>
<status status="PASS" endtime="20171101 16:10:13.236" starttime="20171101 16:10:13.236"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>done</arg>
</arguments>
<msg timestamp="20171101 16:10:13.236" level="INFO">dns-ip-backup2</msg>
<status status="PASS" endtime="20171101 16:10:13.236" starttime="20171101 16:10:13.236"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5</arg>
</arguments>
<msg timestamp="20171101 16:10:18.245" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20171101 16:10:18.245" starttime="20171101 16:10:13.236"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>exit</arg>
</arguments>
<msg timestamp="20171101 16:10:18.245" level="INFO">dns-domain                              example.demo</msg>
<status status="PASS" endtime="20171101 16:10:18.245" starttime="20171101 16:10:18.245"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<msg timestamp="20171101 16:10:18.245" level="INFO">dns-timeout                             11
        dns-max-ttl                             86400
        signaling-mtu                           0
        hip-ip-list                             10.80.1.152
        ftp-address                             
        icmp-address                            10.80.1.152
        snmp-address                            
        telnet-address                          
        ssh-address                             
        last-modified-by                        admin@172.18.0.60
        last-modified-date                      2017-11-01 16:06:30

(network-interface)# name in
(network-interface)# description toCSM
(network-interface)# ip-address 10.80.1.150
(network-interface)# netmask 255.255.255.0
(network-interface)# gateway 10.80.1.1
(network-interface)# dns-ip-primary 10.80.1.134
(network-interface)# dns-domain example.demo
(network-interface)# add-hip-ip 10.80.1.150
(network-interface)# add-icmp-ip 10.80.1.150
(network-interface)# signaling-mtu 1000
(network-interface)# done
network-interface
        name                                    in
        sub-port-id                             0
        description                             toCSM
        hostname                                
        ip-address                              10.80.1.150
        pri-utility-addr                        
        sec-utility-addr                        
        netmask                                 255.255.255.0
        gateway                                 10.80.1.1
        sec-gateway                             
        gw-heartbeat
                state                                   disabled
                heartbeat                               0
                retry-count                             0
                retry-timeout                           1
                health-score                            0
        dns-ip-primary                          10.80.1.134
        dns-ip-backup1                          
        dns-ip-backup2                          
        dns-domain                              example.demo
        dns-timeout                             11
        dns-max-ttl                             86400
        signaling-mtu                           1000
        hip-ip-list                             10.80.1.150
        ftp-address                             
        icmp-address                            10.80.1.150
        snmp-address                            
        telnet-address                          
        ssh-address                             
        last-modified-by                        admin@172.18.0.60
        last-modified-date                      2017-11-01 16:06:35

(network-interface)# exit
(system)# system-config
(system-config)# hostname sbc
(system-config)# description Oracle-SBC
(system-config)# default-gateway 172.18.0.1
(system-config)# done
system-config
        hostname                                sbc
        description                             Oracle-SBC
        location                                
        mib-system-contact                      
        mib-system-name                         
        mib-system-location                     
        acp-tls-profile                         
        snmp-enabled                            enabled
        enable-snmp-auth-traps                  disabled
        enable-snmp-syslog-notify               disabled
        enable-snmp-monitor-traps               disabled
        enable-env-monitor-traps                disabled
        enable-mblk_tracking                    disabled
        snmp-syslog-his-table-length            1
        snmp-syslog-level                       WARNING
        system-log-level                        WARNING
        process-log-level                       NOTICE
        process-log-ip-address                  0.0.0.0
        process-log-port                        0
        collect
                sample-interval                         5
                push-interval                           15
                boot-state                              disabled
                start-time                              now
                end-time                                never
                red-collect-state                       disabled
                red-max-trans                           1000
                red-sync-start-time                     5000
                red-sync-comp-time                      1000
                push-success-trap-state                 disabled
        comm-monitor
                state                                   disabled
                sbc-grp-id                              0
                tls-profile                             
                qos-enable                              enabled
        call-trace                              disabled
        internal-trace                          disabled
        log-filter                              all
        default-gateway                         172.18.0.1
        restart                                 enabled
        exceptions                              
        telnet                                  disabled
        telnet-timeout                          0
        console-timeout                         0
        remote-control                          enabled
        cli-audit-trail                         enabled
        link-redundancy-state                   disabled
        source-routing                          disabled
        cli-more                                disabled
        terminal-height                         24
        debug-timeout                           0
        trap-event-lifetime                     0
        ids-syslog-facility                     -1
        options                                 
        default-v6-gateway                      ::
        ipv4-signaling-mtu                      1500
        cleanup-time-of-day                     00:00
        snmp-engine-id-suffix                   
        snmp-agent-mode                         v1v2
        forwarding-cores                        1
        dos-cores                               0
        transcoding-cores                       0
        last-modified-by                        admin@172.18.0.60
        last-modified-date                      2017-11-01 16:06:45

(system-config)# exit
(system)# exit
(configure)# session-router
(session-router)# sip-config
(sip-config)# state enabled
(sip-config)# home-realm-id csm
(sip-config)# registrar-domain *
(sip-config)# registrar-host *
(sip-config)# registrar-port 5060
(sip-config)# options +force-unregistration
(sip-config)# options +max-udp-length=0
(sip-config)# done
sip-config
        state                                   enabled
        operation-mode                          dialog
        dialog-transparency                     enabled
        home-realm-id                           csm
        egress-realm-id                         
        auto-realm-id                           
        nat-mode                                None
        registrar-domain                        *
        registrar-host                          *
        registrar-port                          5060
        register-service-route                  always
        init-timer                              500
        max-timer                               4000
        trans-expire                            32
        initial-inv-trans-expire                0
        invite-expire                           180
        session-max-life-limit                  0
        inactive-dynamic-conn                   32
        enforcement-profile                     
        pac-method                              
        pac-interval                            10
        pac-strategy                            PropDist
        pac-load-weight                         1
        pac-session-weight                      1
        pac-route-weight                        1
        pac-callid-lifetime                     600
        pac-user-lifetime                       3600
        red-sip-port                            1988
        red-max-trans                           10000
        red-sync-start-time                     5000
        red-sync-comp-time                      1000
        options                                 force-unregistration
                                                max-udp-length=0
        add-reason-header                       disabled
        sip-message-len                         4096
        enum-sag-match                          disabled
        extra-method-stats                      disabled
        extra-enum-stats                        disabled
        rph-feature                             disabled
        nsep-user-sessions-rate                 0
        nsep-sa-sessions-rate                   0
        registration-cache-limit                0
        register-use-to-for-lp                  disabled
        refer-src-routing                       disabled
        add-ucid-header                         disabled
        proxy-sub-events                        
        allow-pani-for-trusted-only             disabled
        atcf-stn-sr                             
        atcf-psi-dn                             
        atcf-route-to-sccas                     disabled
        eatf-stn-sr                             
        pass-gruu-contact                       disabled
        sag-lookup-on-redirect                  disabled
        set-disconnect-time-on-bye              disabled
        msrp-delayed-bye-timer                  15
        transcoding-realm                       
        transcoding-agents                      
        create-dynamic-sa                       disabled
        node-functionality                      P-CSCF
        match-sip-instance                      disabled
        sa-routes-stats                         disabled
        sa-routes-traps                         disabled
        rx-sip-reason-mapping                   disabled
        add-ue-location-in-pani                 disabled
        hold-emergency-calls-for-loc-info       0
        retry-after-upon-offline                0
        reg-reject-response-upon-offline        503
        hold-invite-calls-for-loc-info          0
        cache-loc-info-expire                   32
        msg-hold-for-loc-info                   0
        npli-upon-register                      disabled
        last-modified-by                        admin@172.18.0.60
        last-modified-date                      2017-11-01 16:06:50

(sip-config)# exit
(session-router)# sip-interface
(sip-interface)# state enabled
(sip-interface)# realm-id epc
(sip-interface)# description EPC-&gt;SBC
(sip-interface)# sip-ims-feature enabled
(sip-interface)# proxy-mode proxy
(sip-interface)# registration-caching enabled
(sip-interface)# route-to-registrar enabled
(sip-interface)# network-id example.demo
(sip-interface)# sip-ports
(sip-port)# address 10.80.1.152
(sip-port)# done
sip-port
        address                                 10.80.1.152
        port                                    5060
        transport-protocol                      UDP
        tls-profile                             
        allow-anonymous                         all
        multi-home-addrs                        
        ims-aka-profile                         

(sip-port)# exit
(sip-interface)# done
sip-interface
        state                                   enabled
        realm-id                                epc
        description                             EPC-&gt;SBC
        sip-port
                address                                 10.80.1.152
                port                                    5060
                transport-protocol                      UDP
                tls-profile                             
                allow-anonymous                         all
                multi-home-addrs                        
                ims-aka-profile                         
        carriers                                
        trans-expire                            0
        initial-inv-trans-expire                0
        invite-expire                           0
        session-max-life-limit                  0
        max-redirect-contacts                   0
        proxy-mode                              Proxy
        redirect-action                         
        contact-mode                            none
        nat-traversal                           none
        nat-interval                            30
        tcp-nat-interval                        90
        registration-caching                    enabled
        min-reg-expire                          300
        registration-interval                   3600
        route-to-registrar                      enabled
        secured-network                         disabled
        teluri-scheme                           disabled
        uri-fqdn-domain                         
        options                                 
        spl-options                             
        trust-mode                              all
        max-nat-interval                        3600
        nat-int-increment                       10
        nat-test-increment                      30
        sip-dynamic-hnt                         disabled
        stop-recurse                            401,407
        port-map-start                          0
        port-map-end                            0
        in-manipulationid                       
        out-manipulationid                      
        sip-ims-feature                         enabled
        sip-atcf-feature                        disabled
        subscribe-reg-event                     disabled
        operator-identifier                     
        anonymous-priority                      none
        max-incoming-conns                      0
        per-src-ip-max-incoming-conns           0
        inactive-conn-timeout                   0
        untrusted-conn-timeout                  0
        network-id                              example.demo
        ext-policy-server                       
        ldap-policy-server                      
        default-location-string                 
        term-tgrp-mode                          none
        charging-vector-mode                    pass
        charging-function-address-mode          pass
        ccf-address                             
        ecf-address                             
        implicit-service-route                  disabled
        rfc2833-payload                         101
        rfc2833-mode                            transparent
        constraint-name                         
        response-map                            
        local-response-map                      
        sec-agree-feature                       disabled
        sec-agree-pref                          ipsec3gpp
        enforcement-profile                     
        route-unauthorized-calls                
        tcp-keepalive                           none
        add-sdp-invite                          disabled
        p-early-media-header                    disabled
        p-early-media-direction                 
        add-sdp-profiles                        
        manipulation-string                     
        manipulation-pattern                    
        sip-profile                             
        sip-isup-profile                        
        tcp-conn-dereg                          0
        tunnel-name                             
        register-keep-alive                     none
        kpml-interworking                       disabled
        msrp-delay-egress-bye                   disabled
        send-380-response                       
        pcscf-restoration                       
        session-timer-profile                   
        session-recording-server                
        session-recording-required              disabled
        service-tag                             
        reg-cache-route                         disabled
        diversion-info-mapping-mode             none
        atcf-icsi-match                         
        sip-recursion-policy                    
        last-modified-by                        admin@172.18.0.60
        last-modified-date                      2017-11-01 16:06:50

(sip-interface)# state enabled
(sip-interface)# realm-id csm
(sip-interface)# description SBC-&gt;CSM
(sip-interface)# sip-ims-feature enabled
(sip-interface)# sip-ports
(sip-port)# address 10.80.1.150
(sip-port)# done
sip-port
        address                                 10.80.1.150
        port                                    5060
        transport-protocol                      UDP
        tls-profile                             
        allow-anonymous                         all
        multi-home-addrs                        
        ims-aka-profile                         

(sip-port)#</msg>
<status status="PASS" endtime="20171101 16:10:18.245" starttime="20171101 16:10:18.245"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5</arg>
</arguments>
<msg timestamp="20171101 16:10:23.252" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20171101 16:10:23.252" starttime="20171101 16:10:18.245"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>exit</arg>
</arguments>
<msg timestamp="20171101 16:10:23.252" level="INFO">exit</msg>
<status status="PASS" endtime="20171101 16:10:23.252" starttime="20171101 16:10:23.252"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>Y</arg>
</arguments>
<msg timestamp="20171101 16:10:23.252" level="INFO">(sip-interface)# exit</msg>
<status status="PASS" endtime="20171101 16:10:23.252" starttime="20171101 16:10:23.252"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>session-agent</arg>
</arguments>
<msg timestamp="20171101 16:10:23.268" level="INFO">Save Changes [y/n]?: Y</msg>
<status status="PASS" endtime="20171101 16:10:23.268" starttime="20171101 16:10:23.252"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>hostname ${CSM IP}</arg>
</arguments>
<msg timestamp="20171101 16:10:23.268" level="INFO">sip-interface</msg>
<status status="PASS" endtime="20171101 16:10:23.268" starttime="20171101 16:10:23.268"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>ip-address ${CSM IP}</arg>
</arguments>
<msg timestamp="20171101 16:10:23.283" level="INFO">state                                   enabled</msg>
<status status="PASS" endtime="20171101 16:10:23.283" starttime="20171101 16:10:23.268"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>port 5060</arg>
</arguments>
<msg timestamp="20171101 16:10:23.283" level="INFO">realm-id                                csm</msg>
<status status="PASS" endtime="20171101 16:10:23.283" starttime="20171101 16:10:23.283"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>state enabled</arg>
</arguments>
<msg timestamp="20171101 16:10:23.283" level="INFO">description                             SBC-&gt;CSM</msg>
<status status="PASS" endtime="20171101 16:10:23.283" starttime="20171101 16:10:23.283"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>realm-id csm</arg>
</arguments>
<msg timestamp="20171101 16:10:23.283" level="INFO">sip-port</msg>
<status status="PASS" endtime="20171101 16:10:23.283" starttime="20171101 16:10:23.283"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>egress-realm-id</arg>
</arguments>
<msg timestamp="20171101 16:10:23.283" level="INFO">address                                 10.80.1.150</msg>
<status status="PASS" endtime="20171101 16:10:23.283" starttime="20171101 16:10:23.283"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>trust-me enabled</arg>
</arguments>
<msg timestamp="20171101 16:10:23.283" level="INFO">port                                    5060</msg>
<status status="PASS" endtime="20171101 16:10:23.283" starttime="20171101 16:10:23.283"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>done</arg>
</arguments>
<msg timestamp="20171101 16:10:23.299" level="INFO">transport-protocol                      UDP</msg>
<status status="PASS" endtime="20171101 16:10:23.299" starttime="20171101 16:10:23.299"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>exit</arg>
</arguments>
<msg timestamp="20171101 16:10:23.299" level="INFO">tls-profile</msg>
<status status="PASS" endtime="20171101 16:10:23.299" starttime="20171101 16:10:23.299"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>local-policy</arg>
</arguments>
<msg timestamp="20171101 16:10:23.299" level="INFO">allow-anonymous                         all</msg>
<status status="PASS" endtime="20171101 16:10:23.299" starttime="20171101 16:10:23.299"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>from-address *</arg>
</arguments>
<msg timestamp="20171101 16:10:23.299" level="INFO">multi-home-addrs</msg>
<status status="PASS" endtime="20171101 16:10:23.299" starttime="20171101 16:10:23.299"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>to-address *</arg>
</arguments>
<msg timestamp="20171101 16:10:23.299" level="INFO">ims-aka-profile</msg>
<status status="PASS" endtime="20171101 16:10:23.299" starttime="20171101 16:10:23.299"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>source-realm epc</arg>
</arguments>
<msg timestamp="20171101 16:10:23.299" level="INFO">carriers</msg>
<status status="PASS" endtime="20171101 16:10:23.299" starttime="20171101 16:10:23.299"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>description EPC-&gt;SBC-&gt;CSM</arg>
</arguments>
<msg timestamp="20171101 16:10:23.299" level="INFO">trans-expire                            0</msg>
<status status="PASS" endtime="20171101 16:10:23.299" starttime="20171101 16:10:23.299"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>policy-attributes</arg>
</arguments>
<msg timestamp="20171101 16:10:23.299" level="INFO">initial-inv-trans-expire                0</msg>
<status status="PASS" endtime="20171101 16:10:23.299" starttime="20171101 16:10:23.299"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>next-hop ${CSM IP}</arg>
</arguments>
<msg timestamp="20171101 16:10:23.299" level="INFO">invite-expire                           0</msg>
<status status="PASS" endtime="20171101 16:10:23.299" starttime="20171101 16:10:23.299"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>realm csm</arg>
</arguments>
<msg timestamp="20171101 16:10:23.299" level="INFO">session-max-life-limit                  0</msg>
<status status="PASS" endtime="20171101 16:10:23.299" starttime="20171101 16:10:23.299"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>state enabled</arg>
</arguments>
<msg timestamp="20171101 16:10:23.299" level="INFO">max-redirect-contacts                   0</msg>
<status status="PASS" endtime="20171101 16:10:23.299" starttime="20171101 16:10:23.299"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>done</arg>
</arguments>
<msg timestamp="20171101 16:10:23.299" level="INFO">proxy-mode</msg>
<status status="PASS" endtime="20171101 16:10:23.299" starttime="20171101 16:10:23.299"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>exit</arg>
</arguments>
<msg timestamp="20171101 16:10:23.299" level="INFO">redirect-action</msg>
<status status="PASS" endtime="20171101 16:10:23.299" starttime="20171101 16:10:23.299"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>4</arg>
</arguments>
<msg timestamp="20171101 16:10:27.326" level="INFO">Slept 4 seconds</msg>
<status status="PASS" endtime="20171101 16:10:27.326" starttime="20171101 16:10:23.315"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>exit</arg>
</arguments>
<msg timestamp="20171101 16:10:27.326" level="INFO">contact-mode                            none</msg>
<status status="PASS" endtime="20171101 16:10:27.326" starttime="20171101 16:10:27.326"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>4</arg>
</arguments>
<msg timestamp="20171101 16:10:31.336" level="INFO">Slept 4 seconds</msg>
<status status="PASS" endtime="20171101 16:10:31.336" starttime="20171101 16:10:27.326"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>y</arg>
</arguments>
<msg timestamp="20171101 16:10:31.336" level="INFO">nat-traversal                           none</msg>
<status status="PASS" endtime="20171101 16:10:31.336" starttime="20171101 16:10:31.336"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>3</arg>
</arguments>
<msg timestamp="20171101 16:10:34.347" level="INFO">Slept 3 seconds</msg>
<status status="PASS" endtime="20171101 16:10:34.347" starttime="20171101 16:10:31.336"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>exit</arg>
</arguments>
<msg timestamp="20171101 16:10:34.347" level="INFO">nat-interval                            30</msg>
<status status="PASS" endtime="20171101 16:10:34.347" starttime="20171101 16:10:34.347"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>media-manager</arg>
</arguments>
<msg timestamp="20171101 16:10:34.347" level="INFO">tcp-nat-interval                        90</msg>
<status status="PASS" endtime="20171101 16:10:34.347" starttime="20171101 16:10:34.347"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>realm-config</arg>
</arguments>
<msg timestamp="20171101 16:10:34.347" level="INFO">registration-caching                    disabled</msg>
<status status="PASS" endtime="20171101 16:10:34.347" starttime="20171101 16:10:34.347"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>identifier epc</arg>
</arguments>
<msg timestamp="20171101 16:10:34.347" level="INFO">min-reg-expire                          300</msg>
<status status="PASS" endtime="20171101 16:10:34.347" starttime="20171101 16:10:34.347"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>addr-prefix 0.0.0.0</arg>
</arguments>
<msg timestamp="20171101 16:10:34.347" level="INFO">registration-interval                   3600</msg>
<status status="PASS" endtime="20171101 16:10:34.347" starttime="20171101 16:10:34.347"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>network-interfaces ext:0</arg>
</arguments>
<msg timestamp="20171101 16:10:34.347" level="INFO">route-to-registrar                      disabled</msg>
<status status="PASS" endtime="20171101 16:10:34.347" starttime="20171101 16:10:34.347"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>done</arg>
</arguments>
<msg timestamp="20171101 16:10:34.347" level="INFO">secured-network                         disabled</msg>
<status status="PASS" endtime="20171101 16:10:34.347" starttime="20171101 16:10:34.347"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>identifier csm</arg>
</arguments>
<msg timestamp="20171101 16:10:34.347" level="INFO">teluri-scheme                           disabled</msg>
<status status="PASS" endtime="20171101 16:10:34.347" starttime="20171101 16:10:34.347"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>addr-prefix 0.0.0.0</arg>
</arguments>
<msg timestamp="20171101 16:10:34.347" level="INFO">uri-fqdn-domain</msg>
<status status="PASS" endtime="20171101 16:10:34.347" starttime="20171101 16:10:34.347"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>network-interfaces in:0</arg>
</arguments>
<msg timestamp="20171101 16:10:34.347" level="INFO">options</msg>
<status status="PASS" endtime="20171101 16:10:34.347" starttime="20171101 16:10:34.347"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>done</arg>
</arguments>
<msg timestamp="20171101 16:10:34.347" level="INFO">spl-options</msg>
<status status="PASS" endtime="20171101 16:10:34.347" starttime="20171101 16:10:34.347"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>exit</arg>
</arguments>
<msg timestamp="20171101 16:10:34.362" level="INFO">trust-mode                              all</msg>
<status status="PASS" endtime="20171101 16:10:34.362" starttime="20171101 16:10:34.347"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>steering-pool</arg>
</arguments>
<msg timestamp="20171101 16:10:34.362" level="INFO">max-nat-interval                        3600</msg>
<status status="PASS" endtime="20171101 16:10:34.362" starttime="20171101 16:10:34.362"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>ip-address ${IP2}</arg>
</arguments>
<msg timestamp="20171101 16:10:34.362" level="INFO">nat-int-increment                       10</msg>
<status status="PASS" endtime="20171101 16:10:34.362" starttime="20171101 16:10:34.362"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>start-port 10000</arg>
</arguments>
<msg timestamp="20171101 16:10:34.362" level="INFO">nat-test-increment                      30</msg>
<status status="PASS" endtime="20171101 16:10:34.362" starttime="20171101 16:10:34.362"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>end-port 29999</arg>
</arguments>
<msg timestamp="20171101 16:10:34.362" level="INFO">sip-dynamic-hnt                         disabled</msg>
<status status="PASS" endtime="20171101 16:10:34.362" starttime="20171101 16:10:34.362"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>realm-id epc</arg>
</arguments>
<msg timestamp="20171101 16:10:34.362" level="INFO">stop-recurse                            401,407</msg>
<status status="PASS" endtime="20171101 16:10:34.362" starttime="20171101 16:10:34.362"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>network-interface ext:0</arg>
</arguments>
<msg timestamp="20171101 16:10:34.362" level="INFO">port-map-start                          0</msg>
<status status="PASS" endtime="20171101 16:10:34.362" starttime="20171101 16:10:34.362"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>done</arg>
</arguments>
<msg timestamp="20171101 16:10:34.362" level="INFO">port-map-end                            0</msg>
<status status="PASS" endtime="20171101 16:10:34.362" starttime="20171101 16:10:34.362"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>ip-address ${IP1}</arg>
</arguments>
<msg timestamp="20171101 16:10:34.362" level="INFO">in-manipulationid</msg>
<status status="PASS" endtime="20171101 16:10:34.362" starttime="20171101 16:10:34.362"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>start-port 30000</arg>
</arguments>
<msg timestamp="20171101 16:10:34.362" level="INFO">out-manipulationid</msg>
<status status="PASS" endtime="20171101 16:10:34.362" starttime="20171101 16:10:34.362"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>end-port 49999</arg>
</arguments>
<msg timestamp="20171101 16:10:34.378" level="INFO">sip-ims-feature                         enabled</msg>
<status status="PASS" endtime="20171101 16:10:34.378" starttime="20171101 16:10:34.362"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>realm-id csm</arg>
</arguments>
<msg timestamp="20171101 16:10:34.378" level="INFO">sip-atcf-feature                        disabled</msg>
<status status="PASS" endtime="20171101 16:10:34.378" starttime="20171101 16:10:34.378"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>network-interface in:0</arg>
</arguments>
<msg timestamp="20171101 16:10:34.378" level="INFO">subscribe-reg-event                     disabled</msg>
<status status="PASS" endtime="20171101 16:10:34.378" starttime="20171101 16:10:34.378"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>done</arg>
</arguments>
<msg timestamp="20171101 16:10:34.378" level="INFO">operator-identifier</msg>
<status status="PASS" endtime="20171101 16:10:34.378" starttime="20171101 16:10:34.378"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>exit</arg>
</arguments>
<msg timestamp="20171101 16:10:34.378" level="INFO">anonymous-priority                      none</msg>
<status status="PASS" endtime="20171101 16:10:34.378" starttime="20171101 16:10:34.378"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<msg timestamp="20171101 16:10:34.378" level="INFO">max-incoming-conns                      0
        per-src-ip-max-incoming-conns           0
        inactive-conn-timeout                   0
        untrusted-conn-timeout                  0
        network-id                              
        ext-policy-server                       
        ldap-policy-server                      
        default-location-string                 
        term-tgrp-mode                          none
        charging-vector-mode                    pass
        charging-function-address-mode          pass
        ccf-address                             
        ecf-address                             
        implicit-service-route                  disabled
        rfc2833-payload                         101
        rfc2833-mode                            transparent
        constraint-name                         
        response-map                            
        local-response-map                      
        sec-agree-feature                       disabled
        sec-agree-pref                          ipsec3gpp
        enforcement-profile                     
        route-unauthorized-calls                
        tcp-keepalive                           none
        add-sdp-invite                          disabled
        p-early-media-header                    disabled
        p-early-media-direction                 
        add-sdp-profiles                        
        manipulation-string                     
        manipulation-pattern                    
        sip-profile                             
        sip-isup-profile                        
        tcp-conn-dereg                          0
        tunnel-name                             
        register-keep-alive                     none
        kpml-interworking                       disabled
        msrp-delay-egress-bye                   disabled
        send-380-response                       
        pcscf-restoration                       
        session-timer-profile                   
        session-recording-server                
        session-recording-required              disabled
        service-tag                             
        reg-cache-route                         disabled
        diversion-info-mapping-mode             none
        atcf-icsi-match                         
        sip-recursion-policy                    
        last-modified-by                        admin@172.18.0.60
        last-modified-date                      2017-11-01 16:07:00

(session-router)# session-agent
(session-agent)# hostname 10.80.1.211
(session-agent)# ip-address 10.80.1.211
(session-agent)# port 5060
(session-agent)# state enabled
(session-agent)# realm-id csm
(session-agent)# egress-realm-id
% Invalid number of arguments
(session-agent)# trust-me enabled
(session-agent)# done
session-agent
        hostname                                10.80.1.211
        ip-address                              10.80.1.211
        port                                    5060
        state                                   enabled
        app-protocol                            SIP
        app-type                                
        transport-method                        UDP
        realm-id                                csm
        egress-realm-id                         
        description                             
        carriers                                
        allow-next-hop-lp                       enabled
        constraints                             disabled
        max-sessions                            0
        max-inbound-sessions                    0
        max-outbound-sessions                   0
        max-burst-rate                          0
        max-inbound-burst-rate                  0
        max-outbound-burst-rate                 0
        max-sustain-rate                        0
        max-inbound-sustain-rate                0
        max-outbound-sustain-rate               0
        min-seizures                            5
        min-asr                                 0
        session-max-life-limit                  0
        time-to-resume                          0
        ttr-no-response                         0
        in-service-period                       0
        burst-rate-window                       0
        sustain-rate-window                     0
        req-uri-carrier-mode                    None
        proxy-mode                              
        redirect-action                         
        loose-routing                           enabled
        send-media-session                      enabled
        response-map                            
        ping-method                             
        ping-interval                           0
        ping-send-mode                          keep-alive
        ping-all-addresses                      disabled
        ping-in-service-response-codes          
        out-service-response-codes              
        load-balance-dns-query                  hunt
        options                                 
        spl-options                             
        media-profiles                          
        in-translationid                        
        out-translationid                       
        trust-me                                enabled
        request-uri-headers                     
        stop-recurse                            
        local-response-map                      
        ping-to-user-part                       
        ping-from-user-part                     
        in-manipulationid                       
        out-manipulationid                      
        manipulation-string                     
        manipulation-pattern                    
        p-asserted-id                           
        trunk-group                             
        max-register-sustain-rate               0
        early-media-allow                       
        invalidate-registrations                disabled
        rfc2833-mode                            none
        rfc2833-payload                         0
        codec-policy                            
        enforcement-profile                     
        refer-call-transfer                     disabled
        refer-notify-provisional                none
        reuse-connections                       NONE
        tcp-keepalive                           none
        tcp-reconn-interval                     0
        max-register-burst-rate                 0
        register-burst-window                   0
        sip-profile                             
        sip-isup-profile                        
        kpml-interworking                       inherit
        precedence                              0
        monitoring-filters                      
        session-recording-server                
        session-recording-required              disabled
        hold-refer-reinvite                     disabled
        send-tcp-fin                            disabled
        sip-recursion-policy                    
        last-modified-by                        admin@172.18.0.60
        last-modified-date                      2017-11-01 16:07:00

(session-agent)# exit
(session-router)# local-policy
(local-policy)# from-address *
(local-policy)# to-address *
(local-policy)# source-realm epc
(local-policy)# description EPC-&gt;SBC-&gt;CSM
(local-policy)# policy-attributes
(local-policy-attributes)# next-hop 10.80.1.211
(local-policy-attributes)# realm csm
(local-policy-attributes)# state enabled
(local-policy-attributes)# done
policy-attribute
        next-hop                                10.80.1.211
        realm                                   csm
        action                                  none
        terminate-recursion                     disabled
        carrier                                 
        start-time                              0000
        end-time                                2400
        days-of-week                            U-S
        cost                                    0
        state                                   enabled
        app-protocol                            
        methods                                 
        media-profiles                          
        lookup                                  single
        next-key                                
        eloc-str-lkup                           disabled
        eloc-str-match                          

(local-policy-attributes)# exit
(local-policy)# exit
Save Changes [y/n]?: y
local-policy
        from-address                            *
        to-address                              *
        source-realm                            epc
        description                             EPC-&gt;SBC-&gt;CSM
        activate-time                           
        deactivate-time                         
        state                                   enabled
        policy-priority                         none
        policy-attribute
                next-hop                                10.80.1.211
                realm                                   csm
                action                                  none
                terminate-recursion                     disabled
                carrier                                 
                start-time                              0000
                end-time                                2400
                days-of-week                            U-S
                cost                                    0
                state                                   enabled
                app-protocol                            
                methods                                 
                media-profiles                          
                lookup                                  single
                next-key                                
                eloc-str-lkup                           disabled
                eloc-str-match                          
        last-modified-by                        admin@172.18.0.60
        last-modified-date                      2017-11-01 16:07:08

(session-router)#</msg>
<status status="PASS" endtime="20171101 16:10:34.378" starttime="20171101 16:10:34.378"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>media-manager</arg>
</arguments>
<msg timestamp="20171101 16:10:34.378" level="INFO">exit</msg>
<status status="PASS" endtime="20171101 16:10:34.378" starttime="20171101 16:10:34.378"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>state enabled</arg>
</arguments>
<msg timestamp="20171101 16:10:34.378" level="INFO">(configure)# media-manager</msg>
<status status="PASS" endtime="20171101 16:10:34.378" starttime="20171101 16:10:34.378"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>latching enabled</arg>
</arguments>
<msg timestamp="20171101 16:10:34.378" level="INFO">(media-manager)# realm-config</msg>
<status status="PASS" endtime="20171101 16:10:34.378" starttime="20171101 16:10:34.378"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>initial-guard-timer 300</arg>
</arguments>
<msg timestamp="20171101 16:10:34.378" level="INFO">(realm-config)# identifier epc</msg>
<status status="PASS" endtime="20171101 16:10:34.378" starttime="20171101 16:10:34.378"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>flow-time-limit 86400</arg>
</arguments>
<msg timestamp="20171101 16:10:34.394" level="INFO">(realm-config)# addr-prefix 0.0.0.0</msg>
<status status="PASS" endtime="20171101 16:10:34.394" starttime="20171101 16:10:34.378"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>subsq-guard-timer 300</arg>
</arguments>
<msg timestamp="20171101 16:10:34.394" level="INFO">(realm-config)# network-interfaces ext:0</msg>
<status status="PASS" endtime="20171101 16:10:34.394" starttime="20171101 16:10:34.394"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>tcp-flow-time-limit 86400</arg>
</arguments>
<msg timestamp="20171101 16:10:34.394" level="INFO">(realm-config)# done</msg>
<status status="PASS" endtime="20171101 16:10:34.394" starttime="20171101 16:10:34.394"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>tcp-initial-guard-timer 300</arg>
</arguments>
<msg timestamp="20171101 16:10:34.394" level="INFO">realm-config</msg>
<status status="PASS" endtime="20171101 16:10:34.394" starttime="20171101 16:10:34.394"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>done</arg>
</arguments>
<msg timestamp="20171101 16:10:34.394" level="INFO">identifier                              epc</msg>
<status status="PASS" endtime="20171101 16:10:34.394" starttime="20171101 16:10:34.394"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>exit</arg>
</arguments>
<msg timestamp="20171101 16:10:34.394" level="INFO">description</msg>
<status status="PASS" endtime="20171101 16:10:34.394" starttime="20171101 16:10:34.394"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>exit</arg>
</arguments>
<msg timestamp="20171101 16:10:34.394" level="INFO">addr-prefix                             0.0.0.0</msg>
<status status="PASS" endtime="20171101 16:10:34.394" starttime="20171101 16:10:34.394"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>exit</arg>
</arguments>
<msg timestamp="20171101 16:10:34.394" level="INFO">network-interfaces                      ext:0</msg>
<status status="PASS" endtime="20171101 16:10:34.394" starttime="20171101 16:10:34.394"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>save-config</arg>
</arguments>
<msg timestamp="20171101 16:10:34.394" level="INFO">mm-in-realm                             disabled</msg>
<status status="PASS" endtime="20171101 16:10:34.394" starttime="20171101 16:10:34.394"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20171101 16:10:36.406" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20171101 16:10:36.406" starttime="20171101 16:10:34.394"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>reboot activate</arg>
</arguments>
<msg timestamp="20171101 16:10:36.406" level="INFO">mm-in-network                           enabled</msg>
<status status="PASS" endtime="20171101 16:10:36.406" starttime="20171101 16:10:36.406"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>4</arg>
</arguments>
<msg timestamp="20171101 16:10:40.415" level="INFO">Slept 4 seconds</msg>
<status status="PASS" endtime="20171101 16:10:40.415" starttime="20171101 16:10:36.406"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>y</arg>
</arguments>
<msg timestamp="20171101 16:10:40.415" level="INFO">mm-same-ip                              enabled</msg>
<status status="PASS" endtime="20171101 16:10:40.415" starttime="20171101 16:10:40.415"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>**********Reboot Started**********</arg>
</arguments>
<msg timestamp="20171101 16:10:40.415" level="INFO">**********Reboot Started**********</msg>
<status status="PASS" endtime="20171101 16:10:40.415" starttime="20171101 16:10:40.415"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>50</arg>
</arguments>
<msg timestamp="20171101 16:11:30.418" level="INFO">Slept 50 seconds</msg>
<status status="PASS" endtime="20171101 16:11:30.418" starttime="20171101 16:10:40.415"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>**************** Configuration Completed ************</arg>
</arguments>
<msg timestamp="20171101 16:11:30.418" level="INFO">**************** Configuration Completed ************</msg>
<status status="PASS" endtime="20171101 16:11:30.418" starttime="20171101 16:11:30.418"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<msg timestamp="20171101 16:11:30.418" level="INFO">mm-in-system                            enabled
        bw-cac-non-mm                           disabled
        msm-release                             disabled
        qos-enable                              disabled
        max-bandwidth                           0
        fallback-bandwidth                      0
        max-priority-bandwidth                  0
        max-latency                             0
        max-jitter                              0
        max-packet-loss                         0
        observ-window-size                      0
        parent-realm                            
        dns-realm                               
        media-policy                            
        media-sec-policy                        
        srtp-msm-passthrough                    disabled
        class-profile                           
        in-translationid                        
        out-translationid                       
        in-manipulationid                       
        out-manipulationid                      
        average-rate-limit                      0
        access-control-trust-level              none
        invalid-signal-threshold                0
        maximum-signal-threshold                0
        untrusted-signal-threshold              0
        nat-trust-threshold                     0
        max-endpoints-per-nat                   0
        nat-invalid-message-threshold           0
        wait-time-for-invalid-register          0
        deny-period                             30
        session-max-life-limit                  0
        cac-failure-threshold                   0
        untrust-cac-failure-threshold           0
        ext-policy-svr                          
        diam-e2-address-realm                   
        subscription-id-type                    END_USER_NONE
        symmetric-latching                      disabled
        pai-strip                               disabled
        trunk-context                           
        device-id                               
        early-media-allow                       
        enforcement-profile                     
        additional-prefixes                     
        restricted-latching                     none
        restriction-mask                        32
        user-cac-mode                           none
        user-cac-bandwidth                      0
        user-cac-sessions                       0
        icmp-detect-multiplier                  0
        icmp-advertisement-interval             0
        icmp-target-ip                          
        monthly-minutes                         0
        options                                 
        spl-options                             
        accounting-enable                       enabled
        net-management-control                  disabled
        delay-media-update                      disabled
        refer-call-transfer                     disabled
        hold-refer-reinvite                     disabled
        refer-notify-provisional                none
        dyn-refer-term                          disabled
        codec-policy                            
        codec-manip-in-realm                    disabled
        codec-manip-in-network                  enabled
        rtcp-policy                             
        constraint-name                         
        session-recording-server                
        session-recording-required              disabled
        manipulation-string                     
        manipulation-pattern                    
        stun-enable                             disabled
        stun-server-ip                          0.0.0.0
        stun-server-port                        3478
        stun-changed-ip                         0.0.0.0
        stun-changed-port                       3479
        sip-profile                             
        flow-time-limit                         -1
        initial-guard-timer                     -1
        subsq-guard-timer                       -1
        tcp-flow-time-limit                     -1
        tcp-initial-guard-timer                 -1
        tcp-subsq-guard-timer                   -1
        sip-isup-profile                        
        match-media-profiles                    
        qos-constraint                          
        block-rtcp                              disabled
        hide-egress-media-update                disabled
        tcp-media-profile                       
        monitoring-filters                      
        node-functionality                      
        default-location-string                 
        alt-family-realm                        
        pref-addr-type                          none
        last-modified-by                        admin@172.18.0.60
        last-modified-date                      2017-11-01 16:07:11

(realm-config)# identifier csm
(realm-config)# addr-prefix 0.0.0.0
(realm-config)# network-interfaces in:0
(realm-config)# done
realm-config
        identifier                              csm
        description                             
        addr-prefix                             0.0.0.0
        network-interfaces                      in:0
        mm-in-realm                             disabled
        mm-in-network                           enabled
        mm-same-ip                              enabled
        mm-in-system                            enabled
        bw-cac-non-mm                           disabled
        msm-release                             disabled
        qos-enable                              disabled
        max-bandwidth                           0
        fallback-bandwidth                      0
        max-priority-bandwidth                  0
        max-latency                             0
        max-jitter                              0
        max-packet-loss                         0
        observ-window-size                      0
        parent-realm                            
        dns-realm                               
        media-policy                            
        media-sec-policy                        
        srtp-msm-passthrough                    disabled
        class-profile                           
        in-translationid                        
        out-translationid                       
        in-manipulationid                       
        out-manipulationid                      
        average-rate-limit                      0
        access-control-trust-level              none
        invalid-signal-threshold                0
        maximum-signal-threshold                0
        untrusted-signal-threshold              0
        nat-trust-threshold                     0
        max-endpoints-per-nat                   0
        nat-invalid-message-threshold           0
        wait-time-for-invalid-register          0
        deny-period                             30
        session-max-life-limit                  0
        cac-failure-threshold                   0
        untrust-cac-failure-threshold           0
        ext-policy-svr                          
        diam-e2-address-realm                   
        subscription-id-type                    END_USER_NONE
        symmetric-latching                      disabled
        pai-strip                               disabled
        trunk-context                           
        device-id                               
        early-media-allow                       
        enforcement-profile                     
        additional-prefixes                     
        restricted-latching                     none
        restriction-mask                        32
        user-cac-mode                           none
        user-cac-bandwidth                      0
        user-cac-sessions                       0
        icmp-detect-multiplier                  0
        icmp-advertisement-interval             0
        icmp-target-ip                          
        monthly-minutes                         0
        options                                 
        spl-options                             
        accounting-enable                       enabled
        net-management-control                  disabled
        delay-media-update                      disabled
        refer-call-transfer                     disabled
        hold-refer-reinvite                     disabled
        refer-notify-provisional                none
        dyn-refer-term                          disabled
        codec-policy                            
        codec-manip-in-realm                    disabled
        codec-manip-in-network                  enabled
        rtcp-policy                             
        constraint-name                         
        session-recording-server                
        session-recording-required              disabled
        manipulation-string                     
        manipulation-pattern                    
        stun-enable                             disabled
        stun-server-ip                          0.0.0.0
        stun-server-port                        3478
        stun-changed-ip                         0.0.0.0
        stun-changed-port                       3479
        sip-profile                             
        flow-time-limit                         -1
        initial-guard-timer                     -1
        subsq-guard-timer                       -1
        tcp-flow-time-limit                     -1
        tcp-initial-guard-timer                 -1
        tcp-subsq-guard-timer                   -1
        sip-isup-profile                        
        match-media-profiles                    
        qos-constraint                          
        block-rtcp                              disabled
        hide-egress-media-update                disabled
        tcp-media-profile                       
        monitoring-filters                      
        node-functionality                      
        default-location-string                 
        alt-family-realm                        
        pref-addr-type                          none
        last-modified-by                        admin@172.18.0.60
        last-modified-date                      2017-11-01 16:07:11

(realm-config)# exit
(media-manager)# steering-pool
(steering-pool)# ip-address 10.80.1.152
(steering-pool)# start-port 10000
(steering-pool)# end-port 29999
(steering-pool)# realm-id epc
(steering-pool)# network-interface ext:0
(steering-pool)# done
steering-pool
        ip-address                              10.80.1.152
        start-port                              10000
        end-port                                29999
        realm-id                                epc
        network-interface                       ext:0
        last-modified-by                        admin@172.18.0.60
        last-modified-date                      2017-11-01 16:07:11

(steering-pool)# ip-address 10.80.1.150
(steering-pool)# start-port 30000
(steering-pool)# end-port 49999
(steering-pool)# realm-id csm
(steering-pool)# network-interface in:0
(steering-pool)# done
steering-pool
        ip-address                              10.80.1.150
        start-port                              30000
        end-port                                49999
        realm-id                                csm
        network-interface                       in:0
        last-modified-by                        admin@172.18.0.60
        last-modified-date                      2017-11-01 16:07:11

(steering-pool)# exit
(media-manager)# media-manager
(media-manager-config)# state enabled
(media-manager-config)# latching enabled
(media-manager-config)# initial-guard-timer 300
(media-manager-config)# flow-time-limit 86400
(media-manager-config)# subsq-guard-timer 300
(media-manager-config)# tcp-flow-time-limit 86400
(media-manager-config)# tcp-initial-guard-timer 300
(media-manager-config)# done
media-manager
        state                                   enabled
        latching                                enabled
        flow-time-limit                         86400
        initial-guard-timer                     300
        subsq-guard-timer                       300
        tcp-flow-time-limit                     86400
        tcp-initial-guard-timer                 300
        tcp-subsq-guard-timer                   300
        tcp-number-of-ports-per-flow            2
        hnt-rtcp                                disabled
        algd-log-level                          NOTICE
        mbcd-log-level                          NOTICE
        options                                 
        red-flow-port                           1985
        red-mgcp-port                           1986
        red-max-trans                           10000
        red-sync-start-time                     5000
        red-sync-comp-time                      1000
        media-policing                          enabled
        max-arp-rate                            10
        max-signaling-packets                   0
        max-untrusted-signaling                 100
        min-untrusted-signaling                 30
        tolerance-window                        30
        trap-on-demote-to-deny                  disabled
        trap-on-demote-to-untrusted             disabled
        syslog-on-demote-to-deny                disabled
        syslog-on-demote-to-untrusted           disabled
        rtcp-rate-limit                         0
        anonymous-sdp                           disabled
        rfc2833-timestamp                       disabled
        default-2833-duration                   100
        rfc2833-end-pkts-only-for-non-sig       enabled
        translate-non-rfc2833-event             disabled
        media-supervision-traps                 disabled
        dnsalg-server-failover                  disabled
        syslog-on-call-reject                   disabled
        xcode-fax-max-rate                      9600
        last-modified-by                        admin@172.18.0.60
        last-modified-date                      2017-11-01 16:07:11

(media-manager-config)# exit
(media-manager)# exit
(configure)# exit
# save-config
checking configuration
--------------------------------------------------------------------------------
Results of config verification:
   1 configuration error
Run 'verify-config' for more details
--------------------------------------------------------------------------------
Save-Config received, processing.
waiting for request to finish
Request to 'SAVE-CONFIG' has Finished, 
Save complete
Currently active and saved configurations do not match!
To sync &amp; activate, run 'activate-config' or 'reboot activate'.
# reboot activate

--------------------------------------------------------
WARNING: you are about to reboot this SBC!
--------------------------------------------------------

Reboot this SBC [y/n]?: y

Connection to 172.18.0.174 closed by remote host.
Connection to 172.18.0.174 closed.
[root@controller ~(keystone_admin)]#</msg>
<status status="PASS" endtime="20171101 16:11:30.418" starttime="20171101 16:11:30.418"></status>
</kw>
<status status="PASS" endtime="20171101 16:11:30.418" starttime="20171101 16:09:31.909"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>60</arg>
</arguments>
<msg timestamp="20171101 16:12:30.422" level="INFO">Slept 1 minute</msg>
<status status="PASS" endtime="20171101 16:12:30.422" starttime="20171101 16:11:30.418"></status>
</kw>
<kw name="Reboot_loop" library="Oracle_SBC_Keywords">
<kw name="Get_SBC-IP" library="Oracle_SBC_Keywords">
<kw name="ImportDetails" library="Genric_Keywords">
<arguments>
<arg>C:\\Users\\Admin\\Desktop\\Sukesh-Automation\\RobotFramework\\Genric_Script\\Config\\Enterprise_Config.txt</arg>
<arg>${Label}</arg>
</arguments>
<assign>
<var>@{Server}</var>
</assign>
<kw name="Parseconfdata" library="Library">
<arguments>
<arg>${ConfigPath}</arg>
<arg>${Label}</arg>
</arguments>
<assign>
<var>@{Param}</var>
</assign>
<msg timestamp="20171101 16:12:30.422" level="INFO">@{Param} = [ "RedHat" | oracle1 | oracle1 | qcow2 | /root/auto_heatfiles | bare | C:\xampp\htdocs\VNFXchange | nova:compute2 | perimetaseg | TCP | Ingress | ipv4 | Oracle_SBC_Flavour_Template.txt | nnSCZ739p1-im...</msg>
<status status="PASS" endtime="20171101 16:12:30.422" starttime="20171101 16:12:30.422"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${server}</var>
</assign>
<msg timestamp="20171101 16:12:30.422" level="INFO">${server} = "RedHat"</msg>
<status status="PASS" endtime="20171101 16:12:30.422" starttime="20171101 16:12:30.422"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${VNFName}</var>
</assign>
<msg timestamp="20171101 16:12:30.422" level="INFO">${VNFName} = oracle1</msg>
<status status="PASS" endtime="20171101 16:12:30.422" starttime="20171101 16:12:30.422"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>2</arg>
</arguments>
<assign>
<var>${ImageName}</var>
</assign>
<msg timestamp="20171101 16:12:30.422" level="INFO">${ImageName} = oracle1</msg>
<status status="PASS" endtime="20171101 16:12:30.422" starttime="20171101 16:12:30.422"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>3</arg>
</arguments>
<assign>
<var>${DiskFormat}</var>
</assign>
<msg timestamp="20171101 16:12:30.422" level="INFO">${DiskFormat} = qcow2</msg>
<status status="PASS" endtime="20171101 16:12:30.422" starttime="20171101 16:12:30.422"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>4</arg>
</arguments>
<assign>
<var>${ImageFilePath}</var>
</assign>
<msg timestamp="20171101 16:12:30.422" level="INFO">${ImageFilePath} = /root/auto_heatfiles</msg>
<status status="PASS" endtime="20171101 16:12:30.422" starttime="20171101 16:12:30.422"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>5</arg>
</arguments>
<assign>
<var>${ConatinerFormat}</var>
</assign>
<msg timestamp="20171101 16:12:30.422" level="INFO">${ConatinerFormat} = bare</msg>
<status status="PASS" endtime="20171101 16:12:30.422" starttime="20171101 16:12:30.422"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>6</arg>
</arguments>
<assign>
<var>${FlavorP}</var>
</assign>
<msg timestamp="20171101 16:12:30.422" level="INFO">${FlavorP} = C:\xampp\htdocs\VNFXchange</msg>
<status status="PASS" endtime="20171101 16:12:30.422" starttime="20171101 16:12:30.422"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>7</arg>
</arguments>
<assign>
<var>${AvZone}</var>
</assign>
<msg timestamp="20171101 16:12:30.422" level="INFO">${AvZone} = nova:compute2</msg>
<status status="PASS" endtime="20171101 16:12:30.422" starttime="20171101 16:12:30.422"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>8</arg>
</arguments>
<assign>
<var>${Security}</var>
</assign>
<msg timestamp="20171101 16:12:30.422" level="INFO">${Security} = perimetaseg</msg>
<status status="PASS" endtime="20171101 16:12:30.422" starttime="20171101 16:12:30.422"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>9</arg>
</arguments>
<assign>
<var>${Protocol}</var>
</assign>
<msg timestamp="20171101 16:12:30.422" level="INFO">${Protocol} = TCP</msg>
<status status="PASS" endtime="20171101 16:12:30.422" starttime="20171101 16:12:30.422"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>10</arg>
</arguments>
<assign>
<var>${Direction}</var>
</assign>
<msg timestamp="20171101 16:12:30.422" level="INFO">${Direction} = Ingress</msg>
<status status="PASS" endtime="20171101 16:12:30.422" starttime="20171101 16:12:30.422"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>11</arg>
</arguments>
<assign>
<var>${Ethertype}</var>
</assign>
<msg timestamp="20171101 16:12:30.422" level="INFO">${Ethertype} = ipv4</msg>
<status status="PASS" endtime="20171101 16:12:30.422" starttime="20171101 16:12:30.422"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>12</arg>
</arguments>
<assign>
<var>${FN}</var>
</assign>
<msg timestamp="20171101 16:12:30.422" level="INFO">${FN} = Oracle_SBC_Flavour_Template.txt</msg>
<status status="PASS" endtime="20171101 16:12:30.422" starttime="20171101 16:12:30.422"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>13</arg>
</arguments>
<assign>
<var>${ImageFileName}</var>
</assign>
<msg timestamp="20171101 16:12:30.422" level="INFO">${ImageFileName} = nnSCZ739p1-img-vm_kvm.qcow2</msg>
<status status="PASS" endtime="20171101 16:12:30.422" starttime="20171101 16:12:30.422"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${Nic1}</arg>
<arg>Get From List</arg>
<arg>${Param}</arg>
<arg>12</arg>
</arguments>
<status status="PASS" endtime="20171101 16:12:30.422" starttime="20171101 16:12:30.422"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${Nic2}</arg>
<arg>Get From List</arg>
<arg>${Param}</arg>
<arg>13</arg>
</arguments>
<status status="PASS" endtime="20171101 16:12:30.422" starttime="20171101 16:12:30.422"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${Nic3}</arg>
<arg>Get From List</arg>
<arg>${Param}</arg>
<arg>14</arg>
</arguments>
<status status="PASS" endtime="20171101 16:12:30.422" starttime="20171101 16:12:30.422"></status>
</kw>
<kw name="Split Extension" library="OperatingSystem">
<doc>Splits the extension from the given path.</doc>
<arguments>
<arg>${FN}</arg>
</arguments>
<assign>
<var>${FlavourName}</var>
<var>${Ext}</var>
</assign>
<msg timestamp="20171101 16:12:30.422" level="INFO">${FlavourName} = Oracle_SBC_Flavour_Template</msg>
<msg timestamp="20171101 16:12:30.422" level="INFO">${Ext} = txt</msg>
<status status="PASS" endtime="20171101 16:12:30.422" starttime="20171101 16:12:30.422"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${ImageFileName}</arg>
</arguments>
<msg timestamp="20171101 16:12:30.422" level="INFO">${ImageFileName} = nnSCZ739p1-img-vm_kvm.qcow2</msg>
<status status="PASS" endtime="20171101 16:12:30.422" starttime="20171101 16:12:30.422"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${FN}</arg>
</arguments>
<msg timestamp="20171101 16:12:30.438" level="INFO">${FN} = Oracle_SBC_Flavour_Template.txt</msg>
<status status="PASS" endtime="20171101 16:12:30.438" starttime="20171101 16:12:30.422"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${FlavourName}</arg>
</arguments>
<msg timestamp="20171101 16:12:30.438" level="INFO">${FlavourName} = Oracle_SBC_Flavour_Template</msg>
<status status="PASS" endtime="20171101 16:12:30.438" starttime="20171101 16:12:30.438"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${VNFName}</arg>
</arguments>
<msg timestamp="20171101 16:12:30.438" level="INFO">${VNFName} = oracle1</msg>
<status status="PASS" endtime="20171101 16:12:30.438" starttime="20171101 16:12:30.438"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${server}</arg>
</arguments>
<msg timestamp="20171101 16:12:30.438" level="INFO">${server} = "RedHat"</msg>
<status status="PASS" endtime="20171101 16:12:30.438" starttime="20171101 16:12:30.438"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${ImageName}</arg>
</arguments>
<msg timestamp="20171101 16:12:30.438" level="INFO">${ImageName} = oracle1</msg>
<status status="PASS" endtime="20171101 16:12:30.438" starttime="20171101 16:12:30.438"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${DiskFormat}</arg>
</arguments>
<msg timestamp="20171101 16:12:30.438" level="INFO">${DiskFormat} = qcow2</msg>
<status status="PASS" endtime="20171101 16:12:30.438" starttime="20171101 16:12:30.438"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${ImageFilePath}</arg>
</arguments>
<msg timestamp="20171101 16:12:30.438" level="INFO">${ImageFilePath} = /root/auto_heatfiles</msg>
<status status="PASS" endtime="20171101 16:12:30.438" starttime="20171101 16:12:30.438"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${ConatinerFormat}</arg>
</arguments>
<msg timestamp="20171101 16:12:30.438" level="INFO">${ConatinerFormat} = bare</msg>
<status status="PASS" endtime="20171101 16:12:30.438" starttime="20171101 16:12:30.438"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${FlavorP}</arg>
</arguments>
<msg timestamp="20171101 16:12:30.438" level="INFO">${FlavorP} = C:\xampp\htdocs\VNFXchange</msg>
<status status="PASS" endtime="20171101 16:12:30.438" starttime="20171101 16:12:30.438"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AvZone}</arg>
</arguments>
<msg timestamp="20171101 16:12:30.438" level="INFO">${AvZone} = nova:compute2</msg>
<status status="PASS" endtime="20171101 16:12:30.438" starttime="20171101 16:12:30.438"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${Security}</arg>
</arguments>
<msg timestamp="20171101 16:12:30.438" level="INFO">${Security} = perimetaseg</msg>
<status status="PASS" endtime="20171101 16:12:30.438" starttime="20171101 16:12:30.438"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${Protocol}</arg>
</arguments>
<msg timestamp="20171101 16:12:30.438" level="INFO">${Protocol} = TCP</msg>
<status status="PASS" endtime="20171101 16:12:30.438" starttime="20171101 16:12:30.438"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${Direction}</arg>
</arguments>
<msg timestamp="20171101 16:12:30.438" level="INFO">${Direction} = Ingress</msg>
<status status="PASS" endtime="20171101 16:12:30.438" starttime="20171101 16:12:30.438"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${Ethertype}</arg>
</arguments>
<msg timestamp="20171101 16:12:30.438" level="INFO">${Ethertype} = ipv4</msg>
<status status="PASS" endtime="20171101 16:12:30.438" starttime="20171101 16:12:30.438"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Set Global Variable</arg>
<arg>${Nic1}</arg>
</arguments>
<status status="PASS" endtime="20171101 16:12:30.438" starttime="20171101 16:12:30.438"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Set Global Variable</arg>
<arg>${Nic2}</arg>
</arguments>
<status status="PASS" endtime="20171101 16:12:30.438" starttime="20171101 16:12:30.438"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${VNFName}</arg>
</arguments>
<msg timestamp="20171101 16:12:30.438" level="INFO">${VNFName} = oracle1</msg>
<status status="PASS" endtime="20171101 16:12:30.438" starttime="20171101 16:12:30.438"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Set Global Variable</arg>
<arg>${Nic3}</arg>
</arguments>
<status status="PASS" endtime="20171101 16:12:30.438" starttime="20171101 16:12:30.438"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${server}=="RedHat"</arg>
<arg>Return From Keyword</arg>
<arg>@{RedHat}</arg>
</arguments>
<kw name="Return From Keyword" library="BuiltIn">
<doc>Returns from the enclosing user keyword.</doc>
<arguments>
<arg>@{RedHat}</arg>
</arguments>
<msg timestamp="20171101 16:12:30.438" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20171101 16:12:30.438" starttime="20171101 16:12:30.438"></status>
</kw>
<status status="PASS" endtime="20171101 16:12:30.438" starttime="20171101 16:12:30.438"></status>
</kw>
<msg timestamp="20171101 16:12:30.438" level="INFO">@{Server} = [ 10.53.214.10 | root | techm123 ]</msg>
<status status="PASS" endtime="20171101 16:12:30.438" starttime="20171101 16:12:30.422"></status>
</kw>
<kw name="Server_Login" library="Genric_Keywords">
<arguments>
<arg>@{Server}</arg>
</arguments>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Server}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${HOST}</var>
</assign>
<msg timestamp="20171101 16:12:30.438" level="INFO">${HOST} = 10.53.214.10</msg>
<status status="PASS" endtime="20171101 16:12:30.438" starttime="20171101 16:12:30.438"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Server}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${USERNAME}</var>
</assign>
<msg timestamp="20171101 16:12:30.438" level="INFO">${USERNAME} = root</msg>
<status status="PASS" endtime="20171101 16:12:30.438" starttime="20171101 16:12:30.438"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Server}</arg>
<arg>2</arg>
</arguments>
<assign>
<var>${PASSWORD}</var>
</assign>
<msg timestamp="20171101 16:12:30.453" level="INFO">${PASSWORD} = techm123</msg>
<status status="PASS" endtime="20171101 16:12:30.453" starttime="20171101 16:12:30.438"></status>
</kw>
<kw type="for" name="${i} IN RANGE [ 0 | 4 ]">
<kw type="foritem" name="${i} = 0">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<assign>
<var>${Index}</var>
</assign>
<msg timestamp="20171101 16:12:30.453" level="INFO">${Index} = 3</msg>
<status status="PASS" endtime="20171101 16:12:30.453" starttime="20171101 16:12:30.453"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Login</arg>
<arg>${USERNAME}</arg>
<arg>${PASSWORD}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PASSWORD}</arg>
</arguments>
<msg timestamp="20171101 16:12:30.453" level="INFO">Logging into '10.53.214.10:22' as 'root'.</msg>
<msg timestamp="20171101 16:12:36.586" level="INFO">Read output: Last login: Wed Nov  1 06:35:06 2017 from 10.53.172.4
[root@controller ~]#</msg>
<status status="PASS" endtime="20171101 16:12:36.586" starttime="20171101 16:12:30.453"></status>
</kw>
<msg timestamp="20171101 16:12:36.586" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20171101 16:12:36.586" starttime="20171101 16:12:30.453"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20171101 16:12:36.586" starttime="20171101 16:12:36.586"></status>
</kw>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20171101 16:12:36.586" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20171101 16:12:36.586" starttime="20171101 16:12:36.586"></status>
</kw>
<status status="PASS" endtime="20171101 16:12:36.586" starttime="20171101 16:12:30.453"></status>
</kw>
<status status="PASS" endtime="20171101 16:12:36.586" starttime="20171101 16:12:30.453"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>*****************ServerLogin_Validation**********************</arg>
</arguments>
<msg timestamp="20171101 16:12:36.586" level="INFO">*****************ServerLogin_Validation**********************</msg>
<status status="PASS" endtime="20171101 16:12:36.586" starttime="20171101 16:12:36.586"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>20s</arg>
<arg>2</arg>
<arg>write</arg>
<arg>ifconfig | grep inet</arg>
</arguments>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>ifconfig | grep inet</arg>
</arguments>
<msg timestamp="20171101 16:12:36.586" level="INFO">ifconfig | grep inet</msg>
<status status="PASS" endtime="20171101 16:12:36.586" starttime="20171101 16:12:36.586"></status>
</kw>
<status status="PASS" endtime="20171101 16:12:36.586" starttime="20171101 16:12:36.586"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>4</arg>
</arguments>
<msg timestamp="20171101 16:12:40.595" level="INFO">Slept 4 seconds</msg>
<status status="PASS" endtime="20171101 16:12:40.595" starttime="20171101 16:12:36.586"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20171101 16:12:40.595" level="INFO">[01;31m[Kinet[m[K 169.254.1.8  netmask 255.255.255.0  broadcast 169.254.1.255
        [01;31m[Kinet[m[K6 fe80::cca5:25ff:fe65:134b  prefixlen 64  scopeid 0x20&lt;link&gt;
        [01;31m[Kinet[m[K 172.18.0.60  netmask 255.255.255.0  broadcast 172.18.0.255
        [01;31m[Kinet[m[K6 fe80::4d7:59ff:fe85:5f45  prefixlen 64  scopeid 0x20&lt;link&gt;
        [01;31m[Kinet[m[K 10.80.1.8  netmask 255.255.255.0  broadcast 10.80.1.255
        [01;31m[Kinet[m[K6 fe80::fc8a:54ff:fe8a:974e  prefixlen 64  scopeid 0x20&lt;link&gt;
        [01;31m[Kinet[m[K 10.81.1.8  netmask 255.255.255.0  broadcast 10.81.1.255
        [01;31m[Kinet[m[K6 fe80::283b:ecff:fee2:1e40  prefixlen 64  scopeid 0x20&lt;link&gt;
        [01;31m[Kinet[m[K6 fe80::eef4:bbff:fedb:a3c8  prefixlen 64  scopeid 0x20&lt;link&gt;
        [01;31m[Kinet[m[K 168.254.17.8  netmask 255.255.255.0  broadcast 168.254.17.255
        [01;31m[Kinet[m[K6 fe80::eef4:bbff:fedb:a3ca  prefixlen 64  scopeid 0x20&lt;link&gt;
        [01;31m[Kinet[m[K 10.53.214.10  netmask 255.255.255.0  broadcast 10.53.214.255
        [01;31m[Kinet[m[K6 fe80::eef4:bbff:fedb:a3cc  prefixlen 64  scopeid 0x20&lt;link&gt;
        [01;31m[Kinet[m[K6 fe80::eef4:bbff:fedb:a3cd  prefixlen 64  scopeid 0x20&lt;link&gt;
        [01;31m[Kinet[m[K 127.0.0.1  netmask 255.0.0.0
        [01;31m[Kinet[m[K6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;
        [01;31m[Kinet[m[K6 fe80::a236:9fff:fe78:4b14  prefixlen 64  scopeid 0x20&lt;link&gt;
        [01;31m[Kinet[m[K6 fe80::a236:9fff:fe78:4b16  prefixlen 64  scopeid 0x20&lt;link&gt;
        [01;31m[Kinet[m[K 192.168.122.1  netmask 255.255.255.0  broadcast 192.168.122.255
[root@controller ~]#</msg>
<msg timestamp="20171101 16:12:40.595" level="INFO">${output} =         [01;31m[Kinet[m[K 169.254.1.8  netmask 255.255.255.0  broadcast 169.254.1.255
        [01;31m[Kinet[m[K6 fe80::cca5:25ff:fe65:134b  prefixlen 64  scopeid 0x20&lt;link&gt;
        [01;31m...</msg>
<status status="PASS" endtime="20171101 16:12:40.595" starttime="20171101 16:12:40.595"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20171101 16:12:40.595" starttime="20171101 16:12:40.595"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>*****************ServerLogin_Validation Completed**********************</arg>
</arguments>
<msg timestamp="20171101 16:12:40.595" level="INFO">*****************ServerLogin_Validation Completed**********************</msg>
<status status="PASS" endtime="20171101 16:12:40.595" starttime="20171101 16:12:40.595"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>20s</arg>
<arg>2</arg>
<arg>write</arg>
<arg>source keystonerc_admin</arg>
</arguments>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>source keystonerc_admin</arg>
</arguments>
<msg timestamp="20171101 16:12:40.595" level="INFO">source keystonerc_admin</msg>
<status status="PASS" endtime="20171101 16:12:40.595" starttime="20171101 16:12:40.595"></status>
</kw>
<status status="PASS" endtime="20171101 16:12:40.595" starttime="20171101 16:12:40.595"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20171101 16:12:40.595" level="INFO">[root@controller ~(keystone_admin)]#</msg>
<msg timestamp="20171101 16:12:40.595" level="INFO">${output} = [root@controller ~(keystone_admin)]# </msg>
<status status="PASS" endtime="20171101 16:12:40.595" starttime="20171101 16:12:40.595"></status>
</kw>
<status status="PASS" endtime="20171101 16:12:40.595" starttime="20171101 16:12:30.438"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>rm -rf value.txt</arg>
</arguments>
<msg timestamp="20171101 16:12:40.611" level="INFO">rm -rf value.txt</msg>
<status status="PASS" endtime="20171101 16:12:40.611" starttime="20171101 16:12:40.595"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>nova list | grep -i ${VNFName}|awk -F "=" '{print $2}'|awk -F "," '{print $2}'|awk -F ";" '{print $1}'</arg>
</arguments>
<msg timestamp="20171101 16:12:40.611" level="INFO">[root@controller ~(keystone_admin)]# nova list | grep -i oracle1|awk -F "=" '{pr int $2}'|awk -F "," '{print $2}'|awk -F ";" '{print $1}'</msg>
<status status="PASS" endtime="20171101 16:12:40.611" starttime="20171101 16:12:40.611"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>4</arg>
</arguments>
<msg timestamp="20171101 16:12:44.620" level="INFO">Slept 4 seconds</msg>
<status status="PASS" endtime="20171101 16:12:44.620" starttime="20171101 16:12:40.611"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20171101 16:12:44.620" level="INFO">10.80.1.152
[root@controller ~(keystone_admin)]#</msg>
<msg timestamp="20171101 16:12:44.620" level="INFO">${output} =  10.80.1.152
[root@controller ~(keystone_admin)]# </msg>
<status status="PASS" endtime="20171101 16:12:44.620" starttime="20171101 16:12:44.620"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20171101 16:12:44.620" level="INFO">${output} = [u'10.80.1.152', u'[root@controller', u'~(keystone_admin)]#']</msg>
<status status="PASS" endtime="20171101 16:12:44.620" starttime="20171101 16:12:44.620"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${output}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${Proxy_IP}</var>
</assign>
<msg timestamp="20171101 16:12:44.620" level="INFO">${Proxy_IP} = 10.80.1.152</msg>
<status status="PASS" endtime="20171101 16:12:44.620" starttime="20171101 16:12:44.620"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${Proxy_IP}</arg>
</arguments>
<msg timestamp="20171101 16:12:44.620" level="INFO">${Proxy_IP} = 10.80.1.152</msg>
<status status="PASS" endtime="20171101 16:12:44.620" starttime="20171101 16:12:44.620"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>nova list | grep -i ${VNFName}| awk -F ";" '{print $2}' | awk -F "=" '{print $2}'| awk -F " \ " '{print $1}'</arg>
</arguments>
<msg timestamp="20171101 16:12:44.620" level="INFO">nova list | grep -i oracle1| awk -F ";" '{p rint $2}' | awk -F "=" '{print $2}'| awk -F "  " '{print $1}'</msg>
<status status="PASS" endtime="20171101 16:12:44.620" starttime="20171101 16:12:44.620"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5</arg>
</arguments>
<msg timestamp="20171101 16:12:49.628" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20171101 16:12:49.628" starttime="20171101 16:12:44.620"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20171101 16:12:49.628" level="INFO">172.18.0.174
[root@controller ~(keystone_admin)]#</msg>
<msg timestamp="20171101 16:12:49.628" level="INFO">${output} = 172.18.0.174
[root@controller ~(keystone_admin)]# </msg>
<status status="PASS" endtime="20171101 16:12:49.628" starttime="20171101 16:12:49.628"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20171101 16:12:49.628" level="INFO">${output} = [u'172.18.0.174', u'[root@controller', u'~(keystone_admin)]#']</msg>
<status status="PASS" endtime="20171101 16:12:49.628" starttime="20171101 16:12:49.628"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${output}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${MGmt_IP}</var>
</assign>
<msg timestamp="20171101 16:12:49.628" level="INFO">${MGmt_IP} = 172.18.0.174</msg>
<status status="PASS" endtime="20171101 16:12:49.628" starttime="20171101 16:12:49.628"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${MGmt_IP}</arg>
</arguments>
<msg timestamp="20171101 16:12:49.628" level="INFO">${MGmt_IP} = 172.18.0.174</msg>
<status status="PASS" endtime="20171101 16:12:49.628" starttime="20171101 16:12:49.628"></status>
</kw>
<status status="PASS" endtime="20171101 16:12:49.628" starttime="20171101 16:12:30.422"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>3</arg>
</arguments>
<msg timestamp="20171101 16:12:52.638" level="INFO">Slept 3 seconds</msg>
<status status="PASS" endtime="20171101 16:12:52.638" starttime="20171101 16:12:49.628"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>clear</arg>
</arguments>
<msg timestamp="20171101 16:12:52.638" level="INFO">clear</msg>
<status status="PASS" endtime="20171101 16:12:52.638" starttime="20171101 16:12:52.638"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>0</arg>
</arguments>
<assign>
<var>${i}</var>
</assign>
<msg timestamp="20171101 16:12:52.638" level="INFO">${i} = 0</msg>
<status status="PASS" endtime="20171101 16:12:52.638" starttime="20171101 16:12:52.638"></status>
</kw>
<kw type="for" name="${i} IN RANGE [ 0 | 200 ]">
<kw type="foritem" name="${i} = 0">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ping</arg>
<arg>-c 1</arg>
<arg>${MGmt_IP}</arg>
</arguments>
<assign>
<var>${store}</var>
</assign>
<msg timestamp="20171101 16:12:52.638" level="INFO">${store} = ping -c 1 172.18.0.174</msg>
<status status="PASS" endtime="20171101 16:12:52.638" starttime="20171101 16:12:52.638"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${store}</arg>
</arguments>
<msg timestamp="20171101 16:12:52.638" level="INFO">[H[J[root@controller ~(keystone_admin)]# ping -c 1 172.18.0.174</msg>
<status status="PASS" endtime="20171101 16:12:52.638" starttime="20171101 16:12:52.638"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5</arg>
</arguments>
<msg timestamp="20171101 16:12:57.647" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20171101 16:12:57.647" starttime="20171101 16:12:52.638"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${Output}</var>
</assign>
<msg timestamp="20171101 16:12:57.647" level="INFO">PING 172.18.0.174 (172.18.0.174) 56(84) bytes of data.
64 bytes from 172.18.0.174: icmp_seq=1 ttl=64 time=1.94 ms

--- 172.18.0.174 ping statistics ---
1 packets transmitted, 1 received, 0% packet loss, time 0ms
rtt min/avg/max/mdev = 1.945/1.945/1.945/0.000 ms
[root@controller ~(keystone_admin)]#</msg>
<msg timestamp="20171101 16:12:57.647" level="INFO">${Output} = PING 172.18.0.174 (172.18.0.174) 56(84) bytes of data.
64 bytes from 172.18.0.174: icmp_seq=1 ttl=64 time=1.94 ms

--- 172.18.0.174 ping statistics ---
1 packets transmitted, 1 received, 0% packet...</msg>
<status status="PASS" endtime="20171101 16:12:57.647" starttime="20171101 16:12:57.647"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${Output}</arg>
<arg>ttl=64</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${Output}</arg>
<arg>ttl=64</arg>
</arguments>
<status status="PASS" endtime="20171101 16:12:57.647" starttime="20171101 16:12:57.647"></status>
</kw>
<msg timestamp="20171101 16:12:57.647" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20171101 16:12:57.647" starttime="20171101 16:12:57.647"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20171101 16:12:57.647" starttime="20171101 16:12:57.647"></status>
</kw>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20171101 16:12:57.647" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20171101 16:12:57.647" starttime="20171101 16:12:57.647"></status>
</kw>
<status status="PASS" endtime="20171101 16:12:57.647" starttime="20171101 16:12:52.638"></status>
</kw>
<status status="PASS" endtime="20171101 16:12:57.647" starttime="20171101 16:12:52.638"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Reboot Completed,Server is UP...............!</arg>
</arguments>
<msg timestamp="20171101 16:12:57.647" level="INFO">Reboot Completed,Server is UP...............!</msg>
<status status="PASS" endtime="20171101 16:12:57.647" starttime="20171101 16:12:57.647"></status>
</kw>
<status status="PASS" endtime="20171101 16:12:57.647" starttime="20171101 16:12:30.422"></status>
</kw>
<status status="PASS" endtime="20171101 16:12:57.647" starttime="20171101 16:06:52.212"></status>
</kw>
<kw type="teardown" name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20171101 16:12:58.021" starttime="20171101 16:12:57.647"></status>
</kw>
<doc>Verify the Cloud environment (RHOSP) before we start Onboarding of VNF VM’s process.</doc>
<tags>
<tag>Onboard</tag>
</tags>
<status status="PASS" endtime="20171101 16:12:58.021" critical="yes" starttime="20171101 16:03:22.454"></status>
</test>
<test id="s1-t2" name="TC2_Verify able to login/logout into vSBC">
<kw name="ImportDetails" library="Genric_Keywords">
<arguments>
<arg>C:\\Users\\Admin\\Desktop\\Sukesh-Automation\\RobotFramework\\Genric_Script\\Config\\Enterprise_Config.txt</arg>
<arg>${Label}</arg>
</arguments>
<assign>
<var>@{Server}</var>
</assign>
<kw name="Parseconfdata" library="Library">
<arguments>
<arg>${ConfigPath}</arg>
<arg>${Label}</arg>
</arguments>
<assign>
<var>@{Param}</var>
</assign>
<msg timestamp="20171101 16:12:58.021" level="INFO">@{Param} = [ "RedHat" | oracle1 | oracle1 | qcow2 | /root/auto_heatfiles | bare | C:\xampp\htdocs\VNFXchange | nova:compute2 | perimetaseg | TCP | Ingress | ipv4 | Oracle_SBC_Flavour_Template.txt | nnSCZ739p1-im...</msg>
<status status="PASS" endtime="20171101 16:12:58.021" starttime="20171101 16:12:58.021"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${server}</var>
</assign>
<msg timestamp="20171101 16:12:58.021" level="INFO">${server} = "RedHat"</msg>
<status status="PASS" endtime="20171101 16:12:58.021" starttime="20171101 16:12:58.021"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${VNFName}</var>
</assign>
<msg timestamp="20171101 16:12:58.021" level="INFO">${VNFName} = oracle1</msg>
<status status="PASS" endtime="20171101 16:12:58.021" starttime="20171101 16:12:58.021"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>2</arg>
</arguments>
<assign>
<var>${ImageName}</var>
</assign>
<msg timestamp="20171101 16:12:58.021" level="INFO">${ImageName} = oracle1</msg>
<status status="PASS" endtime="20171101 16:12:58.021" starttime="20171101 16:12:58.021"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>3</arg>
</arguments>
<assign>
<var>${DiskFormat}</var>
</assign>
<msg timestamp="20171101 16:12:58.037" level="INFO">${DiskFormat} = qcow2</msg>
<status status="PASS" endtime="20171101 16:12:58.037" starttime="20171101 16:12:58.021"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>4</arg>
</arguments>
<assign>
<var>${ImageFilePath}</var>
</assign>
<msg timestamp="20171101 16:12:58.037" level="INFO">${ImageFilePath} = /root/auto_heatfiles</msg>
<status status="PASS" endtime="20171101 16:12:58.037" starttime="20171101 16:12:58.037"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>5</arg>
</arguments>
<assign>
<var>${ConatinerFormat}</var>
</assign>
<msg timestamp="20171101 16:12:58.037" level="INFO">${ConatinerFormat} = bare</msg>
<status status="PASS" endtime="20171101 16:12:58.037" starttime="20171101 16:12:58.037"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>6</arg>
</arguments>
<assign>
<var>${FlavorP}</var>
</assign>
<msg timestamp="20171101 16:12:58.037" level="INFO">${FlavorP} = C:\xampp\htdocs\VNFXchange</msg>
<status status="PASS" endtime="20171101 16:12:58.037" starttime="20171101 16:12:58.037"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>7</arg>
</arguments>
<assign>
<var>${AvZone}</var>
</assign>
<msg timestamp="20171101 16:12:58.037" level="INFO">${AvZone} = nova:compute2</msg>
<status status="PASS" endtime="20171101 16:12:58.037" starttime="20171101 16:12:58.037"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>8</arg>
</arguments>
<assign>
<var>${Security}</var>
</assign>
<msg timestamp="20171101 16:12:58.037" level="INFO">${Security} = perimetaseg</msg>
<status status="PASS" endtime="20171101 16:12:58.037" starttime="20171101 16:12:58.037"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>9</arg>
</arguments>
<assign>
<var>${Protocol}</var>
</assign>
<msg timestamp="20171101 16:12:58.037" level="INFO">${Protocol} = TCP</msg>
<status status="PASS" endtime="20171101 16:12:58.037" starttime="20171101 16:12:58.037"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>10</arg>
</arguments>
<assign>
<var>${Direction}</var>
</assign>
<msg timestamp="20171101 16:12:58.037" level="INFO">${Direction} = Ingress</msg>
<status status="PASS" endtime="20171101 16:12:58.037" starttime="20171101 16:12:58.037"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>11</arg>
</arguments>
<assign>
<var>${Ethertype}</var>
</assign>
<msg timestamp="20171101 16:12:58.037" level="INFO">${Ethertype} = ipv4</msg>
<status status="PASS" endtime="20171101 16:12:58.037" starttime="20171101 16:12:58.037"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>12</arg>
</arguments>
<assign>
<var>${FN}</var>
</assign>
<msg timestamp="20171101 16:12:58.037" level="INFO">${FN} = Oracle_SBC_Flavour_Template.txt</msg>
<status status="PASS" endtime="20171101 16:12:58.037" starttime="20171101 16:12:58.037"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>13</arg>
</arguments>
<assign>
<var>${ImageFileName}</var>
</assign>
<msg timestamp="20171101 16:12:58.037" level="INFO">${ImageFileName} = nnSCZ739p1-img-vm_kvm.qcow2</msg>
<status status="PASS" endtime="20171101 16:12:58.037" starttime="20171101 16:12:58.037"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${Nic1}</arg>
<arg>Get From List</arg>
<arg>${Param}</arg>
<arg>12</arg>
</arguments>
<status status="PASS" endtime="20171101 16:12:58.053" starttime="20171101 16:12:58.037"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${Nic2}</arg>
<arg>Get From List</arg>
<arg>${Param}</arg>
<arg>13</arg>
</arguments>
<status status="PASS" endtime="20171101 16:12:58.053" starttime="20171101 16:12:58.053"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${Nic3}</arg>
<arg>Get From List</arg>
<arg>${Param}</arg>
<arg>14</arg>
</arguments>
<status status="PASS" endtime="20171101 16:12:58.053" starttime="20171101 16:12:58.053"></status>
</kw>
<kw name="Split Extension" library="OperatingSystem">
<doc>Splits the extension from the given path.</doc>
<arguments>
<arg>${FN}</arg>
</arguments>
<assign>
<var>${FlavourName}</var>
<var>${Ext}</var>
</assign>
<msg timestamp="20171101 16:12:58.053" level="INFO">${FlavourName} = Oracle_SBC_Flavour_Template</msg>
<msg timestamp="20171101 16:12:58.053" level="INFO">${Ext} = txt</msg>
<status status="PASS" endtime="20171101 16:12:58.053" starttime="20171101 16:12:58.053"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${ImageFileName}</arg>
</arguments>
<msg timestamp="20171101 16:12:58.053" level="INFO">${ImageFileName} = nnSCZ739p1-img-vm_kvm.qcow2</msg>
<status status="PASS" endtime="20171101 16:12:58.053" starttime="20171101 16:12:58.053"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${FN}</arg>
</arguments>
<msg timestamp="20171101 16:12:58.053" level="INFO">${FN} = Oracle_SBC_Flavour_Template.txt</msg>
<status status="PASS" endtime="20171101 16:12:58.053" starttime="20171101 16:12:58.053"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${FlavourName}</arg>
</arguments>
<msg timestamp="20171101 16:12:58.053" level="INFO">${FlavourName} = Oracle_SBC_Flavour_Template</msg>
<status status="PASS" endtime="20171101 16:12:58.053" starttime="20171101 16:12:58.053"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${VNFName}</arg>
</arguments>
<msg timestamp="20171101 16:12:58.053" level="INFO">${VNFName} = oracle1</msg>
<status status="PASS" endtime="20171101 16:12:58.053" starttime="20171101 16:12:58.053"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${server}</arg>
</arguments>
<msg timestamp="20171101 16:12:58.053" level="INFO">${server} = "RedHat"</msg>
<status status="PASS" endtime="20171101 16:12:58.053" starttime="20171101 16:12:58.053"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${ImageName}</arg>
</arguments>
<msg timestamp="20171101 16:12:58.053" level="INFO">${ImageName} = oracle1</msg>
<status status="PASS" endtime="20171101 16:12:58.053" starttime="20171101 16:12:58.053"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${DiskFormat}</arg>
</arguments>
<msg timestamp="20171101 16:12:58.053" level="INFO">${DiskFormat} = qcow2</msg>
<status status="PASS" endtime="20171101 16:12:58.053" starttime="20171101 16:12:58.053"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${ImageFilePath}</arg>
</arguments>
<msg timestamp="20171101 16:12:58.068" level="INFO">${ImageFilePath} = /root/auto_heatfiles</msg>
<status status="PASS" endtime="20171101 16:12:58.068" starttime="20171101 16:12:58.053"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${ConatinerFormat}</arg>
</arguments>
<msg timestamp="20171101 16:12:58.068" level="INFO">${ConatinerFormat} = bare</msg>
<status status="PASS" endtime="20171101 16:12:58.068" starttime="20171101 16:12:58.068"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${FlavorP}</arg>
</arguments>
<msg timestamp="20171101 16:12:58.068" level="INFO">${FlavorP} = C:\xampp\htdocs\VNFXchange</msg>
<status status="PASS" endtime="20171101 16:12:58.068" starttime="20171101 16:12:58.068"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AvZone}</arg>
</arguments>
<msg timestamp="20171101 16:12:58.068" level="INFO">${AvZone} = nova:compute2</msg>
<status status="PASS" endtime="20171101 16:12:58.068" starttime="20171101 16:12:58.068"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${Security}</arg>
</arguments>
<msg timestamp="20171101 16:12:58.068" level="INFO">${Security} = perimetaseg</msg>
<status status="PASS" endtime="20171101 16:12:58.068" starttime="20171101 16:12:58.068"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${Protocol}</arg>
</arguments>
<msg timestamp="20171101 16:12:58.068" level="INFO">${Protocol} = TCP</msg>
<status status="PASS" endtime="20171101 16:12:58.068" starttime="20171101 16:12:58.068"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${Direction}</arg>
</arguments>
<msg timestamp="20171101 16:12:58.068" level="INFO">${Direction} = Ingress</msg>
<status status="PASS" endtime="20171101 16:12:58.068" starttime="20171101 16:12:58.068"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${Ethertype}</arg>
</arguments>
<msg timestamp="20171101 16:12:58.068" level="INFO">${Ethertype} = ipv4</msg>
<status status="PASS" endtime="20171101 16:12:58.068" starttime="20171101 16:12:58.068"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Set Global Variable</arg>
<arg>${Nic1}</arg>
</arguments>
<status status="PASS" endtime="20171101 16:12:58.068" starttime="20171101 16:12:58.068"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Set Global Variable</arg>
<arg>${Nic2}</arg>
</arguments>
<status status="PASS" endtime="20171101 16:12:58.068" starttime="20171101 16:12:58.068"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${VNFName}</arg>
</arguments>
<msg timestamp="20171101 16:12:58.068" level="INFO">${VNFName} = oracle1</msg>
<status status="PASS" endtime="20171101 16:12:58.068" starttime="20171101 16:12:58.068"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Set Global Variable</arg>
<arg>${Nic3}</arg>
</arguments>
<status status="PASS" endtime="20171101 16:12:58.068" starttime="20171101 16:12:58.068"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${server}=="RedHat"</arg>
<arg>Return From Keyword</arg>
<arg>@{RedHat}</arg>
</arguments>
<kw name="Return From Keyword" library="BuiltIn">
<doc>Returns from the enclosing user keyword.</doc>
<arguments>
<arg>@{RedHat}</arg>
</arguments>
<msg timestamp="20171101 16:12:58.068" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20171101 16:12:58.068" starttime="20171101 16:12:58.068"></status>
</kw>
<status status="PASS" endtime="20171101 16:12:58.068" starttime="20171101 16:12:58.068"></status>
</kw>
<msg timestamp="20171101 16:12:58.068" level="INFO">@{Server} = [ 10.53.214.10 | root | techm123 ]</msg>
<status status="PASS" endtime="20171101 16:12:58.068" starttime="20171101 16:12:58.021"></status>
</kw>
<kw name="Server_Login" library="Genric_Keywords">
<arguments>
<arg>@{Server}</arg>
</arguments>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Server}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${HOST}</var>
</assign>
<msg timestamp="20171101 16:12:58.068" level="INFO">${HOST} = 10.53.214.10</msg>
<status status="PASS" endtime="20171101 16:12:58.068" starttime="20171101 16:12:58.068"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Server}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${USERNAME}</var>
</assign>
<msg timestamp="20171101 16:12:58.068" level="INFO">${USERNAME} = root</msg>
<status status="PASS" endtime="20171101 16:12:58.068" starttime="20171101 16:12:58.068"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Server}</arg>
<arg>2</arg>
</arguments>
<assign>
<var>${PASSWORD}</var>
</assign>
<msg timestamp="20171101 16:12:58.068" level="INFO">${PASSWORD} = techm123</msg>
<status status="PASS" endtime="20171101 16:12:58.068" starttime="20171101 16:12:58.068"></status>
</kw>
<kw type="for" name="${i} IN RANGE [ 0 | 4 ]">
<kw type="foritem" name="${i} = 0">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<assign>
<var>${Index}</var>
</assign>
<msg timestamp="20171101 16:12:58.068" level="INFO">${Index} = 1</msg>
<status status="PASS" endtime="20171101 16:12:58.068" starttime="20171101 16:12:58.068"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Login</arg>
<arg>${USERNAME}</arg>
<arg>${PASSWORD}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PASSWORD}</arg>
</arguments>
<msg timestamp="20171101 16:12:58.068" level="INFO">Logging into '10.53.214.10:22' as 'root'.</msg>
<msg timestamp="20171101 16:13:04.230" level="INFO">Read output: Last login: Wed Nov  1 06:41:43 2017 from 10.53.172.4
[root@controller ~]#</msg>
<status status="PASS" endtime="20171101 16:13:04.230" starttime="20171101 16:12:58.068"></status>
</kw>
<msg timestamp="20171101 16:13:04.230" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20171101 16:13:04.230" starttime="20171101 16:12:58.068"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20171101 16:13:04.230" starttime="20171101 16:13:04.230"></status>
</kw>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20171101 16:13:04.230" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20171101 16:13:04.230" starttime="20171101 16:13:04.230"></status>
</kw>
<status status="PASS" endtime="20171101 16:13:04.230" starttime="20171101 16:12:58.068"></status>
</kw>
<status status="PASS" endtime="20171101 16:13:04.230" starttime="20171101 16:12:58.068"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>*****************ServerLogin_Validation**********************</arg>
</arguments>
<msg timestamp="20171101 16:13:04.230" level="INFO">*****************ServerLogin_Validation**********************</msg>
<status status="PASS" endtime="20171101 16:13:04.230" starttime="20171101 16:13:04.230"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>20s</arg>
<arg>2</arg>
<arg>write</arg>
<arg>ifconfig | grep inet</arg>
</arguments>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>ifconfig | grep inet</arg>
</arguments>
<msg timestamp="20171101 16:13:04.230" level="INFO">ifconfig | grep inet</msg>
<status status="PASS" endtime="20171101 16:13:04.230" starttime="20171101 16:13:04.230"></status>
</kw>
<status status="PASS" endtime="20171101 16:13:04.230" starttime="20171101 16:13:04.230"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>4</arg>
</arguments>
<msg timestamp="20171101 16:13:08.239" level="INFO">Slept 4 seconds</msg>
<status status="PASS" endtime="20171101 16:13:08.239" starttime="20171101 16:13:04.230"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20171101 16:13:08.239" level="INFO">[01;31m[Kinet[m[K 169.254.1.8  netmask 255.255.255.0  broadcast 169.254.1.255
        [01;31m[Kinet[m[K6 fe80::cca5:25ff:fe65:134b  prefixlen 64  scopeid 0x20&lt;link&gt;
        [01;31m[Kinet[m[K 172.18.0.60  netmask 255.255.255.0  broadcast 172.18.0.255
        [01;31m[Kinet[m[K6 fe80::4d7:59ff:fe85:5f45  prefixlen 64  scopeid 0x20&lt;link&gt;
        [01;31m[Kinet[m[K 10.80.1.8  netmask 255.255.255.0  broadcast 10.80.1.255
        [01;31m[Kinet[m[K6 fe80::fc8a:54ff:fe8a:974e  prefixlen 64  scopeid 0x20&lt;link&gt;
        [01;31m[Kinet[m[K 10.81.1.8  netmask 255.255.255.0  broadcast 10.81.1.255
        [01;31m[Kinet[m[K6 fe80::283b:ecff:fee2:1e40  prefixlen 64  scopeid 0x20&lt;link&gt;
        [01;31m[Kinet[m[K6 fe80::eef4:bbff:fedb:a3c8  prefixlen 64  scopeid 0x20&lt;link&gt;
        [01;31m[Kinet[m[K 168.254.17.8  netmask 255.255.255.0  broadcast 168.254.17.255
        [01;31m[Kinet[m[K6 fe80::eef4:bbff:fedb:a3ca  prefixlen 64  scopeid 0x20&lt;link&gt;
        [01;31m[Kinet[m[K 10.53.214.10  netmask 255.255.255.0  broadcast 10.53.214.255
        [01;31m[Kinet[m[K6 fe80::eef4:bbff:fedb:a3cc  prefixlen 64  scopeid 0x20&lt;link&gt;
        [01;31m[Kinet[m[K6 fe80::eef4:bbff:fedb:a3cd  prefixlen 64  scopeid 0x20&lt;link&gt;
        [01;31m[Kinet[m[K 127.0.0.1  netmask 255.0.0.0
        [01;31m[Kinet[m[K6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;
        [01;31m[Kinet[m[K6 fe80::a236:9fff:fe78:4b14  prefixlen 64  scopeid 0x20&lt;link&gt;
        [01;31m[Kinet[m[K6 fe80::a236:9fff:fe78:4b16  prefixlen 64  scopeid 0x20&lt;link&gt;
        [01;31m[Kinet[m[K 192.168.122.1  netmask 255.255.255.0  broadcast 192.168.122.255
[root@controller ~]#</msg>
<msg timestamp="20171101 16:13:08.239" level="INFO">${output} =         [01;31m[Kinet[m[K 169.254.1.8  netmask 255.255.255.0  broadcast 169.254.1.255
        [01;31m[Kinet[m[K6 fe80::cca5:25ff:fe65:134b  prefixlen 64  scopeid 0x20&lt;link&gt;
        [01;31m...</msg>
<status status="PASS" endtime="20171101 16:13:08.239" starttime="20171101 16:13:08.239"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20171101 16:13:08.239" starttime="20171101 16:13:08.239"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>*****************ServerLogin_Validation Completed**********************</arg>
</arguments>
<msg timestamp="20171101 16:13:08.239" level="INFO">*****************ServerLogin_Validation Completed**********************</msg>
<status status="PASS" endtime="20171101 16:13:08.239" starttime="20171101 16:13:08.239"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>20s</arg>
<arg>2</arg>
<arg>write</arg>
<arg>source keystonerc_admin</arg>
</arguments>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>source keystonerc_admin</arg>
</arguments>
<msg timestamp="20171101 16:13:08.239" level="INFO">source keystonerc_admin</msg>
<status status="PASS" endtime="20171101 16:13:08.239" starttime="20171101 16:13:08.239"></status>
</kw>
<status status="PASS" endtime="20171101 16:13:08.239" starttime="20171101 16:13:08.239"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20171101 16:13:08.239" level="INFO">[root@controller ~(keystone_admin)]#</msg>
<msg timestamp="20171101 16:13:08.239" level="INFO">${output} = [root@controller ~(keystone_admin)]# </msg>
<status status="PASS" endtime="20171101 16:13:08.239" starttime="20171101 16:13:08.239"></status>
</kw>
<status status="PASS" endtime="20171101 16:13:08.239" starttime="20171101 16:12:58.068"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>nova list | grep -i ${VNFName}| awk -F ";" '{print $2}' | awk -F "=" '{print $2}'| awk -F " \ " '{print $1}'</arg>
</arguments>
<msg timestamp="20171101 16:13:08.255" level="INFO">nova list | grep -i oracle1| awk -F ";" '{p rint $2}' | awk -F "=" '{print $2}'| awk -F "  " '{print $1}'</msg>
<status status="PASS" endtime="20171101 16:13:08.255" starttime="20171101 16:13:08.239"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10</arg>
</arguments>
<msg timestamp="20171101 16:13:18.256" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20171101 16:13:18.256" starttime="20171101 16:13:08.255"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${Output}</var>
</assign>
<msg timestamp="20171101 16:13:18.256" level="INFO">172.18.0.174
[root@controller ~(keystone_admin)]#</msg>
<msg timestamp="20171101 16:13:18.256" level="INFO">${Output} = 172.18.0.174
[root@controller ~(keystone_admin)]# </msg>
<status status="PASS" endtime="20171101 16:13:18.256" starttime="20171101 16:13:18.256"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${Output}</arg>
</arguments>
<assign>
<var>@{Output}</var>
</assign>
<msg timestamp="20171101 16:13:18.256" level="INFO">@{Output} = [ 172.18.0.174 | [root@controller | ~(keystone_admin)]# ]</msg>
<status status="PASS" endtime="20171101 16:13:18.256" starttime="20171101 16:13:18.256"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Output}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${SBC_Mgmt_IP}</var>
</assign>
<msg timestamp="20171101 16:13:18.256" level="INFO">${SBC_Mgmt_IP} = 172.18.0.174</msg>
<status status="PASS" endtime="20171101 16:13:18.256" starttime="20171101 16:13:18.256"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>**************** Configuration Start ************</arg>
</arguments>
<msg timestamp="20171101 16:13:18.256" level="INFO">**************** Configuration Start ************</msg>
<status status="PASS" endtime="20171101 16:13:18.256" starttime="20171101 16:13:18.256"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5</arg>
</arguments>
<msg timestamp="20171101 16:13:23.264" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20171101 16:13:23.264" starttime="20171101 16:13:18.256"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>ssh -o "StrictHostKeyChecking no" user@${SBC_Mgmt_IP}</arg>
</arguments>
<msg timestamp="20171101 16:13:23.264" level="INFO">ssh -o "StrictHostKeyChecking no" user@172. 18.0.174</msg>
<status status="PASS" endtime="20171101 16:13:23.264" starttime="20171101 16:13:23.264"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5</arg>
</arguments>
<msg timestamp="20171101 16:13:28.273" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20171101 16:13:28.273" starttime="20171101 16:13:23.264"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${Output}</arg>
<arg>Read</arg>
</arguments>
<status status="PASS" endtime="20171101 16:13:28.273" starttime="20171101 16:13:28.273"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${SBC_NewPassword}</arg>
</arguments>
<msg timestamp="20171101 16:13:28.273" level="INFO">user@172.18.0.174's password:</msg>
<status status="PASS" endtime="20171101 16:13:28.273" starttime="20171101 16:13:28.273"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>3</arg>
</arguments>
<msg timestamp="20171101 16:13:31.284" level="INFO">Slept 3 seconds</msg>
<status status="PASS" endtime="20171101 16:13:31.284" starttime="20171101 16:13:28.273"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${Output}</var>
</assign>
<msg timestamp="20171101 16:13:31.284" level="INFO">SBC&gt;</msg>
<msg timestamp="20171101 16:13:31.284" level="INFO">${Output} = 
SBC&gt; </msg>
<status status="PASS" endtime="20171101 16:13:31.284" starttime="20171101 16:13:31.284"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${Output}</arg>
<arg>SBC&gt;</arg>
</arguments>
<status status="PASS" endtime="20171101 16:13:31.284" starttime="20171101 16:13:31.284"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>login to vsbc successful******</arg>
</arguments>
<msg timestamp="20171101 16:13:31.284" level="INFO">login to vsbc successful******</msg>
<status status="PASS" endtime="20171101 16:13:31.284" starttime="20171101 16:13:31.284"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>exit</arg>
</arguments>
<msg timestamp="20171101 16:13:31.284" level="INFO">exit</msg>
<status status="PASS" endtime="20171101 16:13:31.284" starttime="20171101 16:13:31.284"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20171101 16:13:33.313" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20171101 16:13:33.313" starttime="20171101 16:13:31.299"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${Output}</var>
</assign>
<msg timestamp="20171101 16:13:33.313" level="INFO">Closing Session

Received disconnect from 172.18.0.174: 11: Logged out.
[root@controller ~(keystone_admin)]#</msg>
<msg timestamp="20171101 16:13:33.313" level="INFO">${Output} = Closing Session

Received disconnect from 172.18.0.174: 11: Logged out.
[root@controller ~(keystone_admin)]# </msg>
<status status="PASS" endtime="20171101 16:13:33.313" starttime="20171101 16:13:33.313"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${Output}</arg>
<arg>[root@controller ~(keystone_admin)]#</arg>
</arguments>
<status status="PASS" endtime="20171101 16:13:33.313" starttime="20171101 16:13:33.313"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Logout from vSBC Successful****</arg>
</arguments>
<msg timestamp="20171101 16:13:33.313" level="INFO">Logout from vSBC Successful****</msg>
<status status="PASS" endtime="20171101 16:13:33.313" starttime="20171101 16:13:33.313"></status>
</kw>
<kw type="teardown" name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20171101 16:13:33.344" starttime="20171101 16:13:33.313"></status>
</kw>
<tags>
<tag>Onboard</tag>
</tags>
<status status="PASS" endtime="20171101 16:13:33.344" critical="yes" starttime="20171101 16:12:58.021"></status>
</test>
<test id="s1-t3" name="TC3_Verify ping from all network interfaces of vSBC">
<kw name="ImportDetails" library="Genric_Keywords">
<arguments>
<arg>C:\\Users\\Admin\\Desktop\\Sukesh-Automation\\RobotFramework\\Genric_Script\\Config\\Enterprise_Config.txt</arg>
<arg>${Label}</arg>
</arguments>
<assign>
<var>@{Server}</var>
</assign>
<kw name="Parseconfdata" library="Library">
<arguments>
<arg>${ConfigPath}</arg>
<arg>${Label}</arg>
</arguments>
<assign>
<var>@{Param}</var>
</assign>
<msg timestamp="20171101 16:13:33.344" level="INFO">@{Param} = [ "RedHat" | oracle1 | oracle1 | qcow2 | /root/auto_heatfiles | bare | C:\xampp\htdocs\VNFXchange | nova:compute2 | perimetaseg | TCP | Ingress | ipv4 | Oracle_SBC_Flavour_Template.txt | nnSCZ739p1-im...</msg>
<status status="PASS" endtime="20171101 16:13:33.344" starttime="20171101 16:13:33.344"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${server}</var>
</assign>
<msg timestamp="20171101 16:13:33.344" level="INFO">${server} = "RedHat"</msg>
<status status="PASS" endtime="20171101 16:13:33.344" starttime="20171101 16:13:33.344"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${VNFName}</var>
</assign>
<msg timestamp="20171101 16:13:33.344" level="INFO">${VNFName} = oracle1</msg>
<status status="PASS" endtime="20171101 16:13:33.344" starttime="20171101 16:13:33.344"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>2</arg>
</arguments>
<assign>
<var>${ImageName}</var>
</assign>
<msg timestamp="20171101 16:13:33.344" level="INFO">${ImageName} = oracle1</msg>
<status status="PASS" endtime="20171101 16:13:33.344" starttime="20171101 16:13:33.344"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>3</arg>
</arguments>
<assign>
<var>${DiskFormat}</var>
</assign>
<msg timestamp="20171101 16:13:33.344" level="INFO">${DiskFormat} = qcow2</msg>
<status status="PASS" endtime="20171101 16:13:33.344" starttime="20171101 16:13:33.344"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>4</arg>
</arguments>
<assign>
<var>${ImageFilePath}</var>
</assign>
<msg timestamp="20171101 16:13:33.344" level="INFO">${ImageFilePath} = /root/auto_heatfiles</msg>
<status status="PASS" endtime="20171101 16:13:33.344" starttime="20171101 16:13:33.344"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>5</arg>
</arguments>
<assign>
<var>${ConatinerFormat}</var>
</assign>
<msg timestamp="20171101 16:13:33.344" level="INFO">${ConatinerFormat} = bare</msg>
<status status="PASS" endtime="20171101 16:13:33.344" starttime="20171101 16:13:33.344"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>6</arg>
</arguments>
<assign>
<var>${FlavorP}</var>
</assign>
<msg timestamp="20171101 16:13:33.344" level="INFO">${FlavorP} = C:\xampp\htdocs\VNFXchange</msg>
<status status="PASS" endtime="20171101 16:13:33.344" starttime="20171101 16:13:33.344"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>7</arg>
</arguments>
<assign>
<var>${AvZone}</var>
</assign>
<msg timestamp="20171101 16:13:33.344" level="INFO">${AvZone} = nova:compute2</msg>
<status status="PASS" endtime="20171101 16:13:33.344" starttime="20171101 16:13:33.344"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>8</arg>
</arguments>
<assign>
<var>${Security}</var>
</assign>
<msg timestamp="20171101 16:13:33.344" level="INFO">${Security} = perimetaseg</msg>
<status status="PASS" endtime="20171101 16:13:33.344" starttime="20171101 16:13:33.344"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>9</arg>
</arguments>
<assign>
<var>${Protocol}</var>
</assign>
<msg timestamp="20171101 16:13:33.344" level="INFO">${Protocol} = TCP</msg>
<status status="PASS" endtime="20171101 16:13:33.344" starttime="20171101 16:13:33.344"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>10</arg>
</arguments>
<assign>
<var>${Direction}</var>
</assign>
<msg timestamp="20171101 16:13:33.344" level="INFO">${Direction} = Ingress</msg>
<status status="PASS" endtime="20171101 16:13:33.344" starttime="20171101 16:13:33.344"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>11</arg>
</arguments>
<assign>
<var>${Ethertype}</var>
</assign>
<msg timestamp="20171101 16:13:33.344" level="INFO">${Ethertype} = ipv4</msg>
<status status="PASS" endtime="20171101 16:13:33.344" starttime="20171101 16:13:33.344"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>12</arg>
</arguments>
<assign>
<var>${FN}</var>
</assign>
<msg timestamp="20171101 16:13:33.344" level="INFO">${FN} = Oracle_SBC_Flavour_Template.txt</msg>
<status status="PASS" endtime="20171101 16:13:33.344" starttime="20171101 16:13:33.344"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Param}</arg>
<arg>13</arg>
</arguments>
<assign>
<var>${ImageFileName}</var>
</assign>
<msg timestamp="20171101 16:13:33.344" level="INFO">${ImageFileName} = nnSCZ739p1-img-vm_kvm.qcow2</msg>
<status status="PASS" endtime="20171101 16:13:33.344" starttime="20171101 16:13:33.344"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${Nic1}</arg>
<arg>Get From List</arg>
<arg>${Param}</arg>
<arg>12</arg>
</arguments>
<status status="PASS" endtime="20171101 16:13:33.344" starttime="20171101 16:13:33.344"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${Nic2}</arg>
<arg>Get From List</arg>
<arg>${Param}</arg>
<arg>13</arg>
</arguments>
<status status="PASS" endtime="20171101 16:13:33.344" starttime="20171101 16:13:33.344"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${Nic3}</arg>
<arg>Get From List</arg>
<arg>${Param}</arg>
<arg>14</arg>
</arguments>
<status status="PASS" endtime="20171101 16:13:33.359" starttime="20171101 16:13:33.344"></status>
</kw>
<kw name="Split Extension" library="OperatingSystem">
<doc>Splits the extension from the given path.</doc>
<arguments>
<arg>${FN}</arg>
</arguments>
<assign>
<var>${FlavourName}</var>
<var>${Ext}</var>
</assign>
<msg timestamp="20171101 16:13:33.359" level="INFO">${FlavourName} = Oracle_SBC_Flavour_Template</msg>
<msg timestamp="20171101 16:13:33.359" level="INFO">${Ext} = txt</msg>
<status status="PASS" endtime="20171101 16:13:33.359" starttime="20171101 16:13:33.359"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${ImageFileName}</arg>
</arguments>
<msg timestamp="20171101 16:13:33.359" level="INFO">${ImageFileName} = nnSCZ739p1-img-vm_kvm.qcow2</msg>
<status status="PASS" endtime="20171101 16:13:33.359" starttime="20171101 16:13:33.359"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${FN}</arg>
</arguments>
<msg timestamp="20171101 16:13:33.359" level="INFO">${FN} = Oracle_SBC_Flavour_Template.txt</msg>
<status status="PASS" endtime="20171101 16:13:33.359" starttime="20171101 16:13:33.359"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${FlavourName}</arg>
</arguments>
<msg timestamp="20171101 16:13:33.359" level="INFO">${FlavourName} = Oracle_SBC_Flavour_Template</msg>
<status status="PASS" endtime="20171101 16:13:33.359" starttime="20171101 16:13:33.359"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${VNFName}</arg>
</arguments>
<msg timestamp="20171101 16:13:33.359" level="INFO">${VNFName} = oracle1</msg>
<status status="PASS" endtime="20171101 16:13:33.359" starttime="20171101 16:13:33.359"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${server}</arg>
</arguments>
<msg timestamp="20171101 16:13:33.359" level="INFO">${server} = "RedHat"</msg>
<status status="PASS" endtime="20171101 16:13:33.359" starttime="20171101 16:13:33.359"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${ImageName}</arg>
</arguments>
<msg timestamp="20171101 16:13:33.359" level="INFO">${ImageName} = oracle1</msg>
<status status="PASS" endtime="20171101 16:13:33.359" starttime="20171101 16:13:33.359"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${DiskFormat}</arg>
</arguments>
<msg timestamp="20171101 16:13:33.359" level="INFO">${DiskFormat} = qcow2</msg>
<status status="PASS" endtime="20171101 16:13:33.359" starttime="20171101 16:13:33.359"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${ImageFilePath}</arg>
</arguments>
<msg timestamp="20171101 16:13:33.359" level="INFO">${ImageFilePath} = /root/auto_heatfiles</msg>
<status status="PASS" endtime="20171101 16:13:33.359" starttime="20171101 16:13:33.359"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${ConatinerFormat}</arg>
</arguments>
<msg timestamp="20171101 16:13:33.359" level="INFO">${ConatinerFormat} = bare</msg>
<status status="PASS" endtime="20171101 16:13:33.359" starttime="20171101 16:13:33.359"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${FlavorP}</arg>
</arguments>
<msg timestamp="20171101 16:13:33.359" level="INFO">${FlavorP} = C:\xampp\htdocs\VNFXchange</msg>
<status status="PASS" endtime="20171101 16:13:33.359" starttime="20171101 16:13:33.359"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AvZone}</arg>
</arguments>
<msg timestamp="20171101 16:13:33.359" level="INFO">${AvZone} = nova:compute2</msg>
<status status="PASS" endtime="20171101 16:13:33.359" starttime="20171101 16:13:33.359"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${Security}</arg>
</arguments>
<msg timestamp="20171101 16:13:33.359" level="INFO">${Security} = perimetaseg</msg>
<status status="PASS" endtime="20171101 16:13:33.359" starttime="20171101 16:13:33.359"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${Protocol}</arg>
</arguments>
<msg timestamp="20171101 16:13:33.359" level="INFO">${Protocol} = TCP</msg>
<status status="PASS" endtime="20171101 16:13:33.359" starttime="20171101 16:13:33.359"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${Direction}</arg>
</arguments>
<msg timestamp="20171101 16:13:33.359" level="INFO">${Direction} = Ingress</msg>
<status status="PASS" endtime="20171101 16:13:33.359" starttime="20171101 16:13:33.359"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${Ethertype}</arg>
</arguments>
<msg timestamp="20171101 16:13:33.359" level="INFO">${Ethertype} = ipv4</msg>
<status status="PASS" endtime="20171101 16:13:33.359" starttime="20171101 16:13:33.359"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Set Global Variable</arg>
<arg>${Nic1}</arg>
</arguments>
<status status="PASS" endtime="20171101 16:13:33.359" starttime="20171101 16:13:33.359"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Set Global Variable</arg>
<arg>${Nic2}</arg>
</arguments>
<status status="PASS" endtime="20171101 16:13:33.359" starttime="20171101 16:13:33.359"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${VNFName}</arg>
</arguments>
<msg timestamp="20171101 16:13:33.359" level="INFO">${VNFName} = oracle1</msg>
<status status="PASS" endtime="20171101 16:13:33.359" starttime="20171101 16:13:33.359"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Set Global Variable</arg>
<arg>${Nic3}</arg>
</arguments>
<status status="PASS" endtime="20171101 16:13:33.359" starttime="20171101 16:13:33.359"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${server}=="RedHat"</arg>
<arg>Return From Keyword</arg>
<arg>@{RedHat}</arg>
</arguments>
<kw name="Return From Keyword" library="BuiltIn">
<doc>Returns from the enclosing user keyword.</doc>
<arguments>
<arg>@{RedHat}</arg>
</arguments>
<msg timestamp="20171101 16:13:33.359" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20171101 16:13:33.359" starttime="20171101 16:13:33.359"></status>
</kw>
<status status="PASS" endtime="20171101 16:13:33.359" starttime="20171101 16:13:33.359"></status>
</kw>
<msg timestamp="20171101 16:13:33.359" level="INFO">@{Server} = [ 10.53.214.10 | root | techm123 ]</msg>
<status status="PASS" endtime="20171101 16:13:33.359" starttime="20171101 16:13:33.344"></status>
</kw>
<kw name="Server_Login" library="Genric_Keywords">
<arguments>
<arg>@{Server}</arg>
</arguments>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Server}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${HOST}</var>
</assign>
<msg timestamp="20171101 16:13:33.375" level="INFO">${HOST} = 10.53.214.10</msg>
<status status="PASS" endtime="20171101 16:13:33.375" starttime="20171101 16:13:33.359"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Server}</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${USERNAME}</var>
</assign>
<msg timestamp="20171101 16:13:33.375" level="INFO">${USERNAME} = root</msg>
<status status="PASS" endtime="20171101 16:13:33.375" starttime="20171101 16:13:33.375"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Server}</arg>
<arg>2</arg>
</arguments>
<assign>
<var>${PASSWORD}</var>
</assign>
<msg timestamp="20171101 16:13:33.375" level="INFO">${PASSWORD} = techm123</msg>
<status status="PASS" endtime="20171101 16:13:33.375" starttime="20171101 16:13:33.375"></status>
</kw>
<kw type="for" name="${i} IN RANGE [ 0 | 4 ]">
<kw type="foritem" name="${i} = 0">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<assign>
<var>${Index}</var>
</assign>
<msg timestamp="20171101 16:13:33.375" level="INFO">${Index} = 1</msg>
<status status="PASS" endtime="20171101 16:13:33.375" starttime="20171101 16:13:33.375"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Login</arg>
<arg>${USERNAME}</arg>
<arg>${PASSWORD}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PASSWORD}</arg>
</arguments>
<msg timestamp="20171101 16:13:33.375" level="INFO">Logging into '10.53.214.10:22' as 'root'.</msg>
<msg timestamp="20171101 16:13:39.507" level="INFO">Read output: Last login: Wed Nov  1 06:42:11 2017 from 10.53.172.4
[root@controller ~]#</msg>
<status status="PASS" endtime="20171101 16:13:39.507" starttime="20171101 16:13:33.375"></status>
</kw>
<msg timestamp="20171101 16:13:39.507" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20171101 16:13:39.507" starttime="20171101 16:13:33.375"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20171101 16:13:39.507" starttime="20171101 16:13:39.507"></status>
</kw>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20171101 16:13:39.507" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20171101 16:13:39.507" starttime="20171101 16:13:39.507"></status>
</kw>
<status status="PASS" endtime="20171101 16:13:39.507" starttime="20171101 16:13:33.375"></status>
</kw>
<status status="PASS" endtime="20171101 16:13:39.507" starttime="20171101 16:13:33.375"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>*****************ServerLogin_Validation**********************</arg>
</arguments>
<msg timestamp="20171101 16:13:39.507" level="INFO">*****************ServerLogin_Validation**********************</msg>
<status status="PASS" endtime="20171101 16:13:39.507" starttime="20171101 16:13:39.507"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>20s</arg>
<arg>2</arg>
<arg>write</arg>
<arg>ifconfig | grep inet</arg>
</arguments>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>ifconfig | grep inet</arg>
</arguments>
<msg timestamp="20171101 16:13:39.507" level="INFO">ifconfig | grep inet</msg>
<status status="PASS" endtime="20171101 16:13:39.507" starttime="20171101 16:13:39.507"></status>
</kw>
<status status="PASS" endtime="20171101 16:13:39.507" starttime="20171101 16:13:39.507"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>4</arg>
</arguments>
<msg timestamp="20171101 16:13:43.516" level="INFO">Slept 4 seconds</msg>
<status status="PASS" endtime="20171101 16:13:43.516" starttime="20171101 16:13:39.507"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20171101 16:13:43.516" level="INFO">[01;31m[Kinet[m[K 169.254.1.8  netmask 255.255.255.0  broadcast 169.254.1.255
        [01;31m[Kinet[m[K6 fe80::cca5:25ff:fe65:134b  prefixlen 64  scopeid 0x20&lt;link&gt;
        [01;31m[Kinet[m[K 172.18.0.60  netmask 255.255.255.0  broadcast 172.18.0.255
        [01;31m[Kinet[m[K6 fe80::4d7:59ff:fe85:5f45  prefixlen 64  scopeid 0x20&lt;link&gt;
        [01;31m[Kinet[m[K 10.80.1.8  netmask 255.255.255.0  broadcast 10.80.1.255
        [01;31m[Kinet[m[K6 fe80::fc8a:54ff:fe8a:974e  prefixlen 64  scopeid 0x20&lt;link&gt;
        [01;31m[Kinet[m[K 10.81.1.8  netmask 255.255.255.0  broadcast 10.81.1.255
        [01;31m[Kinet[m[K6 fe80::283b:ecff:fee2:1e40  prefixlen 64  scopeid 0x20&lt;link&gt;
        [01;31m[Kinet[m[K6 fe80::eef4:bbff:fedb:a3c8  prefixlen 64  scopeid 0x20&lt;link&gt;
        [01;31m[Kinet[m[K 168.254.17.8  netmask 255.255.255.0  broadcast 168.254.17.255
        [01;31m[Kinet[m[K6 fe80::eef4:bbff:fedb:a3ca  prefixlen 64  scopeid 0x20&lt;link&gt;
        [01;31m[Kinet[m[K 10.53.214.10  netmask 255.255.255.0  broadcast 10.53.214.255
        [01;31m[Kinet[m[K6 fe80::eef4:bbff:fedb:a3cc  prefixlen 64  scopeid 0x20&lt;link&gt;
        [01;31m[Kinet[m[K6 fe80::eef4:bbff:fedb:a3cd  prefixlen 64  scopeid 0x20&lt;link&gt;
        [01;31m[Kinet[m[K 127.0.0.1  netmask 255.0.0.0
        [01;31m[Kinet[m[K6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;
        [01;31m[Kinet[m[K6 fe80::a236:9fff:fe78:4b14  prefixlen 64  scopeid 0x20&lt;link&gt;
        [01;31m[Kinet[m[K6 fe80::a236:9fff:fe78:4b16  prefixlen 64  scopeid 0x20&lt;link&gt;
        [01;31m[Kinet[m[K 192.168.122.1  netmask 255.255.255.0  broadcast 192.168.122.255
[root@controller ~]#</msg>
<msg timestamp="20171101 16:13:43.516" level="INFO">${output} =         [01;31m[Kinet[m[K 169.254.1.8  netmask 255.255.255.0  broadcast 169.254.1.255
        [01;31m[Kinet[m[K6 fe80::cca5:25ff:fe65:134b  prefixlen 64  scopeid 0x20&lt;link&gt;
        [01;31m...</msg>
<status status="PASS" endtime="20171101 16:13:43.516" starttime="20171101 16:13:43.516"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20171101 16:13:43.516" starttime="20171101 16:13:43.516"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>*****************ServerLogin_Validation Completed**********************</arg>
</arguments>
<msg timestamp="20171101 16:13:43.516" level="INFO">*****************ServerLogin_Validation Completed**********************</msg>
<status status="PASS" endtime="20171101 16:13:43.516" starttime="20171101 16:13:43.516"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>20s</arg>
<arg>2</arg>
<arg>write</arg>
<arg>source keystonerc_admin</arg>
</arguments>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>source keystonerc_admin</arg>
</arguments>
<msg timestamp="20171101 16:13:43.516" level="INFO">source keystonerc_admin</msg>
<status status="PASS" endtime="20171101 16:13:43.516" starttime="20171101 16:13:43.516"></status>
</kw>
<status status="PASS" endtime="20171101 16:13:43.516" starttime="20171101 16:13:43.516"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20171101 16:13:43.516" level="INFO">[root@controller ~(keystone_admin)]#</msg>
<msg timestamp="20171101 16:13:43.516" level="INFO">${output} = [root@controller ~(keystone_admin)]# </msg>
<status status="PASS" endtime="20171101 16:13:43.516" starttime="20171101 16:13:43.516"></status>
</kw>
<status status="PASS" endtime="20171101 16:13:43.516" starttime="20171101 16:13:33.359"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>nova list | grep -i ${VNFName}| awk -F ";" '{print $2}' | awk -F "=" '{print $2}'| awk -F " \ " '{print $1}'</arg>
</arguments>
<msg timestamp="20171101 16:13:43.532" level="INFO">nova list | grep -i oracle1| awk -F ";" '{p rint $2}' | awk -F "=" '{print $2}'| awk -F "  " '{print $1}'</msg>
<status status="PASS" endtime="20171101 16:13:43.532" starttime="20171101 16:13:43.516"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10</arg>
</arguments>
<msg timestamp="20171101 16:13:53.547" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20171101 16:13:53.547" starttime="20171101 16:13:43.532"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${Output}</var>
</assign>
<msg timestamp="20171101 16:13:53.547" level="INFO">172.18.0.174
[root@controller ~(keystone_admin)]#</msg>
<msg timestamp="20171101 16:13:53.547" level="INFO">${Output} = 172.18.0.174
[root@controller ~(keystone_admin)]# </msg>
<status status="PASS" endtime="20171101 16:13:53.547" starttime="20171101 16:13:53.547"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${Output}</arg>
</arguments>
<assign>
<var>@{Output}</var>
</assign>
<msg timestamp="20171101 16:13:53.547" level="INFO">@{Output} = [ 172.18.0.174 | [root@controller | ~(keystone_admin)]# ]</msg>
<status status="PASS" endtime="20171101 16:13:53.547" starttime="20171101 16:13:53.547"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Output}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${SBC_Mgmt_IP}</var>
</assign>
<msg timestamp="20171101 16:13:53.547" level="INFO">${SBC_Mgmt_IP} = 172.18.0.174</msg>
<status status="PASS" endtime="20171101 16:13:53.547" starttime="20171101 16:13:53.547"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>**************** Configuration Start ************</arg>
</arguments>
<msg timestamp="20171101 16:13:53.547" level="INFO">**************** Configuration Start ************</msg>
<status status="PASS" endtime="20171101 16:13:53.547" starttime="20171101 16:13:53.547"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5</arg>
</arguments>
<msg timestamp="20171101 16:13:58.556" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20171101 16:13:58.556" starttime="20171101 16:13:53.547"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>ssh -o "StrictHostKeyChecking no" user@${SBC_Mgmt_IP}</arg>
</arguments>
<msg timestamp="20171101 16:13:58.556" level="INFO">ssh -o "StrictHostKeyChecking no" user@172. 18.0.174</msg>
<status status="PASS" endtime="20171101 16:13:58.556" starttime="20171101 16:13:58.556"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5</arg>
</arguments>
<msg timestamp="20171101 16:14:03.564" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20171101 16:14:03.564" starttime="20171101 16:13:58.556"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${output}=</arg>
<arg>Read</arg>
</arguments>
<status status="PASS" endtime="20171101 16:14:03.564" starttime="20171101 16:14:03.564"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${SBC_NewPassword}</arg>
</arguments>
<msg timestamp="20171101 16:14:03.564" level="INFO">user@172.18.0.174's password:</msg>
<status status="PASS" endtime="20171101 16:14:03.564" starttime="20171101 16:14:03.564"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20171101 16:14:05.577" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20171101 16:14:05.577" starttime="20171101 16:14:03.564"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>en</arg>
</arguments>
<status status="PASS" endtime="20171101 16:14:05.577" starttime="20171101 16:14:05.577"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20171101 16:14:06.591" level="INFO">Slept 1 second</msg>
<status status="PASS" endtime="20171101 16:14:06.591" starttime="20171101 16:14:05.577"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${SBC_NewPassword}</arg>
</arguments>
<msg timestamp="20171101 16:14:06.591" level="INFO">SBC&gt; en</msg>
<status status="PASS" endtime="20171101 16:14:06.591" starttime="20171101 16:14:06.591"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${output}=</arg>
<arg>Read</arg>
</arguments>
<status status="PASS" endtime="20171101 16:14:06.591" starttime="20171101 16:14:06.591"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20171101 16:14:08.603" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20171101 16:14:08.603" starttime="20171101 16:14:06.591"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Write</arg>
<arg>ifconfig -a</arg>
</arguments>
<status status="PASS" endtime="20171101 16:14:08.603" starttime="20171101 16:14:08.603"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${output}</arg>
<arg>read</arg>
</arguments>
<status status="PASS" endtime="20171101 16:14:08.603" starttime="20171101 16:14:08.603"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${Server}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${HOST}</var>
</assign>
<msg timestamp="20171101 16:14:08.603" level="INFO">${HOST} = 10.53.214.10</msg>
<status status="PASS" endtime="20171101 16:14:08.603" starttime="20171101 16:14:08.603"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ping</arg>
<arg>${HOST}</arg>
</arguments>
<assign>
<var>${store}</var>
</assign>
<msg timestamp="20171101 16:14:08.603" level="INFO">${store} = ping 10.53.214.10</msg>
<status status="PASS" endtime="20171101 16:14:08.603" starttime="20171101 16:14:08.603"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${store}</arg>
</arguments>
<msg timestamp="20171101 16:14:08.603" level="INFO">Password:</msg>
<status status="PASS" endtime="20171101 16:14:08.603" starttime="20171101 16:14:08.603"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10</arg>
</arguments>
<msg timestamp="20171101 16:14:18.604" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20171101 16:14:18.604" starttime="20171101 16:14:08.603"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20171101 16:14:18.604" level="INFO">SBC# ping 10.53.214.10
PING 10.53.214.10 from wancom0:1

44 bytes from 10.53.214.10: icmp_seq=1 ttl=62 time=0.826 ms
44 bytes from 10.53.214.10: icmp_seq=2 ttl=62 time=1.110 ms
44 bytes from 10.53.214.10: icmp_seq=3 ttl=62 time=0.850 ms
44 bytes from 10.53.214.10: icmp_seq=4 ttl=62 time=1.380 ms

4 packets transmitted, 4 received, 0% packet loss
SBC#</msg>
<msg timestamp="20171101 16:14:18.604" level="INFO">${output} = SBC# ping 10.53.214.10
PING 10.53.214.10 from wancom0:1

44 bytes from 10.53.214.10: icmp_seq=1 ttl=62 time=0.826 ms
44 bytes from 10.53.214.10: icmp_seq=2 ttl=62 time=1.110 ms
44 bytes from 10.5...</msg>
<status status="PASS" endtime="20171101 16:14:18.604" starttime="20171101 16:14:18.604"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>time</arg>
</arguments>
<status status="PASS" endtime="20171101 16:14:18.604" starttime="20171101 16:14:18.604"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>pinging successful for controller****</arg>
</arguments>
<msg timestamp="20171101 16:14:18.604" level="INFO">pinging successful for controller****</msg>
<status status="PASS" endtime="20171101 16:14:18.604" starttime="20171101 16:14:18.604"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ping</arg>
<arg>${DEFAULT-GATEWAY}</arg>
</arguments>
<assign>
<var>${store}</var>
</assign>
<msg timestamp="20171101 16:14:18.604" level="INFO">${store} = ping 172.18.0.1</msg>
<status status="PASS" endtime="20171101 16:14:18.604" starttime="20171101 16:14:18.604"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${store}</arg>
</arguments>
<msg timestamp="20171101 16:14:18.604" level="INFO">ping 172.18.0.1</msg>
<status status="PASS" endtime="20171101 16:14:18.604" starttime="20171101 16:14:18.604"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10</arg>
</arguments>
<msg timestamp="20171101 16:14:28.604" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20171101 16:14:28.604" starttime="20171101 16:14:18.604"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20171101 16:14:28.604" level="INFO">PING 172.18.0.1 from wancom0:1

44 bytes from 172.18.0.1: icmp_seq=1 ttl=64 time=0.607 ms
44 bytes from 172.18.0.1: icmp_seq=2 ttl=64 time=0.904 ms
44 bytes from 172.18.0.1: icmp_seq=3 ttl=64 time=0.571 ms
44 bytes from 172.18.0.1: icmp_seq=4 ttl=64 time=9.234 ms

4 packets transmitted, 4 received, 0% packet loss
SBC#</msg>
<msg timestamp="20171101 16:14:28.604" level="INFO">${output} = PING 172.18.0.1 from wancom0:1

44 bytes from 172.18.0.1: icmp_seq=1 ttl=64 time=0.607 ms
44 bytes from 172.18.0.1: icmp_seq=2 ttl=64 time=0.904 ms
44 bytes from 172.18.0.1: icmp_seq=3 ttl=64 time...</msg>
<status status="PASS" endtime="20171101 16:14:28.604" starttime="20171101 16:14:28.604"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>time</arg>
</arguments>
<status status="PASS" endtime="20171101 16:14:28.604" starttime="20171101 16:14:28.604"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>pinging successful for default gateway****​</arg>
</arguments>
<msg timestamp="20171101 16:14:28.604" level="INFO">pinging successful for default gateway****​</msg>
<status status="PASS" endtime="20171101 16:14:28.604" starttime="20171101 16:14:28.604"></status>
</kw>
<kw type="teardown" name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20171101 16:14:28.745" starttime="20171101 16:14:28.604"></status>
</kw>
<tags>
<tag>Onboard</tag>
</tags>
<status status="PASS" endtime="20171101 16:14:28.745" critical="yes" starttime="20171101 16:13:33.344"></status>
</test>
<status status="PASS" endtime="20171101 16:14:28.745" starttime="20171101 16:03:21.877"></status>
</suite>
<statistics>
<total>
<stat fail="0" pass="3">Critical Tests</stat>
<stat fail="0" pass="3">All Tests</stat>
</total>
<tag>
<stat fail="0" pass="3">Onboard</stat>
</tag>
<suite>
<stat fail="0" id="s1" name="SBC Onboarding TestCases" pass="3">SBC Onboarding TestCases</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
